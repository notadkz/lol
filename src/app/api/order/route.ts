import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth"; // ho·∫∑c ƒë∆∞·ªùng d·∫´n t·ªõi authOptions c·ªßa b·∫°n
import { prisma } from "@/lib/prisma";

export async function POST(req: Request) {
  const session = await getServerSession(authOptions);
  console.log("üü° Session ·ªü API /api/order:", session);

  if (!session || !session.user?.id) {
    return NextResponse.json({ error: "Ch∆∞a ƒëƒÉng nh·∫≠p" }, { status: 401 });
  }

  const { accountId } = await req.json();

  if (!accountId) {
    return NextResponse.json({ error: "Thi·∫øu accountId" }, { status: 400 });
  }

  try {
    const userId = Number(session.user.id);

    // L·∫•y t√†i kho·∫£n c·∫ßn mua
    const account = await prisma.gameAccount.findUnique({
      where: { id: Number(accountId) },
    });

    if (!account || account.status !== "AVAILABLE") {
      return NextResponse.json(
        { error: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b√°n" },
        { status: 400 }
      );
    }

    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    const user = await prisma.user.findUnique({ where: { id: userId } });
    if (!user) {
      return NextResponse.json(
        { error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" },
        { status: 404 }
      );
    }

    // Ki·ªÉm tra s·ªë d∆∞
    if (user.balance.lt(account.price)) {
      return NextResponse.json({ error: "S·ªë d∆∞ kh√¥ng ƒë·ªß" }, { status: 400 });
    }

    const totalAmount = account.price;

    // Th·ª±c hi·ªán trong transaction ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
    const order = await prisma.$transaction(async (tx) => {
      const newOrder = await tx.order.create({
        data: {
          buyerId: user.id,
          accountId: account.id,
          totalAmount,
          status: "COMPLETED", // ho·∫∑c PENDING n·∫øu c·∫ßn x√°c nh·∫≠n
          paymentMethod: "BALANCE",
        },
      });

      // Tr·ª´ ti·ªÅn ng∆∞·ªùi d√πng
      await tx.user.update({
        where: { id: user.id },
        data: {
          balance: {
            decrement: totalAmount,
          },
        },
      });

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n game
      await tx.gameAccount.update({
        where: { id: account.id },
        data: {
          status: "SOLD",
          buyerId: user.id,
        },
      });

      // Ghi l·ªãch s·ª≠ giao d·ªãch
      await tx.transactionHistory.create({
        data: {
          userId: user.id,
          amount: -totalAmount,
          balanceBefore: user.balance,
          balanceAfter: user.balance.minus(totalAmount),
          type: "PURCHASE",
          description: `Mua t√†i kho·∫£n game ID #${account.id}`,
          orderId: newOrder.id,
          status: "SUCCESS",
        },
      });

      return newOrder;
    });

    return NextResponse.json({ success: true, order });
  } catch (error) {
    console.error("L·ªói ƒë·∫∑t h√†ng:", error);
    return NextResponse.json({ error: "L·ªói server" }, { status: 500 });
  }
}
