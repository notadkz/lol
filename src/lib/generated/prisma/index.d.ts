
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model TopUpTransaction
 * 
 */
export type TopUpTransaction = $Result.DefaultSelection<Prisma.$TopUpTransactionPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model Champion
 * 
 */
export type Champion = $Result.DefaultSelection<Prisma.$ChampionPayload>
/**
 * Model Skin
 * 
 */
export type Skin = $Result.DefaultSelection<Prisma.$SkinPayload>
/**
 * Model Chroma
 * 
 */
export type Chroma = $Result.DefaultSelection<Prisma.$ChromaPayload>
/**
 * Model Ward
 * 
 */
export type Ward = $Result.DefaultSelection<Prisma.$WardPayload>
/**
 * Model Emote
 * 
 */
export type Emote = $Result.DefaultSelection<Prisma.$EmotePayload>
/**
 * Model Icon
 * 
 */
export type Icon = $Result.DefaultSelection<Prisma.$IconPayload>
/**
 * Model LittleLegend
 * 
 */
export type LittleLegend = $Result.DefaultSelection<Prisma.$LittleLegendPayload>
/**
 * Model Boom
 * 
 */
export type Boom = $Result.DefaultSelection<Prisma.$BoomPayload>
/**
 * Model Arena
 * 
 */
export type Arena = $Result.DefaultSelection<Prisma.$ArenaPayload>
/**
 * Model AccountChampion
 * 
 */
export type AccountChampion = $Result.DefaultSelection<Prisma.$AccountChampionPayload>
/**
 * Model AccountSkin
 * 
 */
export type AccountSkin = $Result.DefaultSelection<Prisma.$AccountSkinPayload>
/**
 * Model AccountChroma
 * 
 */
export type AccountChroma = $Result.DefaultSelection<Prisma.$AccountChromaPayload>
/**
 * Model AccountWard
 * 
 */
export type AccountWard = $Result.DefaultSelection<Prisma.$AccountWardPayload>
/**
 * Model AccountEmote
 * 
 */
export type AccountEmote = $Result.DefaultSelection<Prisma.$AccountEmotePayload>
/**
 * Model AccountIcon
 * 
 */
export type AccountIcon = $Result.DefaultSelection<Prisma.$AccountIconPayload>
/**
 * Model AccountLittleLegend
 * 
 */
export type AccountLittleLegend = $Result.DefaultSelection<Prisma.$AccountLittleLegendPayload>
/**
 * Model AccountBoom
 * 
 */
export type AccountBoom = $Result.DefaultSelection<Prisma.$AccountBoomPayload>
/**
 * Model AccountArena
 * 
 */
export type AccountArena = $Result.DefaultSelection<Prisma.$AccountArenaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Rank: {
  SAT: 'SAT',
  DONG: 'DONG',
  BAC: 'BAC',
  VANG: 'VANG',
  BACH_KIM: 'BACH_KIM',
  KIM_CUONG: 'KIM_CUONG',
  CAO_THU: 'CAO_THU',
  DAI_CAO_THU: 'DAI_CAO_THU',
  THACH_DAU: 'THACH_DAU'
};

export type Rank = (typeof Rank)[keyof typeof Rank]


export const AccountStatus: {
  AVAILABLE: 'AVAILABLE',
  SOLD: 'SOLD',
  HIDDEN: 'HIDDEN'
};

export type AccountStatus = (typeof AccountStatus)[keyof typeof AccountStatus]


export const TopUpStatus: {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED'
};

export type TopUpStatus = (typeof TopUpStatus)[keyof typeof TopUpStatus]


export const OrderStatus: {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]

}

export type Rank = $Enums.Rank

export const Rank: typeof $Enums.Rank

export type AccountStatus = $Enums.AccountStatus

export const AccountStatus: typeof $Enums.AccountStatus

export type TopUpStatus = $Enums.TopUpStatus

export const TopUpStatus: typeof $Enums.TopUpStatus

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.topUpTransaction`: Exposes CRUD operations for the **TopUpTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TopUpTransactions
    * const topUpTransactions = await prisma.topUpTransaction.findMany()
    * ```
    */
  get topUpTransaction(): Prisma.TopUpTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.champion`: Exposes CRUD operations for the **Champion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Champions
    * const champions = await prisma.champion.findMany()
    * ```
    */
  get champion(): Prisma.ChampionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skin`: Exposes CRUD operations for the **Skin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skins
    * const skins = await prisma.skin.findMany()
    * ```
    */
  get skin(): Prisma.SkinDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chroma`: Exposes CRUD operations for the **Chroma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chromas
    * const chromas = await prisma.chroma.findMany()
    * ```
    */
  get chroma(): Prisma.ChromaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ward`: Exposes CRUD operations for the **Ward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wards
    * const wards = await prisma.ward.findMany()
    * ```
    */
  get ward(): Prisma.WardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emote`: Exposes CRUD operations for the **Emote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Emotes
    * const emotes = await prisma.emote.findMany()
    * ```
    */
  get emote(): Prisma.EmoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.icon`: Exposes CRUD operations for the **Icon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Icons
    * const icons = await prisma.icon.findMany()
    * ```
    */
  get icon(): Prisma.IconDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.littleLegend`: Exposes CRUD operations for the **LittleLegend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LittleLegends
    * const littleLegends = await prisma.littleLegend.findMany()
    * ```
    */
  get littleLegend(): Prisma.LittleLegendDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.boom`: Exposes CRUD operations for the **Boom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Booms
    * const booms = await prisma.boom.findMany()
    * ```
    */
  get boom(): Prisma.BoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.arena`: Exposes CRUD operations for the **Arena** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Arenas
    * const arenas = await prisma.arena.findMany()
    * ```
    */
  get arena(): Prisma.ArenaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountChampion`: Exposes CRUD operations for the **AccountChampion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountChampions
    * const accountChampions = await prisma.accountChampion.findMany()
    * ```
    */
  get accountChampion(): Prisma.AccountChampionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountSkin`: Exposes CRUD operations for the **AccountSkin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountSkins
    * const accountSkins = await prisma.accountSkin.findMany()
    * ```
    */
  get accountSkin(): Prisma.AccountSkinDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountChroma`: Exposes CRUD operations for the **AccountChroma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountChromas
    * const accountChromas = await prisma.accountChroma.findMany()
    * ```
    */
  get accountChroma(): Prisma.AccountChromaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountWard`: Exposes CRUD operations for the **AccountWard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountWards
    * const accountWards = await prisma.accountWard.findMany()
    * ```
    */
  get accountWard(): Prisma.AccountWardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountEmote`: Exposes CRUD operations for the **AccountEmote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountEmotes
    * const accountEmotes = await prisma.accountEmote.findMany()
    * ```
    */
  get accountEmote(): Prisma.AccountEmoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountIcon`: Exposes CRUD operations for the **AccountIcon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountIcons
    * const accountIcons = await prisma.accountIcon.findMany()
    * ```
    */
  get accountIcon(): Prisma.AccountIconDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountLittleLegend`: Exposes CRUD operations for the **AccountLittleLegend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountLittleLegends
    * const accountLittleLegends = await prisma.accountLittleLegend.findMany()
    * ```
    */
  get accountLittleLegend(): Prisma.AccountLittleLegendDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountBoom`: Exposes CRUD operations for the **AccountBoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountBooms
    * const accountBooms = await prisma.accountBoom.findMany()
    * ```
    */
  get accountBoom(): Prisma.AccountBoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountArena`: Exposes CRUD operations for the **AccountArena** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountArenas
    * const accountArenas = await prisma.accountArena.findMany()
    * ```
    */
  get accountArena(): Prisma.AccountArenaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    TopUpTransaction: 'TopUpTransaction',
    Order: 'Order',
    Champion: 'Champion',
    Skin: 'Skin',
    Chroma: 'Chroma',
    Ward: 'Ward',
    Emote: 'Emote',
    Icon: 'Icon',
    LittleLegend: 'LittleLegend',
    Boom: 'Boom',
    Arena: 'Arena',
    AccountChampion: 'AccountChampion',
    AccountSkin: 'AccountSkin',
    AccountChroma: 'AccountChroma',
    AccountWard: 'AccountWard',
    AccountEmote: 'AccountEmote',
    AccountIcon: 'AccountIcon',
    AccountLittleLegend: 'AccountLittleLegend',
    AccountBoom: 'AccountBoom',
    AccountArena: 'AccountArena'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "account" | "topUpTransaction" | "order" | "champion" | "skin" | "chroma" | "ward" | "emote" | "icon" | "littleLegend" | "boom" | "arena" | "accountChampion" | "accountSkin" | "accountChroma" | "accountWard" | "accountEmote" | "accountIcon" | "accountLittleLegend" | "accountBoom" | "accountArena"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      TopUpTransaction: {
        payload: Prisma.$TopUpTransactionPayload<ExtArgs>
        fields: Prisma.TopUpTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TopUpTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopUpTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TopUpTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopUpTransactionPayload>
          }
          findFirst: {
            args: Prisma.TopUpTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopUpTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TopUpTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopUpTransactionPayload>
          }
          findMany: {
            args: Prisma.TopUpTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopUpTransactionPayload>[]
          }
          create: {
            args: Prisma.TopUpTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopUpTransactionPayload>
          }
          createMany: {
            args: Prisma.TopUpTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TopUpTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopUpTransactionPayload>
          }
          update: {
            args: Prisma.TopUpTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopUpTransactionPayload>
          }
          deleteMany: {
            args: Prisma.TopUpTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TopUpTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TopUpTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopUpTransactionPayload>
          }
          aggregate: {
            args: Prisma.TopUpTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTopUpTransaction>
          }
          groupBy: {
            args: Prisma.TopUpTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TopUpTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TopUpTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TopUpTransactionCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      Champion: {
        payload: Prisma.$ChampionPayload<ExtArgs>
        fields: Prisma.ChampionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChampionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChampionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChampionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChampionPayload>
          }
          findFirst: {
            args: Prisma.ChampionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChampionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChampionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChampionPayload>
          }
          findMany: {
            args: Prisma.ChampionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChampionPayload>[]
          }
          create: {
            args: Prisma.ChampionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChampionPayload>
          }
          createMany: {
            args: Prisma.ChampionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ChampionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChampionPayload>
          }
          update: {
            args: Prisma.ChampionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChampionPayload>
          }
          deleteMany: {
            args: Prisma.ChampionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChampionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChampionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChampionPayload>
          }
          aggregate: {
            args: Prisma.ChampionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChampion>
          }
          groupBy: {
            args: Prisma.ChampionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChampionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChampionCountArgs<ExtArgs>
            result: $Utils.Optional<ChampionCountAggregateOutputType> | number
          }
        }
      }
      Skin: {
        payload: Prisma.$SkinPayload<ExtArgs>
        fields: Prisma.SkinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkinFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkinFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkinPayload>
          }
          findFirst: {
            args: Prisma.SkinFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkinFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkinPayload>
          }
          findMany: {
            args: Prisma.SkinFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkinPayload>[]
          }
          create: {
            args: Prisma.SkinCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkinPayload>
          }
          createMany: {
            args: Prisma.SkinCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SkinDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkinPayload>
          }
          update: {
            args: Prisma.SkinUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkinPayload>
          }
          deleteMany: {
            args: Prisma.SkinDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkinUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SkinUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkinPayload>
          }
          aggregate: {
            args: Prisma.SkinAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkin>
          }
          groupBy: {
            args: Prisma.SkinGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkinGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkinCountArgs<ExtArgs>
            result: $Utils.Optional<SkinCountAggregateOutputType> | number
          }
        }
      }
      Chroma: {
        payload: Prisma.$ChromaPayload<ExtArgs>
        fields: Prisma.ChromaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChromaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChromaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChromaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChromaPayload>
          }
          findFirst: {
            args: Prisma.ChromaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChromaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChromaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChromaPayload>
          }
          findMany: {
            args: Prisma.ChromaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChromaPayload>[]
          }
          create: {
            args: Prisma.ChromaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChromaPayload>
          }
          createMany: {
            args: Prisma.ChromaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ChromaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChromaPayload>
          }
          update: {
            args: Prisma.ChromaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChromaPayload>
          }
          deleteMany: {
            args: Prisma.ChromaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChromaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChromaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChromaPayload>
          }
          aggregate: {
            args: Prisma.ChromaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChroma>
          }
          groupBy: {
            args: Prisma.ChromaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChromaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChromaCountArgs<ExtArgs>
            result: $Utils.Optional<ChromaCountAggregateOutputType> | number
          }
        }
      }
      Ward: {
        payload: Prisma.$WardPayload<ExtArgs>
        fields: Prisma.WardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WardPayload>
          }
          findFirst: {
            args: Prisma.WardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WardPayload>
          }
          findMany: {
            args: Prisma.WardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WardPayload>[]
          }
          create: {
            args: Prisma.WardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WardPayload>
          }
          createMany: {
            args: Prisma.WardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.WardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WardPayload>
          }
          update: {
            args: Prisma.WardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WardPayload>
          }
          deleteMany: {
            args: Prisma.WardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WardPayload>
          }
          aggregate: {
            args: Prisma.WardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWard>
          }
          groupBy: {
            args: Prisma.WardGroupByArgs<ExtArgs>
            result: $Utils.Optional<WardGroupByOutputType>[]
          }
          count: {
            args: Prisma.WardCountArgs<ExtArgs>
            result: $Utils.Optional<WardCountAggregateOutputType> | number
          }
        }
      }
      Emote: {
        payload: Prisma.$EmotePayload<ExtArgs>
        fields: Prisma.EmoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          findFirst: {
            args: Prisma.EmoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          findMany: {
            args: Prisma.EmoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>[]
          }
          create: {
            args: Prisma.EmoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          createMany: {
            args: Prisma.EmoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          update: {
            args: Prisma.EmoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          deleteMany: {
            args: Prisma.EmoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          aggregate: {
            args: Prisma.EmoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmote>
          }
          groupBy: {
            args: Prisma.EmoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmoteCountArgs<ExtArgs>
            result: $Utils.Optional<EmoteCountAggregateOutputType> | number
          }
        }
      }
      Icon: {
        payload: Prisma.$IconPayload<ExtArgs>
        fields: Prisma.IconFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IconFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IconFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconPayload>
          }
          findFirst: {
            args: Prisma.IconFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IconFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconPayload>
          }
          findMany: {
            args: Prisma.IconFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconPayload>[]
          }
          create: {
            args: Prisma.IconCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconPayload>
          }
          createMany: {
            args: Prisma.IconCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.IconDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconPayload>
          }
          update: {
            args: Prisma.IconUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconPayload>
          }
          deleteMany: {
            args: Prisma.IconDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IconUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IconUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconPayload>
          }
          aggregate: {
            args: Prisma.IconAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIcon>
          }
          groupBy: {
            args: Prisma.IconGroupByArgs<ExtArgs>
            result: $Utils.Optional<IconGroupByOutputType>[]
          }
          count: {
            args: Prisma.IconCountArgs<ExtArgs>
            result: $Utils.Optional<IconCountAggregateOutputType> | number
          }
        }
      }
      LittleLegend: {
        payload: Prisma.$LittleLegendPayload<ExtArgs>
        fields: Prisma.LittleLegendFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LittleLegendFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LittleLegendPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LittleLegendFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LittleLegendPayload>
          }
          findFirst: {
            args: Prisma.LittleLegendFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LittleLegendPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LittleLegendFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LittleLegendPayload>
          }
          findMany: {
            args: Prisma.LittleLegendFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LittleLegendPayload>[]
          }
          create: {
            args: Prisma.LittleLegendCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LittleLegendPayload>
          }
          createMany: {
            args: Prisma.LittleLegendCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LittleLegendDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LittleLegendPayload>
          }
          update: {
            args: Prisma.LittleLegendUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LittleLegendPayload>
          }
          deleteMany: {
            args: Prisma.LittleLegendDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LittleLegendUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LittleLegendUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LittleLegendPayload>
          }
          aggregate: {
            args: Prisma.LittleLegendAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLittleLegend>
          }
          groupBy: {
            args: Prisma.LittleLegendGroupByArgs<ExtArgs>
            result: $Utils.Optional<LittleLegendGroupByOutputType>[]
          }
          count: {
            args: Prisma.LittleLegendCountArgs<ExtArgs>
            result: $Utils.Optional<LittleLegendCountAggregateOutputType> | number
          }
        }
      }
      Boom: {
        payload: Prisma.$BoomPayload<ExtArgs>
        fields: Prisma.BoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoomPayload>
          }
          findFirst: {
            args: Prisma.BoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoomPayload>
          }
          findMany: {
            args: Prisma.BoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoomPayload>[]
          }
          create: {
            args: Prisma.BoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoomPayload>
          }
          createMany: {
            args: Prisma.BoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoomPayload>
          }
          update: {
            args: Prisma.BoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoomPayload>
          }
          deleteMany: {
            args: Prisma.BoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoomPayload>
          }
          aggregate: {
            args: Prisma.BoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoom>
          }
          groupBy: {
            args: Prisma.BoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<BoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoomCountArgs<ExtArgs>
            result: $Utils.Optional<BoomCountAggregateOutputType> | number
          }
        }
      }
      Arena: {
        payload: Prisma.$ArenaPayload<ExtArgs>
        fields: Prisma.ArenaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArenaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArenaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          findFirst: {
            args: Prisma.ArenaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArenaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          findMany: {
            args: Prisma.ArenaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>[]
          }
          create: {
            args: Prisma.ArenaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          createMany: {
            args: Prisma.ArenaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArenaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          update: {
            args: Prisma.ArenaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          deleteMany: {
            args: Prisma.ArenaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArenaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArenaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          aggregate: {
            args: Prisma.ArenaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArena>
          }
          groupBy: {
            args: Prisma.ArenaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArenaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArenaCountArgs<ExtArgs>
            result: $Utils.Optional<ArenaCountAggregateOutputType> | number
          }
        }
      }
      AccountChampion: {
        payload: Prisma.$AccountChampionPayload<ExtArgs>
        fields: Prisma.AccountChampionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountChampionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChampionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountChampionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChampionPayload>
          }
          findFirst: {
            args: Prisma.AccountChampionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChampionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountChampionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChampionPayload>
          }
          findMany: {
            args: Prisma.AccountChampionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChampionPayload>[]
          }
          create: {
            args: Prisma.AccountChampionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChampionPayload>
          }
          createMany: {
            args: Prisma.AccountChampionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountChampionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChampionPayload>
          }
          update: {
            args: Prisma.AccountChampionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChampionPayload>
          }
          deleteMany: {
            args: Prisma.AccountChampionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountChampionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountChampionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChampionPayload>
          }
          aggregate: {
            args: Prisma.AccountChampionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountChampion>
          }
          groupBy: {
            args: Prisma.AccountChampionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountChampionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountChampionCountArgs<ExtArgs>
            result: $Utils.Optional<AccountChampionCountAggregateOutputType> | number
          }
        }
      }
      AccountSkin: {
        payload: Prisma.$AccountSkinPayload<ExtArgs>
        fields: Prisma.AccountSkinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountSkinFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountSkinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountSkinFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountSkinPayload>
          }
          findFirst: {
            args: Prisma.AccountSkinFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountSkinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountSkinFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountSkinPayload>
          }
          findMany: {
            args: Prisma.AccountSkinFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountSkinPayload>[]
          }
          create: {
            args: Prisma.AccountSkinCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountSkinPayload>
          }
          createMany: {
            args: Prisma.AccountSkinCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountSkinDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountSkinPayload>
          }
          update: {
            args: Prisma.AccountSkinUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountSkinPayload>
          }
          deleteMany: {
            args: Prisma.AccountSkinDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountSkinUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountSkinUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountSkinPayload>
          }
          aggregate: {
            args: Prisma.AccountSkinAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountSkin>
          }
          groupBy: {
            args: Prisma.AccountSkinGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountSkinGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountSkinCountArgs<ExtArgs>
            result: $Utils.Optional<AccountSkinCountAggregateOutputType> | number
          }
        }
      }
      AccountChroma: {
        payload: Prisma.$AccountChromaPayload<ExtArgs>
        fields: Prisma.AccountChromaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountChromaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChromaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountChromaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChromaPayload>
          }
          findFirst: {
            args: Prisma.AccountChromaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChromaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountChromaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChromaPayload>
          }
          findMany: {
            args: Prisma.AccountChromaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChromaPayload>[]
          }
          create: {
            args: Prisma.AccountChromaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChromaPayload>
          }
          createMany: {
            args: Prisma.AccountChromaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountChromaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChromaPayload>
          }
          update: {
            args: Prisma.AccountChromaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChromaPayload>
          }
          deleteMany: {
            args: Prisma.AccountChromaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountChromaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountChromaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountChromaPayload>
          }
          aggregate: {
            args: Prisma.AccountChromaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountChroma>
          }
          groupBy: {
            args: Prisma.AccountChromaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountChromaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountChromaCountArgs<ExtArgs>
            result: $Utils.Optional<AccountChromaCountAggregateOutputType> | number
          }
        }
      }
      AccountWard: {
        payload: Prisma.$AccountWardPayload<ExtArgs>
        fields: Prisma.AccountWardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountWardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountWardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountWardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountWardPayload>
          }
          findFirst: {
            args: Prisma.AccountWardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountWardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountWardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountWardPayload>
          }
          findMany: {
            args: Prisma.AccountWardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountWardPayload>[]
          }
          create: {
            args: Prisma.AccountWardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountWardPayload>
          }
          createMany: {
            args: Prisma.AccountWardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountWardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountWardPayload>
          }
          update: {
            args: Prisma.AccountWardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountWardPayload>
          }
          deleteMany: {
            args: Prisma.AccountWardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountWardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountWardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountWardPayload>
          }
          aggregate: {
            args: Prisma.AccountWardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountWard>
          }
          groupBy: {
            args: Prisma.AccountWardGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountWardGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountWardCountArgs<ExtArgs>
            result: $Utils.Optional<AccountWardCountAggregateOutputType> | number
          }
        }
      }
      AccountEmote: {
        payload: Prisma.$AccountEmotePayload<ExtArgs>
        fields: Prisma.AccountEmoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountEmoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountEmotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountEmoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountEmotePayload>
          }
          findFirst: {
            args: Prisma.AccountEmoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountEmotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountEmoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountEmotePayload>
          }
          findMany: {
            args: Prisma.AccountEmoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountEmotePayload>[]
          }
          create: {
            args: Prisma.AccountEmoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountEmotePayload>
          }
          createMany: {
            args: Prisma.AccountEmoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountEmoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountEmotePayload>
          }
          update: {
            args: Prisma.AccountEmoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountEmotePayload>
          }
          deleteMany: {
            args: Prisma.AccountEmoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountEmoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountEmoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountEmotePayload>
          }
          aggregate: {
            args: Prisma.AccountEmoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountEmote>
          }
          groupBy: {
            args: Prisma.AccountEmoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountEmoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountEmoteCountArgs<ExtArgs>
            result: $Utils.Optional<AccountEmoteCountAggregateOutputType> | number
          }
        }
      }
      AccountIcon: {
        payload: Prisma.$AccountIconPayload<ExtArgs>
        fields: Prisma.AccountIconFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountIconFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountIconPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountIconFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountIconPayload>
          }
          findFirst: {
            args: Prisma.AccountIconFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountIconPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountIconFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountIconPayload>
          }
          findMany: {
            args: Prisma.AccountIconFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountIconPayload>[]
          }
          create: {
            args: Prisma.AccountIconCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountIconPayload>
          }
          createMany: {
            args: Prisma.AccountIconCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountIconDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountIconPayload>
          }
          update: {
            args: Prisma.AccountIconUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountIconPayload>
          }
          deleteMany: {
            args: Prisma.AccountIconDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountIconUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountIconUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountIconPayload>
          }
          aggregate: {
            args: Prisma.AccountIconAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountIcon>
          }
          groupBy: {
            args: Prisma.AccountIconGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountIconGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountIconCountArgs<ExtArgs>
            result: $Utils.Optional<AccountIconCountAggregateOutputType> | number
          }
        }
      }
      AccountLittleLegend: {
        payload: Prisma.$AccountLittleLegendPayload<ExtArgs>
        fields: Prisma.AccountLittleLegendFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountLittleLegendFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLittleLegendPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountLittleLegendFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLittleLegendPayload>
          }
          findFirst: {
            args: Prisma.AccountLittleLegendFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLittleLegendPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountLittleLegendFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLittleLegendPayload>
          }
          findMany: {
            args: Prisma.AccountLittleLegendFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLittleLegendPayload>[]
          }
          create: {
            args: Prisma.AccountLittleLegendCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLittleLegendPayload>
          }
          createMany: {
            args: Prisma.AccountLittleLegendCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountLittleLegendDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLittleLegendPayload>
          }
          update: {
            args: Prisma.AccountLittleLegendUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLittleLegendPayload>
          }
          deleteMany: {
            args: Prisma.AccountLittleLegendDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountLittleLegendUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountLittleLegendUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountLittleLegendPayload>
          }
          aggregate: {
            args: Prisma.AccountLittleLegendAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountLittleLegend>
          }
          groupBy: {
            args: Prisma.AccountLittleLegendGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountLittleLegendGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountLittleLegendCountArgs<ExtArgs>
            result: $Utils.Optional<AccountLittleLegendCountAggregateOutputType> | number
          }
        }
      }
      AccountBoom: {
        payload: Prisma.$AccountBoomPayload<ExtArgs>
        fields: Prisma.AccountBoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountBoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountBoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBoomPayload>
          }
          findFirst: {
            args: Prisma.AccountBoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountBoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBoomPayload>
          }
          findMany: {
            args: Prisma.AccountBoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBoomPayload>[]
          }
          create: {
            args: Prisma.AccountBoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBoomPayload>
          }
          createMany: {
            args: Prisma.AccountBoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountBoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBoomPayload>
          }
          update: {
            args: Prisma.AccountBoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBoomPayload>
          }
          deleteMany: {
            args: Prisma.AccountBoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountBoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountBoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountBoomPayload>
          }
          aggregate: {
            args: Prisma.AccountBoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountBoom>
          }
          groupBy: {
            args: Prisma.AccountBoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountBoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountBoomCountArgs<ExtArgs>
            result: $Utils.Optional<AccountBoomCountAggregateOutputType> | number
          }
        }
      }
      AccountArena: {
        payload: Prisma.$AccountArenaPayload<ExtArgs>
        fields: Prisma.AccountArenaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountArenaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountArenaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountArenaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountArenaPayload>
          }
          findFirst: {
            args: Prisma.AccountArenaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountArenaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountArenaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountArenaPayload>
          }
          findMany: {
            args: Prisma.AccountArenaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountArenaPayload>[]
          }
          create: {
            args: Prisma.AccountArenaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountArenaPayload>
          }
          createMany: {
            args: Prisma.AccountArenaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountArenaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountArenaPayload>
          }
          update: {
            args: Prisma.AccountArenaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountArenaPayload>
          }
          deleteMany: {
            args: Prisma.AccountArenaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountArenaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountArenaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountArenaPayload>
          }
          aggregate: {
            args: Prisma.AccountArenaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountArena>
          }
          groupBy: {
            args: Prisma.AccountArenaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountArenaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountArenaCountArgs<ExtArgs>
            result: $Utils.Optional<AccountArenaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    topUpTransaction?: TopUpTransactionOmit
    order?: OrderOmit
    champion?: ChampionOmit
    skin?: SkinOmit
    chroma?: ChromaOmit
    ward?: WardOmit
    emote?: EmoteOmit
    icon?: IconOmit
    littleLegend?: LittleLegendOmit
    boom?: BoomOmit
    arena?: ArenaOmit
    accountChampion?: AccountChampionOmit
    accountSkin?: AccountSkinOmit
    accountChroma?: AccountChromaOmit
    accountWard?: AccountWardOmit
    accountEmote?: AccountEmoteOmit
    accountIcon?: AccountIconOmit
    accountLittleLegend?: AccountLittleLegendOmit
    accountBoom?: AccountBoomOmit
    accountArena?: AccountArenaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    topUpTransactions: number
    orders: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    topUpTransactions?: boolean | UserCountOutputTypeCountTopUpTransactionsArgs
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTopUpTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopUpTransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    ownedChampions: number
    ownedSkins: number
    ownedChromas: number
    ownedWards: number
    ownedEmotes: number
    ownedIcons: number
    ownedLittleLegends: number
    ownedBooms: number
    ownedArenas: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedChampions?: boolean | AccountCountOutputTypeCountOwnedChampionsArgs
    ownedSkins?: boolean | AccountCountOutputTypeCountOwnedSkinsArgs
    ownedChromas?: boolean | AccountCountOutputTypeCountOwnedChromasArgs
    ownedWards?: boolean | AccountCountOutputTypeCountOwnedWardsArgs
    ownedEmotes?: boolean | AccountCountOutputTypeCountOwnedEmotesArgs
    ownedIcons?: boolean | AccountCountOutputTypeCountOwnedIconsArgs
    ownedLittleLegends?: boolean | AccountCountOutputTypeCountOwnedLittleLegendsArgs
    ownedBooms?: boolean | AccountCountOutputTypeCountOwnedBoomsArgs
    ownedArenas?: boolean | AccountCountOutputTypeCountOwnedArenasArgs
  }

  // Custom InputTypes
  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountOwnedChampionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountChampionWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountOwnedSkinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountSkinWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountOwnedChromasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountChromaWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountOwnedWardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWardWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountOwnedEmotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountEmoteWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountOwnedIconsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountIconWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountOwnedLittleLegendsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountLittleLegendWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountOwnedBoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountBoomWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountOwnedArenasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountArenaWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    accounts: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | OrderCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }


  /**
   * Count Type ChampionCountOutputType
   */

  export type ChampionCountOutputType = {
    skins: number
    accounts: number
  }

  export type ChampionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skins?: boolean | ChampionCountOutputTypeCountSkinsArgs
    accounts?: boolean | ChampionCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * ChampionCountOutputType without action
   */
  export type ChampionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChampionCountOutputType
     */
    select?: ChampionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChampionCountOutputType without action
   */
  export type ChampionCountOutputTypeCountSkinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkinWhereInput
  }

  /**
   * ChampionCountOutputType without action
   */
  export type ChampionCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountChampionWhereInput
  }


  /**
   * Count Type SkinCountOutputType
   */

  export type SkinCountOutputType = {
    chromas: number
    accounts: number
  }

  export type SkinCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chromas?: boolean | SkinCountOutputTypeCountChromasArgs
    accounts?: boolean | SkinCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * SkinCountOutputType without action
   */
  export type SkinCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkinCountOutputType
     */
    select?: SkinCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkinCountOutputType without action
   */
  export type SkinCountOutputTypeCountChromasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChromaWhereInput
  }

  /**
   * SkinCountOutputType without action
   */
  export type SkinCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountSkinWhereInput
  }


  /**
   * Count Type ChromaCountOutputType
   */

  export type ChromaCountOutputType = {
    accounts: number
  }

  export type ChromaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | ChromaCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * ChromaCountOutputType without action
   */
  export type ChromaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChromaCountOutputType
     */
    select?: ChromaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChromaCountOutputType without action
   */
  export type ChromaCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountChromaWhereInput
  }


  /**
   * Count Type WardCountOutputType
   */

  export type WardCountOutputType = {
    accounts: number
  }

  export type WardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | WardCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * WardCountOutputType without action
   */
  export type WardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WardCountOutputType
     */
    select?: WardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WardCountOutputType without action
   */
  export type WardCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWardWhereInput
  }


  /**
   * Count Type EmoteCountOutputType
   */

  export type EmoteCountOutputType = {
    accounts: number
  }

  export type EmoteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | EmoteCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * EmoteCountOutputType without action
   */
  export type EmoteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmoteCountOutputType
     */
    select?: EmoteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmoteCountOutputType without action
   */
  export type EmoteCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountEmoteWhereInput
  }


  /**
   * Count Type IconCountOutputType
   */

  export type IconCountOutputType = {
    accounts: number
  }

  export type IconCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | IconCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * IconCountOutputType without action
   */
  export type IconCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCountOutputType
     */
    select?: IconCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IconCountOutputType without action
   */
  export type IconCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountIconWhereInput
  }


  /**
   * Count Type LittleLegendCountOutputType
   */

  export type LittleLegendCountOutputType = {
    accounts: number
  }

  export type LittleLegendCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | LittleLegendCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * LittleLegendCountOutputType without action
   */
  export type LittleLegendCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegendCountOutputType
     */
    select?: LittleLegendCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LittleLegendCountOutputType without action
   */
  export type LittleLegendCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountLittleLegendWhereInput
  }


  /**
   * Count Type BoomCountOutputType
   */

  export type BoomCountOutputType = {
    accounts: number
  }

  export type BoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | BoomCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * BoomCountOutputType without action
   */
  export type BoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoomCountOutputType
     */
    select?: BoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BoomCountOutputType without action
   */
  export type BoomCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountBoomWhereInput
  }


  /**
   * Count Type ArenaCountOutputType
   */

  export type ArenaCountOutputType = {
    accounts: number
  }

  export type ArenaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | ArenaCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * ArenaCountOutputType without action
   */
  export type ArenaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArenaCountOutputType
     */
    select?: ArenaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArenaCountOutputType without action
   */
  export type ArenaCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountArenaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    balance: Decimal | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    balance: Decimal | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    phone: string | null
    isAdmin: boolean | null
    balance: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    phone: string | null
    isAdmin: boolean | null
    balance: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    phone: number
    isAdmin: number
    balance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    balance?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    balance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phone?: true
    isAdmin?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phone?: true
    isAdmin?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phone?: true
    isAdmin?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string | null
    phone: string | null
    isAdmin: boolean
    balance: Decimal
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    isAdmin?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    topUpTransactions?: boolean | User$topUpTransactionsArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    isAdmin?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "phone" | "isAdmin" | "balance" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    topUpTransactions?: boolean | User$topUpTransactionsArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      topUpTransactions: Prisma.$TopUpTransactionPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string | null
      phone: string | null
      isAdmin: boolean
      balance: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    topUpTransactions<T extends User$topUpTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$topUpTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopUpTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly balance: FieldRef<"User", 'Decimal'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.topUpTransactions
   */
  export type User$topUpTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
    where?: TopUpTransactionWhereInput
    orderBy?: TopUpTransactionOrderByWithRelationInput | TopUpTransactionOrderByWithRelationInput[]
    cursor?: TopUpTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TopUpTransactionScalarFieldEnum | TopUpTransactionScalarFieldEnum[]
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number | null
    level: number | null
    blueEssence: number | null
    riotPoints: number | null
    championCount: number | null
    skinCount: number | null
    chromaCount: number | null
    wardCount: number | null
    emoteCount: number | null
    iconCount: number | null
    littleLegendCount: number | null
    boomCount: number | null
    arenaCount: number | null
    price: Decimal | null
    buyerId: number | null
    orderId: number | null
  }

  export type AccountSumAggregateOutputType = {
    id: number | null
    level: number | null
    blueEssence: number | null
    riotPoints: number | null
    championCount: number | null
    skinCount: number | null
    chromaCount: number | null
    wardCount: number | null
    emoteCount: number | null
    iconCount: number | null
    littleLegendCount: number | null
    boomCount: number | null
    arenaCount: number | null
    price: Decimal | null
    buyerId: number | null
    orderId: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    soloRank: $Enums.Rank | null
    flexRank: $Enums.Rank | null
    tftRank: $Enums.Rank | null
    level: number | null
    blueEssence: number | null
    riotPoints: number | null
    verifiedEmail: boolean | null
    championCount: number | null
    skinCount: number | null
    chromaCount: number | null
    wardCount: number | null
    emoteCount: number | null
    iconCount: number | null
    littleLegendCount: number | null
    boomCount: number | null
    arenaCount: number | null
    price: Decimal | null
    status: $Enums.AccountStatus | null
    buyerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    orderId: number | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    soloRank: $Enums.Rank | null
    flexRank: $Enums.Rank | null
    tftRank: $Enums.Rank | null
    level: number | null
    blueEssence: number | null
    riotPoints: number | null
    verifiedEmail: boolean | null
    championCount: number | null
    skinCount: number | null
    chromaCount: number | null
    wardCount: number | null
    emoteCount: number | null
    iconCount: number | null
    littleLegendCount: number | null
    boomCount: number | null
    arenaCount: number | null
    price: Decimal | null
    status: $Enums.AccountStatus | null
    buyerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    orderId: number | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    username: number
    password: number
    soloRank: number
    flexRank: number
    tftRank: number
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail: number
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: number
    status: number
    buyerId: number
    createdAt: number
    updatedAt: number
    orderId: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
    level?: true
    blueEssence?: true
    riotPoints?: true
    championCount?: true
    skinCount?: true
    chromaCount?: true
    wardCount?: true
    emoteCount?: true
    iconCount?: true
    littleLegendCount?: true
    boomCount?: true
    arenaCount?: true
    price?: true
    buyerId?: true
    orderId?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
    level?: true
    blueEssence?: true
    riotPoints?: true
    championCount?: true
    skinCount?: true
    chromaCount?: true
    wardCount?: true
    emoteCount?: true
    iconCount?: true
    littleLegendCount?: true
    boomCount?: true
    arenaCount?: true
    price?: true
    buyerId?: true
    orderId?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    soloRank?: true
    flexRank?: true
    tftRank?: true
    level?: true
    blueEssence?: true
    riotPoints?: true
    verifiedEmail?: true
    championCount?: true
    skinCount?: true
    chromaCount?: true
    wardCount?: true
    emoteCount?: true
    iconCount?: true
    littleLegendCount?: true
    boomCount?: true
    arenaCount?: true
    price?: true
    status?: true
    buyerId?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    soloRank?: true
    flexRank?: true
    tftRank?: true
    level?: true
    blueEssence?: true
    riotPoints?: true
    verifiedEmail?: true
    championCount?: true
    skinCount?: true
    chromaCount?: true
    wardCount?: true
    emoteCount?: true
    iconCount?: true
    littleLegendCount?: true
    boomCount?: true
    arenaCount?: true
    price?: true
    status?: true
    buyerId?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    soloRank?: true
    flexRank?: true
    tftRank?: true
    level?: true
    blueEssence?: true
    riotPoints?: true
    verifiedEmail?: true
    championCount?: true
    skinCount?: true
    chromaCount?: true
    wardCount?: true
    emoteCount?: true
    iconCount?: true
    littleLegendCount?: true
    boomCount?: true
    arenaCount?: true
    price?: true
    status?: true
    buyerId?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal
    status: $Enums.AccountStatus
    buyerId: number | null
    createdAt: Date
    updatedAt: Date
    orderId: number | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    soloRank?: boolean
    flexRank?: boolean
    tftRank?: boolean
    level?: boolean
    blueEssence?: boolean
    riotPoints?: boolean
    verifiedEmail?: boolean
    championCount?: boolean
    skinCount?: boolean
    chromaCount?: boolean
    wardCount?: boolean
    emoteCount?: boolean
    iconCount?: boolean
    littleLegendCount?: boolean
    boomCount?: boolean
    arenaCount?: boolean
    price?: boolean
    status?: boolean
    buyerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    buyer?: boolean | Account$buyerArgs<ExtArgs>
    order?: boolean | Account$orderArgs<ExtArgs>
    ownedChampions?: boolean | Account$ownedChampionsArgs<ExtArgs>
    ownedSkins?: boolean | Account$ownedSkinsArgs<ExtArgs>
    ownedChromas?: boolean | Account$ownedChromasArgs<ExtArgs>
    ownedWards?: boolean | Account$ownedWardsArgs<ExtArgs>
    ownedEmotes?: boolean | Account$ownedEmotesArgs<ExtArgs>
    ownedIcons?: boolean | Account$ownedIconsArgs<ExtArgs>
    ownedLittleLegends?: boolean | Account$ownedLittleLegendsArgs<ExtArgs>
    ownedBooms?: boolean | Account$ownedBoomsArgs<ExtArgs>
    ownedArenas?: boolean | Account$ownedArenasArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>



  export type AccountSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    soloRank?: boolean
    flexRank?: boolean
    tftRank?: boolean
    level?: boolean
    blueEssence?: boolean
    riotPoints?: boolean
    verifiedEmail?: boolean
    championCount?: boolean
    skinCount?: boolean
    chromaCount?: boolean
    wardCount?: boolean
    emoteCount?: boolean
    iconCount?: boolean
    littleLegendCount?: boolean
    boomCount?: boolean
    arenaCount?: boolean
    price?: boolean
    status?: boolean
    buyerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "soloRank" | "flexRank" | "tftRank" | "level" | "blueEssence" | "riotPoints" | "verifiedEmail" | "championCount" | "skinCount" | "chromaCount" | "wardCount" | "emoteCount" | "iconCount" | "littleLegendCount" | "boomCount" | "arenaCount" | "price" | "status" | "buyerId" | "createdAt" | "updatedAt" | "orderId", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | Account$buyerArgs<ExtArgs>
    order?: boolean | Account$orderArgs<ExtArgs>
    ownedChampions?: boolean | Account$ownedChampionsArgs<ExtArgs>
    ownedSkins?: boolean | Account$ownedSkinsArgs<ExtArgs>
    ownedChromas?: boolean | Account$ownedChromasArgs<ExtArgs>
    ownedWards?: boolean | Account$ownedWardsArgs<ExtArgs>
    ownedEmotes?: boolean | Account$ownedEmotesArgs<ExtArgs>
    ownedIcons?: boolean | Account$ownedIconsArgs<ExtArgs>
    ownedLittleLegends?: boolean | Account$ownedLittleLegendsArgs<ExtArgs>
    ownedBooms?: boolean | Account$ownedBoomsArgs<ExtArgs>
    ownedArenas?: boolean | Account$ownedArenasArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      buyer: Prisma.$UserPayload<ExtArgs> | null
      order: Prisma.$OrderPayload<ExtArgs> | null
      ownedChampions: Prisma.$AccountChampionPayload<ExtArgs>[]
      ownedSkins: Prisma.$AccountSkinPayload<ExtArgs>[]
      ownedChromas: Prisma.$AccountChromaPayload<ExtArgs>[]
      ownedWards: Prisma.$AccountWardPayload<ExtArgs>[]
      ownedEmotes: Prisma.$AccountEmotePayload<ExtArgs>[]
      ownedIcons: Prisma.$AccountIconPayload<ExtArgs>[]
      ownedLittleLegends: Prisma.$AccountLittleLegendPayload<ExtArgs>[]
      ownedBooms: Prisma.$AccountBoomPayload<ExtArgs>[]
      ownedArenas: Prisma.$AccountArenaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      soloRank: $Enums.Rank
      flexRank: $Enums.Rank
      tftRank: $Enums.Rank
      level: number
      blueEssence: number
      riotPoints: number
      verifiedEmail: boolean
      championCount: number
      skinCount: number
      chromaCount: number
      wardCount: number
      emoteCount: number
      iconCount: number
      littleLegendCount: number
      boomCount: number
      arenaCount: number
      price: Prisma.Decimal
      status: $Enums.AccountStatus
      buyerId: number | null
      createdAt: Date
      updatedAt: Date
      orderId: number | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buyer<T extends Account$buyerArgs<ExtArgs> = {}>(args?: Subset<T, Account$buyerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    order<T extends Account$orderArgs<ExtArgs> = {}>(args?: Subset<T, Account$orderArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ownedChampions<T extends Account$ownedChampionsArgs<ExtArgs> = {}>(args?: Subset<T, Account$ownedChampionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedSkins<T extends Account$ownedSkinsArgs<ExtArgs> = {}>(args?: Subset<T, Account$ownedSkinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedChromas<T extends Account$ownedChromasArgs<ExtArgs> = {}>(args?: Subset<T, Account$ownedChromasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedWards<T extends Account$ownedWardsArgs<ExtArgs> = {}>(args?: Subset<T, Account$ownedWardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedEmotes<T extends Account$ownedEmotesArgs<ExtArgs> = {}>(args?: Subset<T, Account$ownedEmotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedIcons<T extends Account$ownedIconsArgs<ExtArgs> = {}>(args?: Subset<T, Account$ownedIconsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedLittleLegends<T extends Account$ownedLittleLegendsArgs<ExtArgs> = {}>(args?: Subset<T, Account$ownedLittleLegendsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedBooms<T extends Account$ownedBoomsArgs<ExtArgs> = {}>(args?: Subset<T, Account$ownedBoomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedArenas<T extends Account$ownedArenasArgs<ExtArgs> = {}>(args?: Subset<T, Account$ownedArenasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'Int'>
    readonly username: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly soloRank: FieldRef<"Account", 'Rank'>
    readonly flexRank: FieldRef<"Account", 'Rank'>
    readonly tftRank: FieldRef<"Account", 'Rank'>
    readonly level: FieldRef<"Account", 'Int'>
    readonly blueEssence: FieldRef<"Account", 'Int'>
    readonly riotPoints: FieldRef<"Account", 'Int'>
    readonly verifiedEmail: FieldRef<"Account", 'Boolean'>
    readonly championCount: FieldRef<"Account", 'Int'>
    readonly skinCount: FieldRef<"Account", 'Int'>
    readonly chromaCount: FieldRef<"Account", 'Int'>
    readonly wardCount: FieldRef<"Account", 'Int'>
    readonly emoteCount: FieldRef<"Account", 'Int'>
    readonly iconCount: FieldRef<"Account", 'Int'>
    readonly littleLegendCount: FieldRef<"Account", 'Int'>
    readonly boomCount: FieldRef<"Account", 'Int'>
    readonly arenaCount: FieldRef<"Account", 'Int'>
    readonly price: FieldRef<"Account", 'Decimal'>
    readonly status: FieldRef<"Account", 'AccountStatus'>
    readonly buyerId: FieldRef<"Account", 'Int'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
    readonly orderId: FieldRef<"Account", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account.buyer
   */
  export type Account$buyerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Account.order
   */
  export type Account$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
  }

  /**
   * Account.ownedChampions
   */
  export type Account$ownedChampionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    where?: AccountChampionWhereInput
    orderBy?: AccountChampionOrderByWithRelationInput | AccountChampionOrderByWithRelationInput[]
    cursor?: AccountChampionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountChampionScalarFieldEnum | AccountChampionScalarFieldEnum[]
  }

  /**
   * Account.ownedSkins
   */
  export type Account$ownedSkinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    where?: AccountSkinWhereInput
    orderBy?: AccountSkinOrderByWithRelationInput | AccountSkinOrderByWithRelationInput[]
    cursor?: AccountSkinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountSkinScalarFieldEnum | AccountSkinScalarFieldEnum[]
  }

  /**
   * Account.ownedChromas
   */
  export type Account$ownedChromasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    where?: AccountChromaWhereInput
    orderBy?: AccountChromaOrderByWithRelationInput | AccountChromaOrderByWithRelationInput[]
    cursor?: AccountChromaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountChromaScalarFieldEnum | AccountChromaScalarFieldEnum[]
  }

  /**
   * Account.ownedWards
   */
  export type Account$ownedWardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    where?: AccountWardWhereInput
    orderBy?: AccountWardOrderByWithRelationInput | AccountWardOrderByWithRelationInput[]
    cursor?: AccountWardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountWardScalarFieldEnum | AccountWardScalarFieldEnum[]
  }

  /**
   * Account.ownedEmotes
   */
  export type Account$ownedEmotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    where?: AccountEmoteWhereInput
    orderBy?: AccountEmoteOrderByWithRelationInput | AccountEmoteOrderByWithRelationInput[]
    cursor?: AccountEmoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountEmoteScalarFieldEnum | AccountEmoteScalarFieldEnum[]
  }

  /**
   * Account.ownedIcons
   */
  export type Account$ownedIconsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    where?: AccountIconWhereInput
    orderBy?: AccountIconOrderByWithRelationInput | AccountIconOrderByWithRelationInput[]
    cursor?: AccountIconWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountIconScalarFieldEnum | AccountIconScalarFieldEnum[]
  }

  /**
   * Account.ownedLittleLegends
   */
  export type Account$ownedLittleLegendsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    where?: AccountLittleLegendWhereInput
    orderBy?: AccountLittleLegendOrderByWithRelationInput | AccountLittleLegendOrderByWithRelationInput[]
    cursor?: AccountLittleLegendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountLittleLegendScalarFieldEnum | AccountLittleLegendScalarFieldEnum[]
  }

  /**
   * Account.ownedBooms
   */
  export type Account$ownedBoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    where?: AccountBoomWhereInput
    orderBy?: AccountBoomOrderByWithRelationInput | AccountBoomOrderByWithRelationInput[]
    cursor?: AccountBoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountBoomScalarFieldEnum | AccountBoomScalarFieldEnum[]
  }

  /**
   * Account.ownedArenas
   */
  export type Account$ownedArenasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    where?: AccountArenaWhereInput
    orderBy?: AccountArenaOrderByWithRelationInput | AccountArenaOrderByWithRelationInput[]
    cursor?: AccountArenaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountArenaScalarFieldEnum | AccountArenaScalarFieldEnum[]
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model TopUpTransaction
   */

  export type AggregateTopUpTransaction = {
    _count: TopUpTransactionCountAggregateOutputType | null
    _avg: TopUpTransactionAvgAggregateOutputType | null
    _sum: TopUpTransactionSumAggregateOutputType | null
    _min: TopUpTransactionMinAggregateOutputType | null
    _max: TopUpTransactionMaxAggregateOutputType | null
  }

  export type TopUpTransactionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: Decimal | null
  }

  export type TopUpTransactionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: Decimal | null
  }

  export type TopUpTransactionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: Decimal | null
    bank: string | null
    transactionCode: string | null
    status: $Enums.TopUpStatus | null
    createdAt: Date | null
  }

  export type TopUpTransactionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: Decimal | null
    bank: string | null
    transactionCode: string | null
    status: $Enums.TopUpStatus | null
    createdAt: Date | null
  }

  export type TopUpTransactionCountAggregateOutputType = {
    id: number
    userId: number
    amount: number
    bank: number
    transactionCode: number
    status: number
    createdAt: number
    _all: number
  }


  export type TopUpTransactionAvgAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
  }

  export type TopUpTransactionSumAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
  }

  export type TopUpTransactionMinAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    bank?: true
    transactionCode?: true
    status?: true
    createdAt?: true
  }

  export type TopUpTransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    bank?: true
    transactionCode?: true
    status?: true
    createdAt?: true
  }

  export type TopUpTransactionCountAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    bank?: true
    transactionCode?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type TopUpTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TopUpTransaction to aggregate.
     */
    where?: TopUpTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopUpTransactions to fetch.
     */
    orderBy?: TopUpTransactionOrderByWithRelationInput | TopUpTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TopUpTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopUpTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopUpTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TopUpTransactions
    **/
    _count?: true | TopUpTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TopUpTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TopUpTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopUpTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopUpTransactionMaxAggregateInputType
  }

  export type GetTopUpTransactionAggregateType<T extends TopUpTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTopUpTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopUpTransaction[P]>
      : GetScalarType<T[P], AggregateTopUpTransaction[P]>
  }




  export type TopUpTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopUpTransactionWhereInput
    orderBy?: TopUpTransactionOrderByWithAggregationInput | TopUpTransactionOrderByWithAggregationInput[]
    by: TopUpTransactionScalarFieldEnum[] | TopUpTransactionScalarFieldEnum
    having?: TopUpTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopUpTransactionCountAggregateInputType | true
    _avg?: TopUpTransactionAvgAggregateInputType
    _sum?: TopUpTransactionSumAggregateInputType
    _min?: TopUpTransactionMinAggregateInputType
    _max?: TopUpTransactionMaxAggregateInputType
  }

  export type TopUpTransactionGroupByOutputType = {
    id: number
    userId: number
    amount: Decimal
    bank: string
    transactionCode: string
    status: $Enums.TopUpStatus
    createdAt: Date
    _count: TopUpTransactionCountAggregateOutputType | null
    _avg: TopUpTransactionAvgAggregateOutputType | null
    _sum: TopUpTransactionSumAggregateOutputType | null
    _min: TopUpTransactionMinAggregateOutputType | null
    _max: TopUpTransactionMaxAggregateOutputType | null
  }

  type GetTopUpTransactionGroupByPayload<T extends TopUpTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TopUpTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopUpTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopUpTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TopUpTransactionGroupByOutputType[P]>
        }
      >
    >


  export type TopUpTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    bank?: boolean
    transactionCode?: boolean
    status?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topUpTransaction"]>



  export type TopUpTransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    amount?: boolean
    bank?: boolean
    transactionCode?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type TopUpTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "amount" | "bank" | "transactionCode" | "status" | "createdAt", ExtArgs["result"]["topUpTransaction"]>
  export type TopUpTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TopUpTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TopUpTransaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      amount: Prisma.Decimal
      bank: string
      transactionCode: string
      status: $Enums.TopUpStatus
      createdAt: Date
    }, ExtArgs["result"]["topUpTransaction"]>
    composites: {}
  }

  type TopUpTransactionGetPayload<S extends boolean | null | undefined | TopUpTransactionDefaultArgs> = $Result.GetResult<Prisma.$TopUpTransactionPayload, S>

  type TopUpTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TopUpTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TopUpTransactionCountAggregateInputType | true
    }

  export interface TopUpTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TopUpTransaction'], meta: { name: 'TopUpTransaction' } }
    /**
     * Find zero or one TopUpTransaction that matches the filter.
     * @param {TopUpTransactionFindUniqueArgs} args - Arguments to find a TopUpTransaction
     * @example
     * // Get one TopUpTransaction
     * const topUpTransaction = await prisma.topUpTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TopUpTransactionFindUniqueArgs>(args: SelectSubset<T, TopUpTransactionFindUniqueArgs<ExtArgs>>): Prisma__TopUpTransactionClient<$Result.GetResult<Prisma.$TopUpTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TopUpTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TopUpTransactionFindUniqueOrThrowArgs} args - Arguments to find a TopUpTransaction
     * @example
     * // Get one TopUpTransaction
     * const topUpTransaction = await prisma.topUpTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TopUpTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TopUpTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TopUpTransactionClient<$Result.GetResult<Prisma.$TopUpTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TopUpTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpTransactionFindFirstArgs} args - Arguments to find a TopUpTransaction
     * @example
     * // Get one TopUpTransaction
     * const topUpTransaction = await prisma.topUpTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TopUpTransactionFindFirstArgs>(args?: SelectSubset<T, TopUpTransactionFindFirstArgs<ExtArgs>>): Prisma__TopUpTransactionClient<$Result.GetResult<Prisma.$TopUpTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TopUpTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpTransactionFindFirstOrThrowArgs} args - Arguments to find a TopUpTransaction
     * @example
     * // Get one TopUpTransaction
     * const topUpTransaction = await prisma.topUpTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TopUpTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TopUpTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TopUpTransactionClient<$Result.GetResult<Prisma.$TopUpTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TopUpTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TopUpTransactions
     * const topUpTransactions = await prisma.topUpTransaction.findMany()
     * 
     * // Get first 10 TopUpTransactions
     * const topUpTransactions = await prisma.topUpTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const topUpTransactionWithIdOnly = await prisma.topUpTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TopUpTransactionFindManyArgs>(args?: SelectSubset<T, TopUpTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopUpTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TopUpTransaction.
     * @param {TopUpTransactionCreateArgs} args - Arguments to create a TopUpTransaction.
     * @example
     * // Create one TopUpTransaction
     * const TopUpTransaction = await prisma.topUpTransaction.create({
     *   data: {
     *     // ... data to create a TopUpTransaction
     *   }
     * })
     * 
     */
    create<T extends TopUpTransactionCreateArgs>(args: SelectSubset<T, TopUpTransactionCreateArgs<ExtArgs>>): Prisma__TopUpTransactionClient<$Result.GetResult<Prisma.$TopUpTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TopUpTransactions.
     * @param {TopUpTransactionCreateManyArgs} args - Arguments to create many TopUpTransactions.
     * @example
     * // Create many TopUpTransactions
     * const topUpTransaction = await prisma.topUpTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TopUpTransactionCreateManyArgs>(args?: SelectSubset<T, TopUpTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TopUpTransaction.
     * @param {TopUpTransactionDeleteArgs} args - Arguments to delete one TopUpTransaction.
     * @example
     * // Delete one TopUpTransaction
     * const TopUpTransaction = await prisma.topUpTransaction.delete({
     *   where: {
     *     // ... filter to delete one TopUpTransaction
     *   }
     * })
     * 
     */
    delete<T extends TopUpTransactionDeleteArgs>(args: SelectSubset<T, TopUpTransactionDeleteArgs<ExtArgs>>): Prisma__TopUpTransactionClient<$Result.GetResult<Prisma.$TopUpTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TopUpTransaction.
     * @param {TopUpTransactionUpdateArgs} args - Arguments to update one TopUpTransaction.
     * @example
     * // Update one TopUpTransaction
     * const topUpTransaction = await prisma.topUpTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TopUpTransactionUpdateArgs>(args: SelectSubset<T, TopUpTransactionUpdateArgs<ExtArgs>>): Prisma__TopUpTransactionClient<$Result.GetResult<Prisma.$TopUpTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TopUpTransactions.
     * @param {TopUpTransactionDeleteManyArgs} args - Arguments to filter TopUpTransactions to delete.
     * @example
     * // Delete a few TopUpTransactions
     * const { count } = await prisma.topUpTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TopUpTransactionDeleteManyArgs>(args?: SelectSubset<T, TopUpTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TopUpTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TopUpTransactions
     * const topUpTransaction = await prisma.topUpTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TopUpTransactionUpdateManyArgs>(args: SelectSubset<T, TopUpTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TopUpTransaction.
     * @param {TopUpTransactionUpsertArgs} args - Arguments to update or create a TopUpTransaction.
     * @example
     * // Update or create a TopUpTransaction
     * const topUpTransaction = await prisma.topUpTransaction.upsert({
     *   create: {
     *     // ... data to create a TopUpTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TopUpTransaction we want to update
     *   }
     * })
     */
    upsert<T extends TopUpTransactionUpsertArgs>(args: SelectSubset<T, TopUpTransactionUpsertArgs<ExtArgs>>): Prisma__TopUpTransactionClient<$Result.GetResult<Prisma.$TopUpTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TopUpTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpTransactionCountArgs} args - Arguments to filter TopUpTransactions to count.
     * @example
     * // Count the number of TopUpTransactions
     * const count = await prisma.topUpTransaction.count({
     *   where: {
     *     // ... the filter for the TopUpTransactions we want to count
     *   }
     * })
    **/
    count<T extends TopUpTransactionCountArgs>(
      args?: Subset<T, TopUpTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopUpTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TopUpTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopUpTransactionAggregateArgs>(args: Subset<T, TopUpTransactionAggregateArgs>): Prisma.PrismaPromise<GetTopUpTransactionAggregateType<T>>

    /**
     * Group by TopUpTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopUpTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopUpTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopUpTransactionGroupByArgs['orderBy'] }
        : { orderBy?: TopUpTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopUpTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopUpTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TopUpTransaction model
   */
  readonly fields: TopUpTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TopUpTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TopUpTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TopUpTransaction model
   */
  interface TopUpTransactionFieldRefs {
    readonly id: FieldRef<"TopUpTransaction", 'Int'>
    readonly userId: FieldRef<"TopUpTransaction", 'Int'>
    readonly amount: FieldRef<"TopUpTransaction", 'Decimal'>
    readonly bank: FieldRef<"TopUpTransaction", 'String'>
    readonly transactionCode: FieldRef<"TopUpTransaction", 'String'>
    readonly status: FieldRef<"TopUpTransaction", 'TopUpStatus'>
    readonly createdAt: FieldRef<"TopUpTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TopUpTransaction findUnique
   */
  export type TopUpTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
    /**
     * Filter, which TopUpTransaction to fetch.
     */
    where: TopUpTransactionWhereUniqueInput
  }

  /**
   * TopUpTransaction findUniqueOrThrow
   */
  export type TopUpTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
    /**
     * Filter, which TopUpTransaction to fetch.
     */
    where: TopUpTransactionWhereUniqueInput
  }

  /**
   * TopUpTransaction findFirst
   */
  export type TopUpTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
    /**
     * Filter, which TopUpTransaction to fetch.
     */
    where?: TopUpTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopUpTransactions to fetch.
     */
    orderBy?: TopUpTransactionOrderByWithRelationInput | TopUpTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TopUpTransactions.
     */
    cursor?: TopUpTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopUpTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopUpTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TopUpTransactions.
     */
    distinct?: TopUpTransactionScalarFieldEnum | TopUpTransactionScalarFieldEnum[]
  }

  /**
   * TopUpTransaction findFirstOrThrow
   */
  export type TopUpTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
    /**
     * Filter, which TopUpTransaction to fetch.
     */
    where?: TopUpTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopUpTransactions to fetch.
     */
    orderBy?: TopUpTransactionOrderByWithRelationInput | TopUpTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TopUpTransactions.
     */
    cursor?: TopUpTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopUpTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopUpTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TopUpTransactions.
     */
    distinct?: TopUpTransactionScalarFieldEnum | TopUpTransactionScalarFieldEnum[]
  }

  /**
   * TopUpTransaction findMany
   */
  export type TopUpTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
    /**
     * Filter, which TopUpTransactions to fetch.
     */
    where?: TopUpTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TopUpTransactions to fetch.
     */
    orderBy?: TopUpTransactionOrderByWithRelationInput | TopUpTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TopUpTransactions.
     */
    cursor?: TopUpTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TopUpTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TopUpTransactions.
     */
    skip?: number
    distinct?: TopUpTransactionScalarFieldEnum | TopUpTransactionScalarFieldEnum[]
  }

  /**
   * TopUpTransaction create
   */
  export type TopUpTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a TopUpTransaction.
     */
    data: XOR<TopUpTransactionCreateInput, TopUpTransactionUncheckedCreateInput>
  }

  /**
   * TopUpTransaction createMany
   */
  export type TopUpTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TopUpTransactions.
     */
    data: TopUpTransactionCreateManyInput | TopUpTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TopUpTransaction update
   */
  export type TopUpTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a TopUpTransaction.
     */
    data: XOR<TopUpTransactionUpdateInput, TopUpTransactionUncheckedUpdateInput>
    /**
     * Choose, which TopUpTransaction to update.
     */
    where: TopUpTransactionWhereUniqueInput
  }

  /**
   * TopUpTransaction updateMany
   */
  export type TopUpTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TopUpTransactions.
     */
    data: XOR<TopUpTransactionUpdateManyMutationInput, TopUpTransactionUncheckedUpdateManyInput>
    /**
     * Filter which TopUpTransactions to update
     */
    where?: TopUpTransactionWhereInput
    /**
     * Limit how many TopUpTransactions to update.
     */
    limit?: number
  }

  /**
   * TopUpTransaction upsert
   */
  export type TopUpTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the TopUpTransaction to update in case it exists.
     */
    where: TopUpTransactionWhereUniqueInput
    /**
     * In case the TopUpTransaction found by the `where` argument doesn't exist, create a new TopUpTransaction with this data.
     */
    create: XOR<TopUpTransactionCreateInput, TopUpTransactionUncheckedCreateInput>
    /**
     * In case the TopUpTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TopUpTransactionUpdateInput, TopUpTransactionUncheckedUpdateInput>
  }

  /**
   * TopUpTransaction delete
   */
  export type TopUpTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
    /**
     * Filter which TopUpTransaction to delete.
     */
    where: TopUpTransactionWhereUniqueInput
  }

  /**
   * TopUpTransaction deleteMany
   */
  export type TopUpTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TopUpTransactions to delete
     */
    where?: TopUpTransactionWhereInput
    /**
     * Limit how many TopUpTransactions to delete.
     */
    limit?: number
  }

  /**
   * TopUpTransaction without action
   */
  export type TopUpTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopUpTransaction
     */
    select?: TopUpTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TopUpTransaction
     */
    omit?: TopUpTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopUpTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: Decimal | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: Decimal | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: Decimal | null
    status: $Enums.OrderStatus | null
    createdAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: Decimal | null
    status: $Enums.OrderStatus | null
    createdAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userId: number
    totalAmount: number
    status: number
    createdAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    status?: true
    createdAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    status?: true
    createdAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    userId: number
    totalAmount: Decimal
    status: $Enums.OrderStatus
    createdAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    status?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    accounts?: boolean | Order$accountsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>



  export type OrderSelectScalar = {
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "totalAmount" | "status" | "createdAt", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    accounts?: boolean | Order$accountsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      accounts: Prisma.$AccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      totalAmount: Prisma.Decimal
      status: $Enums.OrderStatus
      createdAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    accounts<T extends Order$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Order$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly userId: FieldRef<"Order", 'Int'>
    readonly totalAmount: FieldRef<"Order", 'Decimal'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.accounts
   */
  export type Order$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model Champion
   */

  export type AggregateChampion = {
    _count: ChampionCountAggregateOutputType | null
    _avg: ChampionAvgAggregateOutputType | null
    _sum: ChampionSumAggregateOutputType | null
    _min: ChampionMinAggregateOutputType | null
    _max: ChampionMaxAggregateOutputType | null
  }

  export type ChampionAvgAggregateOutputType = {
    id: number | null
  }

  export type ChampionSumAggregateOutputType = {
    id: number | null
  }

  export type ChampionMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ChampionMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ChampionCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ChampionAvgAggregateInputType = {
    id?: true
  }

  export type ChampionSumAggregateInputType = {
    id?: true
  }

  export type ChampionMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ChampionMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ChampionCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ChampionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Champion to aggregate.
     */
    where?: ChampionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Champions to fetch.
     */
    orderBy?: ChampionOrderByWithRelationInput | ChampionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChampionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Champions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Champions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Champions
    **/
    _count?: true | ChampionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChampionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChampionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChampionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChampionMaxAggregateInputType
  }

  export type GetChampionAggregateType<T extends ChampionAggregateArgs> = {
        [P in keyof T & keyof AggregateChampion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChampion[P]>
      : GetScalarType<T[P], AggregateChampion[P]>
  }




  export type ChampionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChampionWhereInput
    orderBy?: ChampionOrderByWithAggregationInput | ChampionOrderByWithAggregationInput[]
    by: ChampionScalarFieldEnum[] | ChampionScalarFieldEnum
    having?: ChampionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChampionCountAggregateInputType | true
    _avg?: ChampionAvgAggregateInputType
    _sum?: ChampionSumAggregateInputType
    _min?: ChampionMinAggregateInputType
    _max?: ChampionMaxAggregateInputType
  }

  export type ChampionGroupByOutputType = {
    id: number
    name: string
    _count: ChampionCountAggregateOutputType | null
    _avg: ChampionAvgAggregateOutputType | null
    _sum: ChampionSumAggregateOutputType | null
    _min: ChampionMinAggregateOutputType | null
    _max: ChampionMaxAggregateOutputType | null
  }

  type GetChampionGroupByPayload<T extends ChampionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChampionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChampionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChampionGroupByOutputType[P]>
            : GetScalarType<T[P], ChampionGroupByOutputType[P]>
        }
      >
    >


  export type ChampionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    skins?: boolean | Champion$skinsArgs<ExtArgs>
    accounts?: boolean | Champion$accountsArgs<ExtArgs>
    _count?: boolean | ChampionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["champion"]>



  export type ChampionSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ChampionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["champion"]>
  export type ChampionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skins?: boolean | Champion$skinsArgs<ExtArgs>
    accounts?: boolean | Champion$accountsArgs<ExtArgs>
    _count?: boolean | ChampionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ChampionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Champion"
    objects: {
      skins: Prisma.$SkinPayload<ExtArgs>[]
      accounts: Prisma.$AccountChampionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["champion"]>
    composites: {}
  }

  type ChampionGetPayload<S extends boolean | null | undefined | ChampionDefaultArgs> = $Result.GetResult<Prisma.$ChampionPayload, S>

  type ChampionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChampionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChampionCountAggregateInputType | true
    }

  export interface ChampionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Champion'], meta: { name: 'Champion' } }
    /**
     * Find zero or one Champion that matches the filter.
     * @param {ChampionFindUniqueArgs} args - Arguments to find a Champion
     * @example
     * // Get one Champion
     * const champion = await prisma.champion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChampionFindUniqueArgs>(args: SelectSubset<T, ChampionFindUniqueArgs<ExtArgs>>): Prisma__ChampionClient<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Champion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChampionFindUniqueOrThrowArgs} args - Arguments to find a Champion
     * @example
     * // Get one Champion
     * const champion = await prisma.champion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChampionFindUniqueOrThrowArgs>(args: SelectSubset<T, ChampionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChampionClient<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Champion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChampionFindFirstArgs} args - Arguments to find a Champion
     * @example
     * // Get one Champion
     * const champion = await prisma.champion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChampionFindFirstArgs>(args?: SelectSubset<T, ChampionFindFirstArgs<ExtArgs>>): Prisma__ChampionClient<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Champion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChampionFindFirstOrThrowArgs} args - Arguments to find a Champion
     * @example
     * // Get one Champion
     * const champion = await prisma.champion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChampionFindFirstOrThrowArgs>(args?: SelectSubset<T, ChampionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChampionClient<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Champions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChampionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Champions
     * const champions = await prisma.champion.findMany()
     * 
     * // Get first 10 Champions
     * const champions = await prisma.champion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const championWithIdOnly = await prisma.champion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChampionFindManyArgs>(args?: SelectSubset<T, ChampionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Champion.
     * @param {ChampionCreateArgs} args - Arguments to create a Champion.
     * @example
     * // Create one Champion
     * const Champion = await prisma.champion.create({
     *   data: {
     *     // ... data to create a Champion
     *   }
     * })
     * 
     */
    create<T extends ChampionCreateArgs>(args: SelectSubset<T, ChampionCreateArgs<ExtArgs>>): Prisma__ChampionClient<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Champions.
     * @param {ChampionCreateManyArgs} args - Arguments to create many Champions.
     * @example
     * // Create many Champions
     * const champion = await prisma.champion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChampionCreateManyArgs>(args?: SelectSubset<T, ChampionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Champion.
     * @param {ChampionDeleteArgs} args - Arguments to delete one Champion.
     * @example
     * // Delete one Champion
     * const Champion = await prisma.champion.delete({
     *   where: {
     *     // ... filter to delete one Champion
     *   }
     * })
     * 
     */
    delete<T extends ChampionDeleteArgs>(args: SelectSubset<T, ChampionDeleteArgs<ExtArgs>>): Prisma__ChampionClient<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Champion.
     * @param {ChampionUpdateArgs} args - Arguments to update one Champion.
     * @example
     * // Update one Champion
     * const champion = await prisma.champion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChampionUpdateArgs>(args: SelectSubset<T, ChampionUpdateArgs<ExtArgs>>): Prisma__ChampionClient<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Champions.
     * @param {ChampionDeleteManyArgs} args - Arguments to filter Champions to delete.
     * @example
     * // Delete a few Champions
     * const { count } = await prisma.champion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChampionDeleteManyArgs>(args?: SelectSubset<T, ChampionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Champions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChampionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Champions
     * const champion = await prisma.champion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChampionUpdateManyArgs>(args: SelectSubset<T, ChampionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Champion.
     * @param {ChampionUpsertArgs} args - Arguments to update or create a Champion.
     * @example
     * // Update or create a Champion
     * const champion = await prisma.champion.upsert({
     *   create: {
     *     // ... data to create a Champion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Champion we want to update
     *   }
     * })
     */
    upsert<T extends ChampionUpsertArgs>(args: SelectSubset<T, ChampionUpsertArgs<ExtArgs>>): Prisma__ChampionClient<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Champions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChampionCountArgs} args - Arguments to filter Champions to count.
     * @example
     * // Count the number of Champions
     * const count = await prisma.champion.count({
     *   where: {
     *     // ... the filter for the Champions we want to count
     *   }
     * })
    **/
    count<T extends ChampionCountArgs>(
      args?: Subset<T, ChampionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChampionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Champion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChampionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChampionAggregateArgs>(args: Subset<T, ChampionAggregateArgs>): Prisma.PrismaPromise<GetChampionAggregateType<T>>

    /**
     * Group by Champion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChampionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChampionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChampionGroupByArgs['orderBy'] }
        : { orderBy?: ChampionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChampionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChampionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Champion model
   */
  readonly fields: ChampionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Champion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChampionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    skins<T extends Champion$skinsArgs<ExtArgs> = {}>(args?: Subset<T, Champion$skinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends Champion$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Champion$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Champion model
   */
  interface ChampionFieldRefs {
    readonly id: FieldRef<"Champion", 'Int'>
    readonly name: FieldRef<"Champion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Champion findUnique
   */
  export type ChampionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Champion
     */
    select?: ChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Champion
     */
    omit?: ChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChampionInclude<ExtArgs> | null
    /**
     * Filter, which Champion to fetch.
     */
    where: ChampionWhereUniqueInput
  }

  /**
   * Champion findUniqueOrThrow
   */
  export type ChampionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Champion
     */
    select?: ChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Champion
     */
    omit?: ChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChampionInclude<ExtArgs> | null
    /**
     * Filter, which Champion to fetch.
     */
    where: ChampionWhereUniqueInput
  }

  /**
   * Champion findFirst
   */
  export type ChampionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Champion
     */
    select?: ChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Champion
     */
    omit?: ChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChampionInclude<ExtArgs> | null
    /**
     * Filter, which Champion to fetch.
     */
    where?: ChampionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Champions to fetch.
     */
    orderBy?: ChampionOrderByWithRelationInput | ChampionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Champions.
     */
    cursor?: ChampionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Champions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Champions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Champions.
     */
    distinct?: ChampionScalarFieldEnum | ChampionScalarFieldEnum[]
  }

  /**
   * Champion findFirstOrThrow
   */
  export type ChampionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Champion
     */
    select?: ChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Champion
     */
    omit?: ChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChampionInclude<ExtArgs> | null
    /**
     * Filter, which Champion to fetch.
     */
    where?: ChampionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Champions to fetch.
     */
    orderBy?: ChampionOrderByWithRelationInput | ChampionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Champions.
     */
    cursor?: ChampionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Champions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Champions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Champions.
     */
    distinct?: ChampionScalarFieldEnum | ChampionScalarFieldEnum[]
  }

  /**
   * Champion findMany
   */
  export type ChampionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Champion
     */
    select?: ChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Champion
     */
    omit?: ChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChampionInclude<ExtArgs> | null
    /**
     * Filter, which Champions to fetch.
     */
    where?: ChampionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Champions to fetch.
     */
    orderBy?: ChampionOrderByWithRelationInput | ChampionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Champions.
     */
    cursor?: ChampionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Champions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Champions.
     */
    skip?: number
    distinct?: ChampionScalarFieldEnum | ChampionScalarFieldEnum[]
  }

  /**
   * Champion create
   */
  export type ChampionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Champion
     */
    select?: ChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Champion
     */
    omit?: ChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChampionInclude<ExtArgs> | null
    /**
     * The data needed to create a Champion.
     */
    data: XOR<ChampionCreateInput, ChampionUncheckedCreateInput>
  }

  /**
   * Champion createMany
   */
  export type ChampionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Champions.
     */
    data: ChampionCreateManyInput | ChampionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Champion update
   */
  export type ChampionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Champion
     */
    select?: ChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Champion
     */
    omit?: ChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChampionInclude<ExtArgs> | null
    /**
     * The data needed to update a Champion.
     */
    data: XOR<ChampionUpdateInput, ChampionUncheckedUpdateInput>
    /**
     * Choose, which Champion to update.
     */
    where: ChampionWhereUniqueInput
  }

  /**
   * Champion updateMany
   */
  export type ChampionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Champions.
     */
    data: XOR<ChampionUpdateManyMutationInput, ChampionUncheckedUpdateManyInput>
    /**
     * Filter which Champions to update
     */
    where?: ChampionWhereInput
    /**
     * Limit how many Champions to update.
     */
    limit?: number
  }

  /**
   * Champion upsert
   */
  export type ChampionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Champion
     */
    select?: ChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Champion
     */
    omit?: ChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChampionInclude<ExtArgs> | null
    /**
     * The filter to search for the Champion to update in case it exists.
     */
    where: ChampionWhereUniqueInput
    /**
     * In case the Champion found by the `where` argument doesn't exist, create a new Champion with this data.
     */
    create: XOR<ChampionCreateInput, ChampionUncheckedCreateInput>
    /**
     * In case the Champion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChampionUpdateInput, ChampionUncheckedUpdateInput>
  }

  /**
   * Champion delete
   */
  export type ChampionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Champion
     */
    select?: ChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Champion
     */
    omit?: ChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChampionInclude<ExtArgs> | null
    /**
     * Filter which Champion to delete.
     */
    where: ChampionWhereUniqueInput
  }

  /**
   * Champion deleteMany
   */
  export type ChampionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Champions to delete
     */
    where?: ChampionWhereInput
    /**
     * Limit how many Champions to delete.
     */
    limit?: number
  }

  /**
   * Champion.skins
   */
  export type Champion$skinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
    where?: SkinWhereInput
    orderBy?: SkinOrderByWithRelationInput | SkinOrderByWithRelationInput[]
    cursor?: SkinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkinScalarFieldEnum | SkinScalarFieldEnum[]
  }

  /**
   * Champion.accounts
   */
  export type Champion$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    where?: AccountChampionWhereInput
    orderBy?: AccountChampionOrderByWithRelationInput | AccountChampionOrderByWithRelationInput[]
    cursor?: AccountChampionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountChampionScalarFieldEnum | AccountChampionScalarFieldEnum[]
  }

  /**
   * Champion without action
   */
  export type ChampionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Champion
     */
    select?: ChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Champion
     */
    omit?: ChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChampionInclude<ExtArgs> | null
  }


  /**
   * Model Skin
   */

  export type AggregateSkin = {
    _count: SkinCountAggregateOutputType | null
    _avg: SkinAvgAggregateOutputType | null
    _sum: SkinSumAggregateOutputType | null
    _min: SkinMinAggregateOutputType | null
    _max: SkinMaxAggregateOutputType | null
  }

  export type SkinAvgAggregateOutputType = {
    id: number | null
    championId: number | null
  }

  export type SkinSumAggregateOutputType = {
    id: number | null
    championId: number | null
  }

  export type SkinMinAggregateOutputType = {
    id: number | null
    name: string | null
    championId: number | null
  }

  export type SkinMaxAggregateOutputType = {
    id: number | null
    name: string | null
    championId: number | null
  }

  export type SkinCountAggregateOutputType = {
    id: number
    name: number
    championId: number
    _all: number
  }


  export type SkinAvgAggregateInputType = {
    id?: true
    championId?: true
  }

  export type SkinSumAggregateInputType = {
    id?: true
    championId?: true
  }

  export type SkinMinAggregateInputType = {
    id?: true
    name?: true
    championId?: true
  }

  export type SkinMaxAggregateInputType = {
    id?: true
    name?: true
    championId?: true
  }

  export type SkinCountAggregateInputType = {
    id?: true
    name?: true
    championId?: true
    _all?: true
  }

  export type SkinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skin to aggregate.
     */
    where?: SkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skins to fetch.
     */
    orderBy?: SkinOrderByWithRelationInput | SkinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skins
    **/
    _count?: true | SkinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkinMaxAggregateInputType
  }

  export type GetSkinAggregateType<T extends SkinAggregateArgs> = {
        [P in keyof T & keyof AggregateSkin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkin[P]>
      : GetScalarType<T[P], AggregateSkin[P]>
  }




  export type SkinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkinWhereInput
    orderBy?: SkinOrderByWithAggregationInput | SkinOrderByWithAggregationInput[]
    by: SkinScalarFieldEnum[] | SkinScalarFieldEnum
    having?: SkinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkinCountAggregateInputType | true
    _avg?: SkinAvgAggregateInputType
    _sum?: SkinSumAggregateInputType
    _min?: SkinMinAggregateInputType
    _max?: SkinMaxAggregateInputType
  }

  export type SkinGroupByOutputType = {
    id: number
    name: string
    championId: number
    _count: SkinCountAggregateOutputType | null
    _avg: SkinAvgAggregateOutputType | null
    _sum: SkinSumAggregateOutputType | null
    _min: SkinMinAggregateOutputType | null
    _max: SkinMaxAggregateOutputType | null
  }

  type GetSkinGroupByPayload<T extends SkinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkinGroupByOutputType[P]>
            : GetScalarType<T[P], SkinGroupByOutputType[P]>
        }
      >
    >


  export type SkinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    championId?: boolean
    champion?: boolean | ChampionDefaultArgs<ExtArgs>
    chromas?: boolean | Skin$chromasArgs<ExtArgs>
    accounts?: boolean | Skin$accountsArgs<ExtArgs>
    _count?: boolean | SkinCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skin"]>



  export type SkinSelectScalar = {
    id?: boolean
    name?: boolean
    championId?: boolean
  }

  export type SkinOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "championId", ExtArgs["result"]["skin"]>
  export type SkinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    champion?: boolean | ChampionDefaultArgs<ExtArgs>
    chromas?: boolean | Skin$chromasArgs<ExtArgs>
    accounts?: boolean | Skin$accountsArgs<ExtArgs>
    _count?: boolean | SkinCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SkinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Skin"
    objects: {
      champion: Prisma.$ChampionPayload<ExtArgs>
      chromas: Prisma.$ChromaPayload<ExtArgs>[]
      accounts: Prisma.$AccountSkinPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      championId: number
    }, ExtArgs["result"]["skin"]>
    composites: {}
  }

  type SkinGetPayload<S extends boolean | null | undefined | SkinDefaultArgs> = $Result.GetResult<Prisma.$SkinPayload, S>

  type SkinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkinFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkinCountAggregateInputType | true
    }

  export interface SkinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skin'], meta: { name: 'Skin' } }
    /**
     * Find zero or one Skin that matches the filter.
     * @param {SkinFindUniqueArgs} args - Arguments to find a Skin
     * @example
     * // Get one Skin
     * const skin = await prisma.skin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkinFindUniqueArgs>(args: SelectSubset<T, SkinFindUniqueArgs<ExtArgs>>): Prisma__SkinClient<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Skin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkinFindUniqueOrThrowArgs} args - Arguments to find a Skin
     * @example
     * // Get one Skin
     * const skin = await prisma.skin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkinFindUniqueOrThrowArgs>(args: SelectSubset<T, SkinFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkinClient<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinFindFirstArgs} args - Arguments to find a Skin
     * @example
     * // Get one Skin
     * const skin = await prisma.skin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkinFindFirstArgs>(args?: SelectSubset<T, SkinFindFirstArgs<ExtArgs>>): Prisma__SkinClient<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinFindFirstOrThrowArgs} args - Arguments to find a Skin
     * @example
     * // Get one Skin
     * const skin = await prisma.skin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkinFindFirstOrThrowArgs>(args?: SelectSubset<T, SkinFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkinClient<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Skins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skins
     * const skins = await prisma.skin.findMany()
     * 
     * // Get first 10 Skins
     * const skins = await prisma.skin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skinWithIdOnly = await prisma.skin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkinFindManyArgs>(args?: SelectSubset<T, SkinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Skin.
     * @param {SkinCreateArgs} args - Arguments to create a Skin.
     * @example
     * // Create one Skin
     * const Skin = await prisma.skin.create({
     *   data: {
     *     // ... data to create a Skin
     *   }
     * })
     * 
     */
    create<T extends SkinCreateArgs>(args: SelectSubset<T, SkinCreateArgs<ExtArgs>>): Prisma__SkinClient<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Skins.
     * @param {SkinCreateManyArgs} args - Arguments to create many Skins.
     * @example
     * // Create many Skins
     * const skin = await prisma.skin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkinCreateManyArgs>(args?: SelectSubset<T, SkinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Skin.
     * @param {SkinDeleteArgs} args - Arguments to delete one Skin.
     * @example
     * // Delete one Skin
     * const Skin = await prisma.skin.delete({
     *   where: {
     *     // ... filter to delete one Skin
     *   }
     * })
     * 
     */
    delete<T extends SkinDeleteArgs>(args: SelectSubset<T, SkinDeleteArgs<ExtArgs>>): Prisma__SkinClient<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Skin.
     * @param {SkinUpdateArgs} args - Arguments to update one Skin.
     * @example
     * // Update one Skin
     * const skin = await prisma.skin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkinUpdateArgs>(args: SelectSubset<T, SkinUpdateArgs<ExtArgs>>): Prisma__SkinClient<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Skins.
     * @param {SkinDeleteManyArgs} args - Arguments to filter Skins to delete.
     * @example
     * // Delete a few Skins
     * const { count } = await prisma.skin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkinDeleteManyArgs>(args?: SelectSubset<T, SkinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skins
     * const skin = await prisma.skin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkinUpdateManyArgs>(args: SelectSubset<T, SkinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Skin.
     * @param {SkinUpsertArgs} args - Arguments to update or create a Skin.
     * @example
     * // Update or create a Skin
     * const skin = await prisma.skin.upsert({
     *   create: {
     *     // ... data to create a Skin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skin we want to update
     *   }
     * })
     */
    upsert<T extends SkinUpsertArgs>(args: SelectSubset<T, SkinUpsertArgs<ExtArgs>>): Prisma__SkinClient<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Skins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinCountArgs} args - Arguments to filter Skins to count.
     * @example
     * // Count the number of Skins
     * const count = await prisma.skin.count({
     *   where: {
     *     // ... the filter for the Skins we want to count
     *   }
     * })
    **/
    count<T extends SkinCountArgs>(
      args?: Subset<T, SkinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkinAggregateArgs>(args: Subset<T, SkinAggregateArgs>): Prisma.PrismaPromise<GetSkinAggregateType<T>>

    /**
     * Group by Skin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkinGroupByArgs['orderBy'] }
        : { orderBy?: SkinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Skin model
   */
  readonly fields: SkinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    champion<T extends ChampionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChampionDefaultArgs<ExtArgs>>): Prisma__ChampionClient<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chromas<T extends Skin$chromasArgs<ExtArgs> = {}>(args?: Subset<T, Skin$chromasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends Skin$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Skin$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Skin model
   */
  interface SkinFieldRefs {
    readonly id: FieldRef<"Skin", 'Int'>
    readonly name: FieldRef<"Skin", 'String'>
    readonly championId: FieldRef<"Skin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Skin findUnique
   */
  export type SkinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
    /**
     * Filter, which Skin to fetch.
     */
    where: SkinWhereUniqueInput
  }

  /**
   * Skin findUniqueOrThrow
   */
  export type SkinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
    /**
     * Filter, which Skin to fetch.
     */
    where: SkinWhereUniqueInput
  }

  /**
   * Skin findFirst
   */
  export type SkinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
    /**
     * Filter, which Skin to fetch.
     */
    where?: SkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skins to fetch.
     */
    orderBy?: SkinOrderByWithRelationInput | SkinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skins.
     */
    cursor?: SkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skins.
     */
    distinct?: SkinScalarFieldEnum | SkinScalarFieldEnum[]
  }

  /**
   * Skin findFirstOrThrow
   */
  export type SkinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
    /**
     * Filter, which Skin to fetch.
     */
    where?: SkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skins to fetch.
     */
    orderBy?: SkinOrderByWithRelationInput | SkinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skins.
     */
    cursor?: SkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skins.
     */
    distinct?: SkinScalarFieldEnum | SkinScalarFieldEnum[]
  }

  /**
   * Skin findMany
   */
  export type SkinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
    /**
     * Filter, which Skins to fetch.
     */
    where?: SkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skins to fetch.
     */
    orderBy?: SkinOrderByWithRelationInput | SkinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skins.
     */
    cursor?: SkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skins.
     */
    skip?: number
    distinct?: SkinScalarFieldEnum | SkinScalarFieldEnum[]
  }

  /**
   * Skin create
   */
  export type SkinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
    /**
     * The data needed to create a Skin.
     */
    data: XOR<SkinCreateInput, SkinUncheckedCreateInput>
  }

  /**
   * Skin createMany
   */
  export type SkinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skins.
     */
    data: SkinCreateManyInput | SkinCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Skin update
   */
  export type SkinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
    /**
     * The data needed to update a Skin.
     */
    data: XOR<SkinUpdateInput, SkinUncheckedUpdateInput>
    /**
     * Choose, which Skin to update.
     */
    where: SkinWhereUniqueInput
  }

  /**
   * Skin updateMany
   */
  export type SkinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skins.
     */
    data: XOR<SkinUpdateManyMutationInput, SkinUncheckedUpdateManyInput>
    /**
     * Filter which Skins to update
     */
    where?: SkinWhereInput
    /**
     * Limit how many Skins to update.
     */
    limit?: number
  }

  /**
   * Skin upsert
   */
  export type SkinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
    /**
     * The filter to search for the Skin to update in case it exists.
     */
    where: SkinWhereUniqueInput
    /**
     * In case the Skin found by the `where` argument doesn't exist, create a new Skin with this data.
     */
    create: XOR<SkinCreateInput, SkinUncheckedCreateInput>
    /**
     * In case the Skin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkinUpdateInput, SkinUncheckedUpdateInput>
  }

  /**
   * Skin delete
   */
  export type SkinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
    /**
     * Filter which Skin to delete.
     */
    where: SkinWhereUniqueInput
  }

  /**
   * Skin deleteMany
   */
  export type SkinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skins to delete
     */
    where?: SkinWhereInput
    /**
     * Limit how many Skins to delete.
     */
    limit?: number
  }

  /**
   * Skin.chromas
   */
  export type Skin$chromasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
    where?: ChromaWhereInput
    orderBy?: ChromaOrderByWithRelationInput | ChromaOrderByWithRelationInput[]
    cursor?: ChromaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChromaScalarFieldEnum | ChromaScalarFieldEnum[]
  }

  /**
   * Skin.accounts
   */
  export type Skin$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    where?: AccountSkinWhereInput
    orderBy?: AccountSkinOrderByWithRelationInput | AccountSkinOrderByWithRelationInput[]
    cursor?: AccountSkinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountSkinScalarFieldEnum | AccountSkinScalarFieldEnum[]
  }

  /**
   * Skin without action
   */
  export type SkinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skin
     */
    select?: SkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skin
     */
    omit?: SkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkinInclude<ExtArgs> | null
  }


  /**
   * Model Chroma
   */

  export type AggregateChroma = {
    _count: ChromaCountAggregateOutputType | null
    _avg: ChromaAvgAggregateOutputType | null
    _sum: ChromaSumAggregateOutputType | null
    _min: ChromaMinAggregateOutputType | null
    _max: ChromaMaxAggregateOutputType | null
  }

  export type ChromaAvgAggregateOutputType = {
    id: number | null
    skinId: number | null
  }

  export type ChromaSumAggregateOutputType = {
    id: number | null
    skinId: number | null
  }

  export type ChromaMinAggregateOutputType = {
    id: number | null
    name: string | null
    skinId: number | null
  }

  export type ChromaMaxAggregateOutputType = {
    id: number | null
    name: string | null
    skinId: number | null
  }

  export type ChromaCountAggregateOutputType = {
    id: number
    name: number
    skinId: number
    _all: number
  }


  export type ChromaAvgAggregateInputType = {
    id?: true
    skinId?: true
  }

  export type ChromaSumAggregateInputType = {
    id?: true
    skinId?: true
  }

  export type ChromaMinAggregateInputType = {
    id?: true
    name?: true
    skinId?: true
  }

  export type ChromaMaxAggregateInputType = {
    id?: true
    name?: true
    skinId?: true
  }

  export type ChromaCountAggregateInputType = {
    id?: true
    name?: true
    skinId?: true
    _all?: true
  }

  export type ChromaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chroma to aggregate.
     */
    where?: ChromaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chromas to fetch.
     */
    orderBy?: ChromaOrderByWithRelationInput | ChromaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChromaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chromas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chromas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chromas
    **/
    _count?: true | ChromaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChromaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChromaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChromaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChromaMaxAggregateInputType
  }

  export type GetChromaAggregateType<T extends ChromaAggregateArgs> = {
        [P in keyof T & keyof AggregateChroma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChroma[P]>
      : GetScalarType<T[P], AggregateChroma[P]>
  }




  export type ChromaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChromaWhereInput
    orderBy?: ChromaOrderByWithAggregationInput | ChromaOrderByWithAggregationInput[]
    by: ChromaScalarFieldEnum[] | ChromaScalarFieldEnum
    having?: ChromaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChromaCountAggregateInputType | true
    _avg?: ChromaAvgAggregateInputType
    _sum?: ChromaSumAggregateInputType
    _min?: ChromaMinAggregateInputType
    _max?: ChromaMaxAggregateInputType
  }

  export type ChromaGroupByOutputType = {
    id: number
    name: string
    skinId: number
    _count: ChromaCountAggregateOutputType | null
    _avg: ChromaAvgAggregateOutputType | null
    _sum: ChromaSumAggregateOutputType | null
    _min: ChromaMinAggregateOutputType | null
    _max: ChromaMaxAggregateOutputType | null
  }

  type GetChromaGroupByPayload<T extends ChromaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChromaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChromaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChromaGroupByOutputType[P]>
            : GetScalarType<T[P], ChromaGroupByOutputType[P]>
        }
      >
    >


  export type ChromaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    skinId?: boolean
    skin?: boolean | SkinDefaultArgs<ExtArgs>
    accounts?: boolean | Chroma$accountsArgs<ExtArgs>
    _count?: boolean | ChromaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chroma"]>



  export type ChromaSelectScalar = {
    id?: boolean
    name?: boolean
    skinId?: boolean
  }

  export type ChromaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "skinId", ExtArgs["result"]["chroma"]>
  export type ChromaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skin?: boolean | SkinDefaultArgs<ExtArgs>
    accounts?: boolean | Chroma$accountsArgs<ExtArgs>
    _count?: boolean | ChromaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ChromaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chroma"
    objects: {
      skin: Prisma.$SkinPayload<ExtArgs>
      accounts: Prisma.$AccountChromaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      skinId: number
    }, ExtArgs["result"]["chroma"]>
    composites: {}
  }

  type ChromaGetPayload<S extends boolean | null | undefined | ChromaDefaultArgs> = $Result.GetResult<Prisma.$ChromaPayload, S>

  type ChromaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChromaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChromaCountAggregateInputType | true
    }

  export interface ChromaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chroma'], meta: { name: 'Chroma' } }
    /**
     * Find zero or one Chroma that matches the filter.
     * @param {ChromaFindUniqueArgs} args - Arguments to find a Chroma
     * @example
     * // Get one Chroma
     * const chroma = await prisma.chroma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChromaFindUniqueArgs>(args: SelectSubset<T, ChromaFindUniqueArgs<ExtArgs>>): Prisma__ChromaClient<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Chroma that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChromaFindUniqueOrThrowArgs} args - Arguments to find a Chroma
     * @example
     * // Get one Chroma
     * const chroma = await prisma.chroma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChromaFindUniqueOrThrowArgs>(args: SelectSubset<T, ChromaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChromaClient<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chroma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChromaFindFirstArgs} args - Arguments to find a Chroma
     * @example
     * // Get one Chroma
     * const chroma = await prisma.chroma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChromaFindFirstArgs>(args?: SelectSubset<T, ChromaFindFirstArgs<ExtArgs>>): Prisma__ChromaClient<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chroma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChromaFindFirstOrThrowArgs} args - Arguments to find a Chroma
     * @example
     * // Get one Chroma
     * const chroma = await prisma.chroma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChromaFindFirstOrThrowArgs>(args?: SelectSubset<T, ChromaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChromaClient<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chromas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChromaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chromas
     * const chromas = await prisma.chroma.findMany()
     * 
     * // Get first 10 Chromas
     * const chromas = await prisma.chroma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chromaWithIdOnly = await prisma.chroma.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChromaFindManyArgs>(args?: SelectSubset<T, ChromaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Chroma.
     * @param {ChromaCreateArgs} args - Arguments to create a Chroma.
     * @example
     * // Create one Chroma
     * const Chroma = await prisma.chroma.create({
     *   data: {
     *     // ... data to create a Chroma
     *   }
     * })
     * 
     */
    create<T extends ChromaCreateArgs>(args: SelectSubset<T, ChromaCreateArgs<ExtArgs>>): Prisma__ChromaClient<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Chromas.
     * @param {ChromaCreateManyArgs} args - Arguments to create many Chromas.
     * @example
     * // Create many Chromas
     * const chroma = await prisma.chroma.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChromaCreateManyArgs>(args?: SelectSubset<T, ChromaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chroma.
     * @param {ChromaDeleteArgs} args - Arguments to delete one Chroma.
     * @example
     * // Delete one Chroma
     * const Chroma = await prisma.chroma.delete({
     *   where: {
     *     // ... filter to delete one Chroma
     *   }
     * })
     * 
     */
    delete<T extends ChromaDeleteArgs>(args: SelectSubset<T, ChromaDeleteArgs<ExtArgs>>): Prisma__ChromaClient<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Chroma.
     * @param {ChromaUpdateArgs} args - Arguments to update one Chroma.
     * @example
     * // Update one Chroma
     * const chroma = await prisma.chroma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChromaUpdateArgs>(args: SelectSubset<T, ChromaUpdateArgs<ExtArgs>>): Prisma__ChromaClient<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Chromas.
     * @param {ChromaDeleteManyArgs} args - Arguments to filter Chromas to delete.
     * @example
     * // Delete a few Chromas
     * const { count } = await prisma.chroma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChromaDeleteManyArgs>(args?: SelectSubset<T, ChromaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chromas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChromaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chromas
     * const chroma = await prisma.chroma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChromaUpdateManyArgs>(args: SelectSubset<T, ChromaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chroma.
     * @param {ChromaUpsertArgs} args - Arguments to update or create a Chroma.
     * @example
     * // Update or create a Chroma
     * const chroma = await prisma.chroma.upsert({
     *   create: {
     *     // ... data to create a Chroma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chroma we want to update
     *   }
     * })
     */
    upsert<T extends ChromaUpsertArgs>(args: SelectSubset<T, ChromaUpsertArgs<ExtArgs>>): Prisma__ChromaClient<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Chromas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChromaCountArgs} args - Arguments to filter Chromas to count.
     * @example
     * // Count the number of Chromas
     * const count = await prisma.chroma.count({
     *   where: {
     *     // ... the filter for the Chromas we want to count
     *   }
     * })
    **/
    count<T extends ChromaCountArgs>(
      args?: Subset<T, ChromaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChromaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chroma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChromaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChromaAggregateArgs>(args: Subset<T, ChromaAggregateArgs>): Prisma.PrismaPromise<GetChromaAggregateType<T>>

    /**
     * Group by Chroma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChromaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChromaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChromaGroupByArgs['orderBy'] }
        : { orderBy?: ChromaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChromaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChromaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chroma model
   */
  readonly fields: ChromaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chroma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChromaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    skin<T extends SkinDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkinDefaultArgs<ExtArgs>>): Prisma__SkinClient<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    accounts<T extends Chroma$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Chroma$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chroma model
   */
  interface ChromaFieldRefs {
    readonly id: FieldRef<"Chroma", 'Int'>
    readonly name: FieldRef<"Chroma", 'String'>
    readonly skinId: FieldRef<"Chroma", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Chroma findUnique
   */
  export type ChromaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
    /**
     * Filter, which Chroma to fetch.
     */
    where: ChromaWhereUniqueInput
  }

  /**
   * Chroma findUniqueOrThrow
   */
  export type ChromaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
    /**
     * Filter, which Chroma to fetch.
     */
    where: ChromaWhereUniqueInput
  }

  /**
   * Chroma findFirst
   */
  export type ChromaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
    /**
     * Filter, which Chroma to fetch.
     */
    where?: ChromaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chromas to fetch.
     */
    orderBy?: ChromaOrderByWithRelationInput | ChromaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chromas.
     */
    cursor?: ChromaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chromas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chromas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chromas.
     */
    distinct?: ChromaScalarFieldEnum | ChromaScalarFieldEnum[]
  }

  /**
   * Chroma findFirstOrThrow
   */
  export type ChromaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
    /**
     * Filter, which Chroma to fetch.
     */
    where?: ChromaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chromas to fetch.
     */
    orderBy?: ChromaOrderByWithRelationInput | ChromaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chromas.
     */
    cursor?: ChromaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chromas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chromas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chromas.
     */
    distinct?: ChromaScalarFieldEnum | ChromaScalarFieldEnum[]
  }

  /**
   * Chroma findMany
   */
  export type ChromaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
    /**
     * Filter, which Chromas to fetch.
     */
    where?: ChromaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chromas to fetch.
     */
    orderBy?: ChromaOrderByWithRelationInput | ChromaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chromas.
     */
    cursor?: ChromaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chromas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chromas.
     */
    skip?: number
    distinct?: ChromaScalarFieldEnum | ChromaScalarFieldEnum[]
  }

  /**
   * Chroma create
   */
  export type ChromaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
    /**
     * The data needed to create a Chroma.
     */
    data: XOR<ChromaCreateInput, ChromaUncheckedCreateInput>
  }

  /**
   * Chroma createMany
   */
  export type ChromaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chromas.
     */
    data: ChromaCreateManyInput | ChromaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chroma update
   */
  export type ChromaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
    /**
     * The data needed to update a Chroma.
     */
    data: XOR<ChromaUpdateInput, ChromaUncheckedUpdateInput>
    /**
     * Choose, which Chroma to update.
     */
    where: ChromaWhereUniqueInput
  }

  /**
   * Chroma updateMany
   */
  export type ChromaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chromas.
     */
    data: XOR<ChromaUpdateManyMutationInput, ChromaUncheckedUpdateManyInput>
    /**
     * Filter which Chromas to update
     */
    where?: ChromaWhereInput
    /**
     * Limit how many Chromas to update.
     */
    limit?: number
  }

  /**
   * Chroma upsert
   */
  export type ChromaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
    /**
     * The filter to search for the Chroma to update in case it exists.
     */
    where: ChromaWhereUniqueInput
    /**
     * In case the Chroma found by the `where` argument doesn't exist, create a new Chroma with this data.
     */
    create: XOR<ChromaCreateInput, ChromaUncheckedCreateInput>
    /**
     * In case the Chroma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChromaUpdateInput, ChromaUncheckedUpdateInput>
  }

  /**
   * Chroma delete
   */
  export type ChromaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
    /**
     * Filter which Chroma to delete.
     */
    where: ChromaWhereUniqueInput
  }

  /**
   * Chroma deleteMany
   */
  export type ChromaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chromas to delete
     */
    where?: ChromaWhereInput
    /**
     * Limit how many Chromas to delete.
     */
    limit?: number
  }

  /**
   * Chroma.accounts
   */
  export type Chroma$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    where?: AccountChromaWhereInput
    orderBy?: AccountChromaOrderByWithRelationInput | AccountChromaOrderByWithRelationInput[]
    cursor?: AccountChromaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountChromaScalarFieldEnum | AccountChromaScalarFieldEnum[]
  }

  /**
   * Chroma without action
   */
  export type ChromaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chroma
     */
    select?: ChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chroma
     */
    omit?: ChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChromaInclude<ExtArgs> | null
  }


  /**
   * Model Ward
   */

  export type AggregateWard = {
    _count: WardCountAggregateOutputType | null
    _avg: WardAvgAggregateOutputType | null
    _sum: WardSumAggregateOutputType | null
    _min: WardMinAggregateOutputType | null
    _max: WardMaxAggregateOutputType | null
  }

  export type WardAvgAggregateOutputType = {
    id: number | null
  }

  export type WardSumAggregateOutputType = {
    id: number | null
  }

  export type WardMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type WardMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type WardCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type WardAvgAggregateInputType = {
    id?: true
  }

  export type WardSumAggregateInputType = {
    id?: true
  }

  export type WardMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type WardMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type WardCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type WardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ward to aggregate.
     */
    where?: WardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wards to fetch.
     */
    orderBy?: WardOrderByWithRelationInput | WardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wards
    **/
    _count?: true | WardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WardMaxAggregateInputType
  }

  export type GetWardAggregateType<T extends WardAggregateArgs> = {
        [P in keyof T & keyof AggregateWard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWard[P]>
      : GetScalarType<T[P], AggregateWard[P]>
  }




  export type WardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WardWhereInput
    orderBy?: WardOrderByWithAggregationInput | WardOrderByWithAggregationInput[]
    by: WardScalarFieldEnum[] | WardScalarFieldEnum
    having?: WardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WardCountAggregateInputType | true
    _avg?: WardAvgAggregateInputType
    _sum?: WardSumAggregateInputType
    _min?: WardMinAggregateInputType
    _max?: WardMaxAggregateInputType
  }

  export type WardGroupByOutputType = {
    id: number
    name: string
    _count: WardCountAggregateOutputType | null
    _avg: WardAvgAggregateOutputType | null
    _sum: WardSumAggregateOutputType | null
    _min: WardMinAggregateOutputType | null
    _max: WardMaxAggregateOutputType | null
  }

  type GetWardGroupByPayload<T extends WardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WardGroupByOutputType[P]>
            : GetScalarType<T[P], WardGroupByOutputType[P]>
        }
      >
    >


  export type WardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accounts?: boolean | Ward$accountsArgs<ExtArgs>
    _count?: boolean | WardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ward"]>



  export type WardSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type WardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["ward"]>
  export type WardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | Ward$accountsArgs<ExtArgs>
    _count?: boolean | WardCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $WardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ward"
    objects: {
      accounts: Prisma.$AccountWardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["ward"]>
    composites: {}
  }

  type WardGetPayload<S extends boolean | null | undefined | WardDefaultArgs> = $Result.GetResult<Prisma.$WardPayload, S>

  type WardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WardCountAggregateInputType | true
    }

  export interface WardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ward'], meta: { name: 'Ward' } }
    /**
     * Find zero or one Ward that matches the filter.
     * @param {WardFindUniqueArgs} args - Arguments to find a Ward
     * @example
     * // Get one Ward
     * const ward = await prisma.ward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WardFindUniqueArgs>(args: SelectSubset<T, WardFindUniqueArgs<ExtArgs>>): Prisma__WardClient<$Result.GetResult<Prisma.$WardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ward that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WardFindUniqueOrThrowArgs} args - Arguments to find a Ward
     * @example
     * // Get one Ward
     * const ward = await prisma.ward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WardFindUniqueOrThrowArgs>(args: SelectSubset<T, WardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WardClient<$Result.GetResult<Prisma.$WardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WardFindFirstArgs} args - Arguments to find a Ward
     * @example
     * // Get one Ward
     * const ward = await prisma.ward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WardFindFirstArgs>(args?: SelectSubset<T, WardFindFirstArgs<ExtArgs>>): Prisma__WardClient<$Result.GetResult<Prisma.$WardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WardFindFirstOrThrowArgs} args - Arguments to find a Ward
     * @example
     * // Get one Ward
     * const ward = await prisma.ward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WardFindFirstOrThrowArgs>(args?: SelectSubset<T, WardFindFirstOrThrowArgs<ExtArgs>>): Prisma__WardClient<$Result.GetResult<Prisma.$WardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Wards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wards
     * const wards = await prisma.ward.findMany()
     * 
     * // Get first 10 Wards
     * const wards = await prisma.ward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wardWithIdOnly = await prisma.ward.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WardFindManyArgs>(args?: SelectSubset<T, WardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ward.
     * @param {WardCreateArgs} args - Arguments to create a Ward.
     * @example
     * // Create one Ward
     * const Ward = await prisma.ward.create({
     *   data: {
     *     // ... data to create a Ward
     *   }
     * })
     * 
     */
    create<T extends WardCreateArgs>(args: SelectSubset<T, WardCreateArgs<ExtArgs>>): Prisma__WardClient<$Result.GetResult<Prisma.$WardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Wards.
     * @param {WardCreateManyArgs} args - Arguments to create many Wards.
     * @example
     * // Create many Wards
     * const ward = await prisma.ward.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WardCreateManyArgs>(args?: SelectSubset<T, WardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ward.
     * @param {WardDeleteArgs} args - Arguments to delete one Ward.
     * @example
     * // Delete one Ward
     * const Ward = await prisma.ward.delete({
     *   where: {
     *     // ... filter to delete one Ward
     *   }
     * })
     * 
     */
    delete<T extends WardDeleteArgs>(args: SelectSubset<T, WardDeleteArgs<ExtArgs>>): Prisma__WardClient<$Result.GetResult<Prisma.$WardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ward.
     * @param {WardUpdateArgs} args - Arguments to update one Ward.
     * @example
     * // Update one Ward
     * const ward = await prisma.ward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WardUpdateArgs>(args: SelectSubset<T, WardUpdateArgs<ExtArgs>>): Prisma__WardClient<$Result.GetResult<Prisma.$WardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Wards.
     * @param {WardDeleteManyArgs} args - Arguments to filter Wards to delete.
     * @example
     * // Delete a few Wards
     * const { count } = await prisma.ward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WardDeleteManyArgs>(args?: SelectSubset<T, WardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wards
     * const ward = await prisma.ward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WardUpdateManyArgs>(args: SelectSubset<T, WardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ward.
     * @param {WardUpsertArgs} args - Arguments to update or create a Ward.
     * @example
     * // Update or create a Ward
     * const ward = await prisma.ward.upsert({
     *   create: {
     *     // ... data to create a Ward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ward we want to update
     *   }
     * })
     */
    upsert<T extends WardUpsertArgs>(args: SelectSubset<T, WardUpsertArgs<ExtArgs>>): Prisma__WardClient<$Result.GetResult<Prisma.$WardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Wards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WardCountArgs} args - Arguments to filter Wards to count.
     * @example
     * // Count the number of Wards
     * const count = await prisma.ward.count({
     *   where: {
     *     // ... the filter for the Wards we want to count
     *   }
     * })
    **/
    count<T extends WardCountArgs>(
      args?: Subset<T, WardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WardAggregateArgs>(args: Subset<T, WardAggregateArgs>): Prisma.PrismaPromise<GetWardAggregateType<T>>

    /**
     * Group by Ward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WardGroupByArgs['orderBy'] }
        : { orderBy?: WardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ward model
   */
  readonly fields: WardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends Ward$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Ward$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ward model
   */
  interface WardFieldRefs {
    readonly id: FieldRef<"Ward", 'Int'>
    readonly name: FieldRef<"Ward", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ward findUnique
   */
  export type WardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ward
     */
    select?: WardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ward
     */
    omit?: WardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WardInclude<ExtArgs> | null
    /**
     * Filter, which Ward to fetch.
     */
    where: WardWhereUniqueInput
  }

  /**
   * Ward findUniqueOrThrow
   */
  export type WardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ward
     */
    select?: WardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ward
     */
    omit?: WardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WardInclude<ExtArgs> | null
    /**
     * Filter, which Ward to fetch.
     */
    where: WardWhereUniqueInput
  }

  /**
   * Ward findFirst
   */
  export type WardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ward
     */
    select?: WardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ward
     */
    omit?: WardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WardInclude<ExtArgs> | null
    /**
     * Filter, which Ward to fetch.
     */
    where?: WardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wards to fetch.
     */
    orderBy?: WardOrderByWithRelationInput | WardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wards.
     */
    cursor?: WardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wards.
     */
    distinct?: WardScalarFieldEnum | WardScalarFieldEnum[]
  }

  /**
   * Ward findFirstOrThrow
   */
  export type WardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ward
     */
    select?: WardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ward
     */
    omit?: WardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WardInclude<ExtArgs> | null
    /**
     * Filter, which Ward to fetch.
     */
    where?: WardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wards to fetch.
     */
    orderBy?: WardOrderByWithRelationInput | WardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wards.
     */
    cursor?: WardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wards.
     */
    distinct?: WardScalarFieldEnum | WardScalarFieldEnum[]
  }

  /**
   * Ward findMany
   */
  export type WardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ward
     */
    select?: WardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ward
     */
    omit?: WardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WardInclude<ExtArgs> | null
    /**
     * Filter, which Wards to fetch.
     */
    where?: WardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wards to fetch.
     */
    orderBy?: WardOrderByWithRelationInput | WardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wards.
     */
    cursor?: WardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wards.
     */
    skip?: number
    distinct?: WardScalarFieldEnum | WardScalarFieldEnum[]
  }

  /**
   * Ward create
   */
  export type WardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ward
     */
    select?: WardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ward
     */
    omit?: WardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WardInclude<ExtArgs> | null
    /**
     * The data needed to create a Ward.
     */
    data: XOR<WardCreateInput, WardUncheckedCreateInput>
  }

  /**
   * Ward createMany
   */
  export type WardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wards.
     */
    data: WardCreateManyInput | WardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ward update
   */
  export type WardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ward
     */
    select?: WardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ward
     */
    omit?: WardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WardInclude<ExtArgs> | null
    /**
     * The data needed to update a Ward.
     */
    data: XOR<WardUpdateInput, WardUncheckedUpdateInput>
    /**
     * Choose, which Ward to update.
     */
    where: WardWhereUniqueInput
  }

  /**
   * Ward updateMany
   */
  export type WardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wards.
     */
    data: XOR<WardUpdateManyMutationInput, WardUncheckedUpdateManyInput>
    /**
     * Filter which Wards to update
     */
    where?: WardWhereInput
    /**
     * Limit how many Wards to update.
     */
    limit?: number
  }

  /**
   * Ward upsert
   */
  export type WardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ward
     */
    select?: WardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ward
     */
    omit?: WardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WardInclude<ExtArgs> | null
    /**
     * The filter to search for the Ward to update in case it exists.
     */
    where: WardWhereUniqueInput
    /**
     * In case the Ward found by the `where` argument doesn't exist, create a new Ward with this data.
     */
    create: XOR<WardCreateInput, WardUncheckedCreateInput>
    /**
     * In case the Ward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WardUpdateInput, WardUncheckedUpdateInput>
  }

  /**
   * Ward delete
   */
  export type WardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ward
     */
    select?: WardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ward
     */
    omit?: WardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WardInclude<ExtArgs> | null
    /**
     * Filter which Ward to delete.
     */
    where: WardWhereUniqueInput
  }

  /**
   * Ward deleteMany
   */
  export type WardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wards to delete
     */
    where?: WardWhereInput
    /**
     * Limit how many Wards to delete.
     */
    limit?: number
  }

  /**
   * Ward.accounts
   */
  export type Ward$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    where?: AccountWardWhereInput
    orderBy?: AccountWardOrderByWithRelationInput | AccountWardOrderByWithRelationInput[]
    cursor?: AccountWardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountWardScalarFieldEnum | AccountWardScalarFieldEnum[]
  }

  /**
   * Ward without action
   */
  export type WardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ward
     */
    select?: WardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ward
     */
    omit?: WardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WardInclude<ExtArgs> | null
  }


  /**
   * Model Emote
   */

  export type AggregateEmote = {
    _count: EmoteCountAggregateOutputType | null
    _avg: EmoteAvgAggregateOutputType | null
    _sum: EmoteSumAggregateOutputType | null
    _min: EmoteMinAggregateOutputType | null
    _max: EmoteMaxAggregateOutputType | null
  }

  export type EmoteAvgAggregateOutputType = {
    id: number | null
  }

  export type EmoteSumAggregateOutputType = {
    id: number | null
  }

  export type EmoteMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type EmoteMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type EmoteCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type EmoteAvgAggregateInputType = {
    id?: true
  }

  export type EmoteSumAggregateInputType = {
    id?: true
  }

  export type EmoteMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type EmoteMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type EmoteCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type EmoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Emote to aggregate.
     */
    where?: EmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emotes to fetch.
     */
    orderBy?: EmoteOrderByWithRelationInput | EmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Emotes
    **/
    _count?: true | EmoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmoteMaxAggregateInputType
  }

  export type GetEmoteAggregateType<T extends EmoteAggregateArgs> = {
        [P in keyof T & keyof AggregateEmote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmote[P]>
      : GetScalarType<T[P], AggregateEmote[P]>
  }




  export type EmoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmoteWhereInput
    orderBy?: EmoteOrderByWithAggregationInput | EmoteOrderByWithAggregationInput[]
    by: EmoteScalarFieldEnum[] | EmoteScalarFieldEnum
    having?: EmoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmoteCountAggregateInputType | true
    _avg?: EmoteAvgAggregateInputType
    _sum?: EmoteSumAggregateInputType
    _min?: EmoteMinAggregateInputType
    _max?: EmoteMaxAggregateInputType
  }

  export type EmoteGroupByOutputType = {
    id: number
    name: string
    _count: EmoteCountAggregateOutputType | null
    _avg: EmoteAvgAggregateOutputType | null
    _sum: EmoteSumAggregateOutputType | null
    _min: EmoteMinAggregateOutputType | null
    _max: EmoteMaxAggregateOutputType | null
  }

  type GetEmoteGroupByPayload<T extends EmoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmoteGroupByOutputType[P]>
            : GetScalarType<T[P], EmoteGroupByOutputType[P]>
        }
      >
    >


  export type EmoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accounts?: boolean | Emote$accountsArgs<ExtArgs>
    _count?: boolean | EmoteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emote"]>



  export type EmoteSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type EmoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["emote"]>
  export type EmoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | Emote$accountsArgs<ExtArgs>
    _count?: boolean | EmoteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EmotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Emote"
    objects: {
      accounts: Prisma.$AccountEmotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["emote"]>
    composites: {}
  }

  type EmoteGetPayload<S extends boolean | null | undefined | EmoteDefaultArgs> = $Result.GetResult<Prisma.$EmotePayload, S>

  type EmoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmoteCountAggregateInputType | true
    }

  export interface EmoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Emote'], meta: { name: 'Emote' } }
    /**
     * Find zero or one Emote that matches the filter.
     * @param {EmoteFindUniqueArgs} args - Arguments to find a Emote
     * @example
     * // Get one Emote
     * const emote = await prisma.emote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmoteFindUniqueArgs>(args: SelectSubset<T, EmoteFindUniqueArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Emote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmoteFindUniqueOrThrowArgs} args - Arguments to find a Emote
     * @example
     * // Get one Emote
     * const emote = await prisma.emote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmoteFindUniqueOrThrowArgs>(args: SelectSubset<T, EmoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Emote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteFindFirstArgs} args - Arguments to find a Emote
     * @example
     * // Get one Emote
     * const emote = await prisma.emote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmoteFindFirstArgs>(args?: SelectSubset<T, EmoteFindFirstArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Emote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteFindFirstOrThrowArgs} args - Arguments to find a Emote
     * @example
     * // Get one Emote
     * const emote = await prisma.emote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmoteFindFirstOrThrowArgs>(args?: SelectSubset<T, EmoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Emotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Emotes
     * const emotes = await prisma.emote.findMany()
     * 
     * // Get first 10 Emotes
     * const emotes = await prisma.emote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emoteWithIdOnly = await prisma.emote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmoteFindManyArgs>(args?: SelectSubset<T, EmoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Emote.
     * @param {EmoteCreateArgs} args - Arguments to create a Emote.
     * @example
     * // Create one Emote
     * const Emote = await prisma.emote.create({
     *   data: {
     *     // ... data to create a Emote
     *   }
     * })
     * 
     */
    create<T extends EmoteCreateArgs>(args: SelectSubset<T, EmoteCreateArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Emotes.
     * @param {EmoteCreateManyArgs} args - Arguments to create many Emotes.
     * @example
     * // Create many Emotes
     * const emote = await prisma.emote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmoteCreateManyArgs>(args?: SelectSubset<T, EmoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Emote.
     * @param {EmoteDeleteArgs} args - Arguments to delete one Emote.
     * @example
     * // Delete one Emote
     * const Emote = await prisma.emote.delete({
     *   where: {
     *     // ... filter to delete one Emote
     *   }
     * })
     * 
     */
    delete<T extends EmoteDeleteArgs>(args: SelectSubset<T, EmoteDeleteArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Emote.
     * @param {EmoteUpdateArgs} args - Arguments to update one Emote.
     * @example
     * // Update one Emote
     * const emote = await prisma.emote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmoteUpdateArgs>(args: SelectSubset<T, EmoteUpdateArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Emotes.
     * @param {EmoteDeleteManyArgs} args - Arguments to filter Emotes to delete.
     * @example
     * // Delete a few Emotes
     * const { count } = await prisma.emote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmoteDeleteManyArgs>(args?: SelectSubset<T, EmoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Emotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Emotes
     * const emote = await prisma.emote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmoteUpdateManyArgs>(args: SelectSubset<T, EmoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Emote.
     * @param {EmoteUpsertArgs} args - Arguments to update or create a Emote.
     * @example
     * // Update or create a Emote
     * const emote = await prisma.emote.upsert({
     *   create: {
     *     // ... data to create a Emote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Emote we want to update
     *   }
     * })
     */
    upsert<T extends EmoteUpsertArgs>(args: SelectSubset<T, EmoteUpsertArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Emotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteCountArgs} args - Arguments to filter Emotes to count.
     * @example
     * // Count the number of Emotes
     * const count = await prisma.emote.count({
     *   where: {
     *     // ... the filter for the Emotes we want to count
     *   }
     * })
    **/
    count<T extends EmoteCountArgs>(
      args?: Subset<T, EmoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Emote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmoteAggregateArgs>(args: Subset<T, EmoteAggregateArgs>): Prisma.PrismaPromise<GetEmoteAggregateType<T>>

    /**
     * Group by Emote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmoteGroupByArgs['orderBy'] }
        : { orderBy?: EmoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Emote model
   */
  readonly fields: EmoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Emote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends Emote$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Emote$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Emote model
   */
  interface EmoteFieldRefs {
    readonly id: FieldRef<"Emote", 'Int'>
    readonly name: FieldRef<"Emote", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Emote findUnique
   */
  export type EmoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Emote
     */
    omit?: EmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter, which Emote to fetch.
     */
    where: EmoteWhereUniqueInput
  }

  /**
   * Emote findUniqueOrThrow
   */
  export type EmoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Emote
     */
    omit?: EmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter, which Emote to fetch.
     */
    where: EmoteWhereUniqueInput
  }

  /**
   * Emote findFirst
   */
  export type EmoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Emote
     */
    omit?: EmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter, which Emote to fetch.
     */
    where?: EmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emotes to fetch.
     */
    orderBy?: EmoteOrderByWithRelationInput | EmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emotes.
     */
    cursor?: EmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emotes.
     */
    distinct?: EmoteScalarFieldEnum | EmoteScalarFieldEnum[]
  }

  /**
   * Emote findFirstOrThrow
   */
  export type EmoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Emote
     */
    omit?: EmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter, which Emote to fetch.
     */
    where?: EmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emotes to fetch.
     */
    orderBy?: EmoteOrderByWithRelationInput | EmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emotes.
     */
    cursor?: EmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emotes.
     */
    distinct?: EmoteScalarFieldEnum | EmoteScalarFieldEnum[]
  }

  /**
   * Emote findMany
   */
  export type EmoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Emote
     */
    omit?: EmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter, which Emotes to fetch.
     */
    where?: EmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emotes to fetch.
     */
    orderBy?: EmoteOrderByWithRelationInput | EmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Emotes.
     */
    cursor?: EmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emotes.
     */
    skip?: number
    distinct?: EmoteScalarFieldEnum | EmoteScalarFieldEnum[]
  }

  /**
   * Emote create
   */
  export type EmoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Emote
     */
    omit?: EmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Emote.
     */
    data: XOR<EmoteCreateInput, EmoteUncheckedCreateInput>
  }

  /**
   * Emote createMany
   */
  export type EmoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Emotes.
     */
    data: EmoteCreateManyInput | EmoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Emote update
   */
  export type EmoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Emote
     */
    omit?: EmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Emote.
     */
    data: XOR<EmoteUpdateInput, EmoteUncheckedUpdateInput>
    /**
     * Choose, which Emote to update.
     */
    where: EmoteWhereUniqueInput
  }

  /**
   * Emote updateMany
   */
  export type EmoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Emotes.
     */
    data: XOR<EmoteUpdateManyMutationInput, EmoteUncheckedUpdateManyInput>
    /**
     * Filter which Emotes to update
     */
    where?: EmoteWhereInput
    /**
     * Limit how many Emotes to update.
     */
    limit?: number
  }

  /**
   * Emote upsert
   */
  export type EmoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Emote
     */
    omit?: EmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Emote to update in case it exists.
     */
    where: EmoteWhereUniqueInput
    /**
     * In case the Emote found by the `where` argument doesn't exist, create a new Emote with this data.
     */
    create: XOR<EmoteCreateInput, EmoteUncheckedCreateInput>
    /**
     * In case the Emote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmoteUpdateInput, EmoteUncheckedUpdateInput>
  }

  /**
   * Emote delete
   */
  export type EmoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Emote
     */
    omit?: EmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter which Emote to delete.
     */
    where: EmoteWhereUniqueInput
  }

  /**
   * Emote deleteMany
   */
  export type EmoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Emotes to delete
     */
    where?: EmoteWhereInput
    /**
     * Limit how many Emotes to delete.
     */
    limit?: number
  }

  /**
   * Emote.accounts
   */
  export type Emote$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    where?: AccountEmoteWhereInput
    orderBy?: AccountEmoteOrderByWithRelationInput | AccountEmoteOrderByWithRelationInput[]
    cursor?: AccountEmoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountEmoteScalarFieldEnum | AccountEmoteScalarFieldEnum[]
  }

  /**
   * Emote without action
   */
  export type EmoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Emote
     */
    omit?: EmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
  }


  /**
   * Model Icon
   */

  export type AggregateIcon = {
    _count: IconCountAggregateOutputType | null
    _avg: IconAvgAggregateOutputType | null
    _sum: IconSumAggregateOutputType | null
    _min: IconMinAggregateOutputType | null
    _max: IconMaxAggregateOutputType | null
  }

  export type IconAvgAggregateOutputType = {
    id: number | null
  }

  export type IconSumAggregateOutputType = {
    id: number | null
  }

  export type IconMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type IconMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type IconCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type IconAvgAggregateInputType = {
    id?: true
  }

  export type IconSumAggregateInputType = {
    id?: true
  }

  export type IconMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type IconMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type IconCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type IconAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Icon to aggregate.
     */
    where?: IconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Icons to fetch.
     */
    orderBy?: IconOrderByWithRelationInput | IconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Icons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Icons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Icons
    **/
    _count?: true | IconCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IconAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IconSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IconMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IconMaxAggregateInputType
  }

  export type GetIconAggregateType<T extends IconAggregateArgs> = {
        [P in keyof T & keyof AggregateIcon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIcon[P]>
      : GetScalarType<T[P], AggregateIcon[P]>
  }




  export type IconGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IconWhereInput
    orderBy?: IconOrderByWithAggregationInput | IconOrderByWithAggregationInput[]
    by: IconScalarFieldEnum[] | IconScalarFieldEnum
    having?: IconScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IconCountAggregateInputType | true
    _avg?: IconAvgAggregateInputType
    _sum?: IconSumAggregateInputType
    _min?: IconMinAggregateInputType
    _max?: IconMaxAggregateInputType
  }

  export type IconGroupByOutputType = {
    id: number
    name: string
    _count: IconCountAggregateOutputType | null
    _avg: IconAvgAggregateOutputType | null
    _sum: IconSumAggregateOutputType | null
    _min: IconMinAggregateOutputType | null
    _max: IconMaxAggregateOutputType | null
  }

  type GetIconGroupByPayload<T extends IconGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IconGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IconGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IconGroupByOutputType[P]>
            : GetScalarType<T[P], IconGroupByOutputType[P]>
        }
      >
    >


  export type IconSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accounts?: boolean | Icon$accountsArgs<ExtArgs>
    _count?: boolean | IconCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["icon"]>



  export type IconSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type IconOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["icon"]>
  export type IconInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | Icon$accountsArgs<ExtArgs>
    _count?: boolean | IconCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $IconPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Icon"
    objects: {
      accounts: Prisma.$AccountIconPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["icon"]>
    composites: {}
  }

  type IconGetPayload<S extends boolean | null | undefined | IconDefaultArgs> = $Result.GetResult<Prisma.$IconPayload, S>

  type IconCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IconFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IconCountAggregateInputType | true
    }

  export interface IconDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Icon'], meta: { name: 'Icon' } }
    /**
     * Find zero or one Icon that matches the filter.
     * @param {IconFindUniqueArgs} args - Arguments to find a Icon
     * @example
     * // Get one Icon
     * const icon = await prisma.icon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IconFindUniqueArgs>(args: SelectSubset<T, IconFindUniqueArgs<ExtArgs>>): Prisma__IconClient<$Result.GetResult<Prisma.$IconPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Icon that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IconFindUniqueOrThrowArgs} args - Arguments to find a Icon
     * @example
     * // Get one Icon
     * const icon = await prisma.icon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IconFindUniqueOrThrowArgs>(args: SelectSubset<T, IconFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IconClient<$Result.GetResult<Prisma.$IconPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Icon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconFindFirstArgs} args - Arguments to find a Icon
     * @example
     * // Get one Icon
     * const icon = await prisma.icon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IconFindFirstArgs>(args?: SelectSubset<T, IconFindFirstArgs<ExtArgs>>): Prisma__IconClient<$Result.GetResult<Prisma.$IconPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Icon that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconFindFirstOrThrowArgs} args - Arguments to find a Icon
     * @example
     * // Get one Icon
     * const icon = await prisma.icon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IconFindFirstOrThrowArgs>(args?: SelectSubset<T, IconFindFirstOrThrowArgs<ExtArgs>>): Prisma__IconClient<$Result.GetResult<Prisma.$IconPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Icons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Icons
     * const icons = await prisma.icon.findMany()
     * 
     * // Get first 10 Icons
     * const icons = await prisma.icon.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const iconWithIdOnly = await prisma.icon.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IconFindManyArgs>(args?: SelectSubset<T, IconFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IconPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Icon.
     * @param {IconCreateArgs} args - Arguments to create a Icon.
     * @example
     * // Create one Icon
     * const Icon = await prisma.icon.create({
     *   data: {
     *     // ... data to create a Icon
     *   }
     * })
     * 
     */
    create<T extends IconCreateArgs>(args: SelectSubset<T, IconCreateArgs<ExtArgs>>): Prisma__IconClient<$Result.GetResult<Prisma.$IconPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Icons.
     * @param {IconCreateManyArgs} args - Arguments to create many Icons.
     * @example
     * // Create many Icons
     * const icon = await prisma.icon.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IconCreateManyArgs>(args?: SelectSubset<T, IconCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Icon.
     * @param {IconDeleteArgs} args - Arguments to delete one Icon.
     * @example
     * // Delete one Icon
     * const Icon = await prisma.icon.delete({
     *   where: {
     *     // ... filter to delete one Icon
     *   }
     * })
     * 
     */
    delete<T extends IconDeleteArgs>(args: SelectSubset<T, IconDeleteArgs<ExtArgs>>): Prisma__IconClient<$Result.GetResult<Prisma.$IconPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Icon.
     * @param {IconUpdateArgs} args - Arguments to update one Icon.
     * @example
     * // Update one Icon
     * const icon = await prisma.icon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IconUpdateArgs>(args: SelectSubset<T, IconUpdateArgs<ExtArgs>>): Prisma__IconClient<$Result.GetResult<Prisma.$IconPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Icons.
     * @param {IconDeleteManyArgs} args - Arguments to filter Icons to delete.
     * @example
     * // Delete a few Icons
     * const { count } = await prisma.icon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IconDeleteManyArgs>(args?: SelectSubset<T, IconDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Icons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Icons
     * const icon = await prisma.icon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IconUpdateManyArgs>(args: SelectSubset<T, IconUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Icon.
     * @param {IconUpsertArgs} args - Arguments to update or create a Icon.
     * @example
     * // Update or create a Icon
     * const icon = await prisma.icon.upsert({
     *   create: {
     *     // ... data to create a Icon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Icon we want to update
     *   }
     * })
     */
    upsert<T extends IconUpsertArgs>(args: SelectSubset<T, IconUpsertArgs<ExtArgs>>): Prisma__IconClient<$Result.GetResult<Prisma.$IconPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Icons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCountArgs} args - Arguments to filter Icons to count.
     * @example
     * // Count the number of Icons
     * const count = await prisma.icon.count({
     *   where: {
     *     // ... the filter for the Icons we want to count
     *   }
     * })
    **/
    count<T extends IconCountArgs>(
      args?: Subset<T, IconCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IconCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Icon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IconAggregateArgs>(args: Subset<T, IconAggregateArgs>): Prisma.PrismaPromise<GetIconAggregateType<T>>

    /**
     * Group by Icon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IconGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IconGroupByArgs['orderBy'] }
        : { orderBy?: IconGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IconGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIconGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Icon model
   */
  readonly fields: IconFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Icon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IconClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends Icon$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Icon$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Icon model
   */
  interface IconFieldRefs {
    readonly id: FieldRef<"Icon", 'Int'>
    readonly name: FieldRef<"Icon", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Icon findUnique
   */
  export type IconFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Icon
     */
    omit?: IconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconInclude<ExtArgs> | null
    /**
     * Filter, which Icon to fetch.
     */
    where: IconWhereUniqueInput
  }

  /**
   * Icon findUniqueOrThrow
   */
  export type IconFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Icon
     */
    omit?: IconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconInclude<ExtArgs> | null
    /**
     * Filter, which Icon to fetch.
     */
    where: IconWhereUniqueInput
  }

  /**
   * Icon findFirst
   */
  export type IconFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Icon
     */
    omit?: IconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconInclude<ExtArgs> | null
    /**
     * Filter, which Icon to fetch.
     */
    where?: IconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Icons to fetch.
     */
    orderBy?: IconOrderByWithRelationInput | IconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Icons.
     */
    cursor?: IconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Icons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Icons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Icons.
     */
    distinct?: IconScalarFieldEnum | IconScalarFieldEnum[]
  }

  /**
   * Icon findFirstOrThrow
   */
  export type IconFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Icon
     */
    omit?: IconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconInclude<ExtArgs> | null
    /**
     * Filter, which Icon to fetch.
     */
    where?: IconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Icons to fetch.
     */
    orderBy?: IconOrderByWithRelationInput | IconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Icons.
     */
    cursor?: IconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Icons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Icons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Icons.
     */
    distinct?: IconScalarFieldEnum | IconScalarFieldEnum[]
  }

  /**
   * Icon findMany
   */
  export type IconFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Icon
     */
    omit?: IconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconInclude<ExtArgs> | null
    /**
     * Filter, which Icons to fetch.
     */
    where?: IconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Icons to fetch.
     */
    orderBy?: IconOrderByWithRelationInput | IconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Icons.
     */
    cursor?: IconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Icons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Icons.
     */
    skip?: number
    distinct?: IconScalarFieldEnum | IconScalarFieldEnum[]
  }

  /**
   * Icon create
   */
  export type IconCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Icon
     */
    omit?: IconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconInclude<ExtArgs> | null
    /**
     * The data needed to create a Icon.
     */
    data: XOR<IconCreateInput, IconUncheckedCreateInput>
  }

  /**
   * Icon createMany
   */
  export type IconCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Icons.
     */
    data: IconCreateManyInput | IconCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Icon update
   */
  export type IconUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Icon
     */
    omit?: IconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconInclude<ExtArgs> | null
    /**
     * The data needed to update a Icon.
     */
    data: XOR<IconUpdateInput, IconUncheckedUpdateInput>
    /**
     * Choose, which Icon to update.
     */
    where: IconWhereUniqueInput
  }

  /**
   * Icon updateMany
   */
  export type IconUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Icons.
     */
    data: XOR<IconUpdateManyMutationInput, IconUncheckedUpdateManyInput>
    /**
     * Filter which Icons to update
     */
    where?: IconWhereInput
    /**
     * Limit how many Icons to update.
     */
    limit?: number
  }

  /**
   * Icon upsert
   */
  export type IconUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Icon
     */
    omit?: IconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconInclude<ExtArgs> | null
    /**
     * The filter to search for the Icon to update in case it exists.
     */
    where: IconWhereUniqueInput
    /**
     * In case the Icon found by the `where` argument doesn't exist, create a new Icon with this data.
     */
    create: XOR<IconCreateInput, IconUncheckedCreateInput>
    /**
     * In case the Icon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IconUpdateInput, IconUncheckedUpdateInput>
  }

  /**
   * Icon delete
   */
  export type IconDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Icon
     */
    omit?: IconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconInclude<ExtArgs> | null
    /**
     * Filter which Icon to delete.
     */
    where: IconWhereUniqueInput
  }

  /**
   * Icon deleteMany
   */
  export type IconDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Icons to delete
     */
    where?: IconWhereInput
    /**
     * Limit how many Icons to delete.
     */
    limit?: number
  }

  /**
   * Icon.accounts
   */
  export type Icon$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    where?: AccountIconWhereInput
    orderBy?: AccountIconOrderByWithRelationInput | AccountIconOrderByWithRelationInput[]
    cursor?: AccountIconWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountIconScalarFieldEnum | AccountIconScalarFieldEnum[]
  }

  /**
   * Icon without action
   */
  export type IconDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Icon
     */
    select?: IconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Icon
     */
    omit?: IconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconInclude<ExtArgs> | null
  }


  /**
   * Model LittleLegend
   */

  export type AggregateLittleLegend = {
    _count: LittleLegendCountAggregateOutputType | null
    _avg: LittleLegendAvgAggregateOutputType | null
    _sum: LittleLegendSumAggregateOutputType | null
    _min: LittleLegendMinAggregateOutputType | null
    _max: LittleLegendMaxAggregateOutputType | null
  }

  export type LittleLegendAvgAggregateOutputType = {
    id: number | null
  }

  export type LittleLegendSumAggregateOutputType = {
    id: number | null
  }

  export type LittleLegendMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type LittleLegendMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type LittleLegendCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type LittleLegendAvgAggregateInputType = {
    id?: true
  }

  export type LittleLegendSumAggregateInputType = {
    id?: true
  }

  export type LittleLegendMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type LittleLegendMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type LittleLegendCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type LittleLegendAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LittleLegend to aggregate.
     */
    where?: LittleLegendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LittleLegends to fetch.
     */
    orderBy?: LittleLegendOrderByWithRelationInput | LittleLegendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LittleLegendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LittleLegends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LittleLegends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LittleLegends
    **/
    _count?: true | LittleLegendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LittleLegendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LittleLegendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LittleLegendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LittleLegendMaxAggregateInputType
  }

  export type GetLittleLegendAggregateType<T extends LittleLegendAggregateArgs> = {
        [P in keyof T & keyof AggregateLittleLegend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLittleLegend[P]>
      : GetScalarType<T[P], AggregateLittleLegend[P]>
  }




  export type LittleLegendGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LittleLegendWhereInput
    orderBy?: LittleLegendOrderByWithAggregationInput | LittleLegendOrderByWithAggregationInput[]
    by: LittleLegendScalarFieldEnum[] | LittleLegendScalarFieldEnum
    having?: LittleLegendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LittleLegendCountAggregateInputType | true
    _avg?: LittleLegendAvgAggregateInputType
    _sum?: LittleLegendSumAggregateInputType
    _min?: LittleLegendMinAggregateInputType
    _max?: LittleLegendMaxAggregateInputType
  }

  export type LittleLegendGroupByOutputType = {
    id: number
    name: string
    _count: LittleLegendCountAggregateOutputType | null
    _avg: LittleLegendAvgAggregateOutputType | null
    _sum: LittleLegendSumAggregateOutputType | null
    _min: LittleLegendMinAggregateOutputType | null
    _max: LittleLegendMaxAggregateOutputType | null
  }

  type GetLittleLegendGroupByPayload<T extends LittleLegendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LittleLegendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LittleLegendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LittleLegendGroupByOutputType[P]>
            : GetScalarType<T[P], LittleLegendGroupByOutputType[P]>
        }
      >
    >


  export type LittleLegendSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accounts?: boolean | LittleLegend$accountsArgs<ExtArgs>
    _count?: boolean | LittleLegendCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["littleLegend"]>



  export type LittleLegendSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type LittleLegendOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["littleLegend"]>
  export type LittleLegendInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | LittleLegend$accountsArgs<ExtArgs>
    _count?: boolean | LittleLegendCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LittleLegendPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LittleLegend"
    objects: {
      accounts: Prisma.$AccountLittleLegendPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["littleLegend"]>
    composites: {}
  }

  type LittleLegendGetPayload<S extends boolean | null | undefined | LittleLegendDefaultArgs> = $Result.GetResult<Prisma.$LittleLegendPayload, S>

  type LittleLegendCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LittleLegendFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LittleLegendCountAggregateInputType | true
    }

  export interface LittleLegendDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LittleLegend'], meta: { name: 'LittleLegend' } }
    /**
     * Find zero or one LittleLegend that matches the filter.
     * @param {LittleLegendFindUniqueArgs} args - Arguments to find a LittleLegend
     * @example
     * // Get one LittleLegend
     * const littleLegend = await prisma.littleLegend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LittleLegendFindUniqueArgs>(args: SelectSubset<T, LittleLegendFindUniqueArgs<ExtArgs>>): Prisma__LittleLegendClient<$Result.GetResult<Prisma.$LittleLegendPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LittleLegend that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LittleLegendFindUniqueOrThrowArgs} args - Arguments to find a LittleLegend
     * @example
     * // Get one LittleLegend
     * const littleLegend = await prisma.littleLegend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LittleLegendFindUniqueOrThrowArgs>(args: SelectSubset<T, LittleLegendFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LittleLegendClient<$Result.GetResult<Prisma.$LittleLegendPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LittleLegend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LittleLegendFindFirstArgs} args - Arguments to find a LittleLegend
     * @example
     * // Get one LittleLegend
     * const littleLegend = await prisma.littleLegend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LittleLegendFindFirstArgs>(args?: SelectSubset<T, LittleLegendFindFirstArgs<ExtArgs>>): Prisma__LittleLegendClient<$Result.GetResult<Prisma.$LittleLegendPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LittleLegend that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LittleLegendFindFirstOrThrowArgs} args - Arguments to find a LittleLegend
     * @example
     * // Get one LittleLegend
     * const littleLegend = await prisma.littleLegend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LittleLegendFindFirstOrThrowArgs>(args?: SelectSubset<T, LittleLegendFindFirstOrThrowArgs<ExtArgs>>): Prisma__LittleLegendClient<$Result.GetResult<Prisma.$LittleLegendPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LittleLegends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LittleLegendFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LittleLegends
     * const littleLegends = await prisma.littleLegend.findMany()
     * 
     * // Get first 10 LittleLegends
     * const littleLegends = await prisma.littleLegend.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const littleLegendWithIdOnly = await prisma.littleLegend.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LittleLegendFindManyArgs>(args?: SelectSubset<T, LittleLegendFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LittleLegendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LittleLegend.
     * @param {LittleLegendCreateArgs} args - Arguments to create a LittleLegend.
     * @example
     * // Create one LittleLegend
     * const LittleLegend = await prisma.littleLegend.create({
     *   data: {
     *     // ... data to create a LittleLegend
     *   }
     * })
     * 
     */
    create<T extends LittleLegendCreateArgs>(args: SelectSubset<T, LittleLegendCreateArgs<ExtArgs>>): Prisma__LittleLegendClient<$Result.GetResult<Prisma.$LittleLegendPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LittleLegends.
     * @param {LittleLegendCreateManyArgs} args - Arguments to create many LittleLegends.
     * @example
     * // Create many LittleLegends
     * const littleLegend = await prisma.littleLegend.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LittleLegendCreateManyArgs>(args?: SelectSubset<T, LittleLegendCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LittleLegend.
     * @param {LittleLegendDeleteArgs} args - Arguments to delete one LittleLegend.
     * @example
     * // Delete one LittleLegend
     * const LittleLegend = await prisma.littleLegend.delete({
     *   where: {
     *     // ... filter to delete one LittleLegend
     *   }
     * })
     * 
     */
    delete<T extends LittleLegendDeleteArgs>(args: SelectSubset<T, LittleLegendDeleteArgs<ExtArgs>>): Prisma__LittleLegendClient<$Result.GetResult<Prisma.$LittleLegendPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LittleLegend.
     * @param {LittleLegendUpdateArgs} args - Arguments to update one LittleLegend.
     * @example
     * // Update one LittleLegend
     * const littleLegend = await prisma.littleLegend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LittleLegendUpdateArgs>(args: SelectSubset<T, LittleLegendUpdateArgs<ExtArgs>>): Prisma__LittleLegendClient<$Result.GetResult<Prisma.$LittleLegendPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LittleLegends.
     * @param {LittleLegendDeleteManyArgs} args - Arguments to filter LittleLegends to delete.
     * @example
     * // Delete a few LittleLegends
     * const { count } = await prisma.littleLegend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LittleLegendDeleteManyArgs>(args?: SelectSubset<T, LittleLegendDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LittleLegends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LittleLegendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LittleLegends
     * const littleLegend = await prisma.littleLegend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LittleLegendUpdateManyArgs>(args: SelectSubset<T, LittleLegendUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LittleLegend.
     * @param {LittleLegendUpsertArgs} args - Arguments to update or create a LittleLegend.
     * @example
     * // Update or create a LittleLegend
     * const littleLegend = await prisma.littleLegend.upsert({
     *   create: {
     *     // ... data to create a LittleLegend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LittleLegend we want to update
     *   }
     * })
     */
    upsert<T extends LittleLegendUpsertArgs>(args: SelectSubset<T, LittleLegendUpsertArgs<ExtArgs>>): Prisma__LittleLegendClient<$Result.GetResult<Prisma.$LittleLegendPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LittleLegends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LittleLegendCountArgs} args - Arguments to filter LittleLegends to count.
     * @example
     * // Count the number of LittleLegends
     * const count = await prisma.littleLegend.count({
     *   where: {
     *     // ... the filter for the LittleLegends we want to count
     *   }
     * })
    **/
    count<T extends LittleLegendCountArgs>(
      args?: Subset<T, LittleLegendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LittleLegendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LittleLegend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LittleLegendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LittleLegendAggregateArgs>(args: Subset<T, LittleLegendAggregateArgs>): Prisma.PrismaPromise<GetLittleLegendAggregateType<T>>

    /**
     * Group by LittleLegend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LittleLegendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LittleLegendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LittleLegendGroupByArgs['orderBy'] }
        : { orderBy?: LittleLegendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LittleLegendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLittleLegendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LittleLegend model
   */
  readonly fields: LittleLegendFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LittleLegend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LittleLegendClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends LittleLegend$accountsArgs<ExtArgs> = {}>(args?: Subset<T, LittleLegend$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LittleLegend model
   */
  interface LittleLegendFieldRefs {
    readonly id: FieldRef<"LittleLegend", 'Int'>
    readonly name: FieldRef<"LittleLegend", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LittleLegend findUnique
   */
  export type LittleLegendFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegend
     */
    select?: LittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LittleLegend
     */
    omit?: LittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LittleLegendInclude<ExtArgs> | null
    /**
     * Filter, which LittleLegend to fetch.
     */
    where: LittleLegendWhereUniqueInput
  }

  /**
   * LittleLegend findUniqueOrThrow
   */
  export type LittleLegendFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegend
     */
    select?: LittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LittleLegend
     */
    omit?: LittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LittleLegendInclude<ExtArgs> | null
    /**
     * Filter, which LittleLegend to fetch.
     */
    where: LittleLegendWhereUniqueInput
  }

  /**
   * LittleLegend findFirst
   */
  export type LittleLegendFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegend
     */
    select?: LittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LittleLegend
     */
    omit?: LittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LittleLegendInclude<ExtArgs> | null
    /**
     * Filter, which LittleLegend to fetch.
     */
    where?: LittleLegendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LittleLegends to fetch.
     */
    orderBy?: LittleLegendOrderByWithRelationInput | LittleLegendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LittleLegends.
     */
    cursor?: LittleLegendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LittleLegends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LittleLegends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LittleLegends.
     */
    distinct?: LittleLegendScalarFieldEnum | LittleLegendScalarFieldEnum[]
  }

  /**
   * LittleLegend findFirstOrThrow
   */
  export type LittleLegendFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegend
     */
    select?: LittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LittleLegend
     */
    omit?: LittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LittleLegendInclude<ExtArgs> | null
    /**
     * Filter, which LittleLegend to fetch.
     */
    where?: LittleLegendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LittleLegends to fetch.
     */
    orderBy?: LittleLegendOrderByWithRelationInput | LittleLegendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LittleLegends.
     */
    cursor?: LittleLegendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LittleLegends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LittleLegends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LittleLegends.
     */
    distinct?: LittleLegendScalarFieldEnum | LittleLegendScalarFieldEnum[]
  }

  /**
   * LittleLegend findMany
   */
  export type LittleLegendFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegend
     */
    select?: LittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LittleLegend
     */
    omit?: LittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LittleLegendInclude<ExtArgs> | null
    /**
     * Filter, which LittleLegends to fetch.
     */
    where?: LittleLegendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LittleLegends to fetch.
     */
    orderBy?: LittleLegendOrderByWithRelationInput | LittleLegendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LittleLegends.
     */
    cursor?: LittleLegendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LittleLegends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LittleLegends.
     */
    skip?: number
    distinct?: LittleLegendScalarFieldEnum | LittleLegendScalarFieldEnum[]
  }

  /**
   * LittleLegend create
   */
  export type LittleLegendCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegend
     */
    select?: LittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LittleLegend
     */
    omit?: LittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LittleLegendInclude<ExtArgs> | null
    /**
     * The data needed to create a LittleLegend.
     */
    data: XOR<LittleLegendCreateInput, LittleLegendUncheckedCreateInput>
  }

  /**
   * LittleLegend createMany
   */
  export type LittleLegendCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LittleLegends.
     */
    data: LittleLegendCreateManyInput | LittleLegendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LittleLegend update
   */
  export type LittleLegendUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegend
     */
    select?: LittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LittleLegend
     */
    omit?: LittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LittleLegendInclude<ExtArgs> | null
    /**
     * The data needed to update a LittleLegend.
     */
    data: XOR<LittleLegendUpdateInput, LittleLegendUncheckedUpdateInput>
    /**
     * Choose, which LittleLegend to update.
     */
    where: LittleLegendWhereUniqueInput
  }

  /**
   * LittleLegend updateMany
   */
  export type LittleLegendUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LittleLegends.
     */
    data: XOR<LittleLegendUpdateManyMutationInput, LittleLegendUncheckedUpdateManyInput>
    /**
     * Filter which LittleLegends to update
     */
    where?: LittleLegendWhereInput
    /**
     * Limit how many LittleLegends to update.
     */
    limit?: number
  }

  /**
   * LittleLegend upsert
   */
  export type LittleLegendUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegend
     */
    select?: LittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LittleLegend
     */
    omit?: LittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LittleLegendInclude<ExtArgs> | null
    /**
     * The filter to search for the LittleLegend to update in case it exists.
     */
    where: LittleLegendWhereUniqueInput
    /**
     * In case the LittleLegend found by the `where` argument doesn't exist, create a new LittleLegend with this data.
     */
    create: XOR<LittleLegendCreateInput, LittleLegendUncheckedCreateInput>
    /**
     * In case the LittleLegend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LittleLegendUpdateInput, LittleLegendUncheckedUpdateInput>
  }

  /**
   * LittleLegend delete
   */
  export type LittleLegendDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegend
     */
    select?: LittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LittleLegend
     */
    omit?: LittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LittleLegendInclude<ExtArgs> | null
    /**
     * Filter which LittleLegend to delete.
     */
    where: LittleLegendWhereUniqueInput
  }

  /**
   * LittleLegend deleteMany
   */
  export type LittleLegendDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LittleLegends to delete
     */
    where?: LittleLegendWhereInput
    /**
     * Limit how many LittleLegends to delete.
     */
    limit?: number
  }

  /**
   * LittleLegend.accounts
   */
  export type LittleLegend$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    where?: AccountLittleLegendWhereInput
    orderBy?: AccountLittleLegendOrderByWithRelationInput | AccountLittleLegendOrderByWithRelationInput[]
    cursor?: AccountLittleLegendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountLittleLegendScalarFieldEnum | AccountLittleLegendScalarFieldEnum[]
  }

  /**
   * LittleLegend without action
   */
  export type LittleLegendDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LittleLegend
     */
    select?: LittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LittleLegend
     */
    omit?: LittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LittleLegendInclude<ExtArgs> | null
  }


  /**
   * Model Boom
   */

  export type AggregateBoom = {
    _count: BoomCountAggregateOutputType | null
    _avg: BoomAvgAggregateOutputType | null
    _sum: BoomSumAggregateOutputType | null
    _min: BoomMinAggregateOutputType | null
    _max: BoomMaxAggregateOutputType | null
  }

  export type BoomAvgAggregateOutputType = {
    id: number | null
  }

  export type BoomSumAggregateOutputType = {
    id: number | null
  }

  export type BoomMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type BoomMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type BoomCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type BoomAvgAggregateInputType = {
    id?: true
  }

  export type BoomSumAggregateInputType = {
    id?: true
  }

  export type BoomMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type BoomMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type BoomCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type BoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boom to aggregate.
     */
    where?: BoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Booms to fetch.
     */
    orderBy?: BoomOrderByWithRelationInput | BoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Booms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Booms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Booms
    **/
    _count?: true | BoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoomMaxAggregateInputType
  }

  export type GetBoomAggregateType<T extends BoomAggregateArgs> = {
        [P in keyof T & keyof AggregateBoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoom[P]>
      : GetScalarType<T[P], AggregateBoom[P]>
  }




  export type BoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoomWhereInput
    orderBy?: BoomOrderByWithAggregationInput | BoomOrderByWithAggregationInput[]
    by: BoomScalarFieldEnum[] | BoomScalarFieldEnum
    having?: BoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoomCountAggregateInputType | true
    _avg?: BoomAvgAggregateInputType
    _sum?: BoomSumAggregateInputType
    _min?: BoomMinAggregateInputType
    _max?: BoomMaxAggregateInputType
  }

  export type BoomGroupByOutputType = {
    id: number
    name: string
    _count: BoomCountAggregateOutputType | null
    _avg: BoomAvgAggregateOutputType | null
    _sum: BoomSumAggregateOutputType | null
    _min: BoomMinAggregateOutputType | null
    _max: BoomMaxAggregateOutputType | null
  }

  type GetBoomGroupByPayload<T extends BoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoomGroupByOutputType[P]>
            : GetScalarType<T[P], BoomGroupByOutputType[P]>
        }
      >
    >


  export type BoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accounts?: boolean | Boom$accountsArgs<ExtArgs>
    _count?: boolean | BoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boom"]>



  export type BoomSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type BoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["boom"]>
  export type BoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | Boom$accountsArgs<ExtArgs>
    _count?: boolean | BoomCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Boom"
    objects: {
      accounts: Prisma.$AccountBoomPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["boom"]>
    composites: {}
  }

  type BoomGetPayload<S extends boolean | null | undefined | BoomDefaultArgs> = $Result.GetResult<Prisma.$BoomPayload, S>

  type BoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BoomCountAggregateInputType | true
    }

  export interface BoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Boom'], meta: { name: 'Boom' } }
    /**
     * Find zero or one Boom that matches the filter.
     * @param {BoomFindUniqueArgs} args - Arguments to find a Boom
     * @example
     * // Get one Boom
     * const boom = await prisma.boom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BoomFindUniqueArgs>(args: SelectSubset<T, BoomFindUniqueArgs<ExtArgs>>): Prisma__BoomClient<$Result.GetResult<Prisma.$BoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Boom that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BoomFindUniqueOrThrowArgs} args - Arguments to find a Boom
     * @example
     * // Get one Boom
     * const boom = await prisma.boom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BoomFindUniqueOrThrowArgs>(args: SelectSubset<T, BoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BoomClient<$Result.GetResult<Prisma.$BoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Boom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoomFindFirstArgs} args - Arguments to find a Boom
     * @example
     * // Get one Boom
     * const boom = await prisma.boom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BoomFindFirstArgs>(args?: SelectSubset<T, BoomFindFirstArgs<ExtArgs>>): Prisma__BoomClient<$Result.GetResult<Prisma.$BoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Boom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoomFindFirstOrThrowArgs} args - Arguments to find a Boom
     * @example
     * // Get one Boom
     * const boom = await prisma.boom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BoomFindFirstOrThrowArgs>(args?: SelectSubset<T, BoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__BoomClient<$Result.GetResult<Prisma.$BoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Booms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Booms
     * const booms = await prisma.boom.findMany()
     * 
     * // Get first 10 Booms
     * const booms = await prisma.boom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boomWithIdOnly = await prisma.boom.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BoomFindManyArgs>(args?: SelectSubset<T, BoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Boom.
     * @param {BoomCreateArgs} args - Arguments to create a Boom.
     * @example
     * // Create one Boom
     * const Boom = await prisma.boom.create({
     *   data: {
     *     // ... data to create a Boom
     *   }
     * })
     * 
     */
    create<T extends BoomCreateArgs>(args: SelectSubset<T, BoomCreateArgs<ExtArgs>>): Prisma__BoomClient<$Result.GetResult<Prisma.$BoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Booms.
     * @param {BoomCreateManyArgs} args - Arguments to create many Booms.
     * @example
     * // Create many Booms
     * const boom = await prisma.boom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BoomCreateManyArgs>(args?: SelectSubset<T, BoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Boom.
     * @param {BoomDeleteArgs} args - Arguments to delete one Boom.
     * @example
     * // Delete one Boom
     * const Boom = await prisma.boom.delete({
     *   where: {
     *     // ... filter to delete one Boom
     *   }
     * })
     * 
     */
    delete<T extends BoomDeleteArgs>(args: SelectSubset<T, BoomDeleteArgs<ExtArgs>>): Prisma__BoomClient<$Result.GetResult<Prisma.$BoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Boom.
     * @param {BoomUpdateArgs} args - Arguments to update one Boom.
     * @example
     * // Update one Boom
     * const boom = await prisma.boom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BoomUpdateArgs>(args: SelectSubset<T, BoomUpdateArgs<ExtArgs>>): Prisma__BoomClient<$Result.GetResult<Prisma.$BoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Booms.
     * @param {BoomDeleteManyArgs} args - Arguments to filter Booms to delete.
     * @example
     * // Delete a few Booms
     * const { count } = await prisma.boom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BoomDeleteManyArgs>(args?: SelectSubset<T, BoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Booms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Booms
     * const boom = await prisma.boom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BoomUpdateManyArgs>(args: SelectSubset<T, BoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Boom.
     * @param {BoomUpsertArgs} args - Arguments to update or create a Boom.
     * @example
     * // Update or create a Boom
     * const boom = await prisma.boom.upsert({
     *   create: {
     *     // ... data to create a Boom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Boom we want to update
     *   }
     * })
     */
    upsert<T extends BoomUpsertArgs>(args: SelectSubset<T, BoomUpsertArgs<ExtArgs>>): Prisma__BoomClient<$Result.GetResult<Prisma.$BoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Booms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoomCountArgs} args - Arguments to filter Booms to count.
     * @example
     * // Count the number of Booms
     * const count = await prisma.boom.count({
     *   where: {
     *     // ... the filter for the Booms we want to count
     *   }
     * })
    **/
    count<T extends BoomCountArgs>(
      args?: Subset<T, BoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Boom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoomAggregateArgs>(args: Subset<T, BoomAggregateArgs>): Prisma.PrismaPromise<GetBoomAggregateType<T>>

    /**
     * Group by Boom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoomGroupByArgs['orderBy'] }
        : { orderBy?: BoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Boom model
   */
  readonly fields: BoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Boom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends Boom$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Boom$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Boom model
   */
  interface BoomFieldRefs {
    readonly id: FieldRef<"Boom", 'Int'>
    readonly name: FieldRef<"Boom", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Boom findUnique
   */
  export type BoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boom
     */
    select?: BoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Boom
     */
    omit?: BoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoomInclude<ExtArgs> | null
    /**
     * Filter, which Boom to fetch.
     */
    where: BoomWhereUniqueInput
  }

  /**
   * Boom findUniqueOrThrow
   */
  export type BoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boom
     */
    select?: BoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Boom
     */
    omit?: BoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoomInclude<ExtArgs> | null
    /**
     * Filter, which Boom to fetch.
     */
    where: BoomWhereUniqueInput
  }

  /**
   * Boom findFirst
   */
  export type BoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boom
     */
    select?: BoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Boom
     */
    omit?: BoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoomInclude<ExtArgs> | null
    /**
     * Filter, which Boom to fetch.
     */
    where?: BoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Booms to fetch.
     */
    orderBy?: BoomOrderByWithRelationInput | BoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Booms.
     */
    cursor?: BoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Booms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Booms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Booms.
     */
    distinct?: BoomScalarFieldEnum | BoomScalarFieldEnum[]
  }

  /**
   * Boom findFirstOrThrow
   */
  export type BoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boom
     */
    select?: BoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Boom
     */
    omit?: BoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoomInclude<ExtArgs> | null
    /**
     * Filter, which Boom to fetch.
     */
    where?: BoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Booms to fetch.
     */
    orderBy?: BoomOrderByWithRelationInput | BoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Booms.
     */
    cursor?: BoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Booms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Booms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Booms.
     */
    distinct?: BoomScalarFieldEnum | BoomScalarFieldEnum[]
  }

  /**
   * Boom findMany
   */
  export type BoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boom
     */
    select?: BoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Boom
     */
    omit?: BoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoomInclude<ExtArgs> | null
    /**
     * Filter, which Booms to fetch.
     */
    where?: BoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Booms to fetch.
     */
    orderBy?: BoomOrderByWithRelationInput | BoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Booms.
     */
    cursor?: BoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Booms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Booms.
     */
    skip?: number
    distinct?: BoomScalarFieldEnum | BoomScalarFieldEnum[]
  }

  /**
   * Boom create
   */
  export type BoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boom
     */
    select?: BoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Boom
     */
    omit?: BoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoomInclude<ExtArgs> | null
    /**
     * The data needed to create a Boom.
     */
    data: XOR<BoomCreateInput, BoomUncheckedCreateInput>
  }

  /**
   * Boom createMany
   */
  export type BoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Booms.
     */
    data: BoomCreateManyInput | BoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Boom update
   */
  export type BoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boom
     */
    select?: BoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Boom
     */
    omit?: BoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoomInclude<ExtArgs> | null
    /**
     * The data needed to update a Boom.
     */
    data: XOR<BoomUpdateInput, BoomUncheckedUpdateInput>
    /**
     * Choose, which Boom to update.
     */
    where: BoomWhereUniqueInput
  }

  /**
   * Boom updateMany
   */
  export type BoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Booms.
     */
    data: XOR<BoomUpdateManyMutationInput, BoomUncheckedUpdateManyInput>
    /**
     * Filter which Booms to update
     */
    where?: BoomWhereInput
    /**
     * Limit how many Booms to update.
     */
    limit?: number
  }

  /**
   * Boom upsert
   */
  export type BoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boom
     */
    select?: BoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Boom
     */
    omit?: BoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoomInclude<ExtArgs> | null
    /**
     * The filter to search for the Boom to update in case it exists.
     */
    where: BoomWhereUniqueInput
    /**
     * In case the Boom found by the `where` argument doesn't exist, create a new Boom with this data.
     */
    create: XOR<BoomCreateInput, BoomUncheckedCreateInput>
    /**
     * In case the Boom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoomUpdateInput, BoomUncheckedUpdateInput>
  }

  /**
   * Boom delete
   */
  export type BoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boom
     */
    select?: BoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Boom
     */
    omit?: BoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoomInclude<ExtArgs> | null
    /**
     * Filter which Boom to delete.
     */
    where: BoomWhereUniqueInput
  }

  /**
   * Boom deleteMany
   */
  export type BoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Booms to delete
     */
    where?: BoomWhereInput
    /**
     * Limit how many Booms to delete.
     */
    limit?: number
  }

  /**
   * Boom.accounts
   */
  export type Boom$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    where?: AccountBoomWhereInput
    orderBy?: AccountBoomOrderByWithRelationInput | AccountBoomOrderByWithRelationInput[]
    cursor?: AccountBoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountBoomScalarFieldEnum | AccountBoomScalarFieldEnum[]
  }

  /**
   * Boom without action
   */
  export type BoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boom
     */
    select?: BoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Boom
     */
    omit?: BoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoomInclude<ExtArgs> | null
  }


  /**
   * Model Arena
   */

  export type AggregateArena = {
    _count: ArenaCountAggregateOutputType | null
    _avg: ArenaAvgAggregateOutputType | null
    _sum: ArenaSumAggregateOutputType | null
    _min: ArenaMinAggregateOutputType | null
    _max: ArenaMaxAggregateOutputType | null
  }

  export type ArenaAvgAggregateOutputType = {
    id: number | null
  }

  export type ArenaSumAggregateOutputType = {
    id: number | null
  }

  export type ArenaMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ArenaMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ArenaCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ArenaAvgAggregateInputType = {
    id?: true
  }

  export type ArenaSumAggregateInputType = {
    id?: true
  }

  export type ArenaMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ArenaMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ArenaCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ArenaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Arena to aggregate.
     */
    where?: ArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arenas to fetch.
     */
    orderBy?: ArenaOrderByWithRelationInput | ArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Arenas
    **/
    _count?: true | ArenaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArenaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArenaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArenaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArenaMaxAggregateInputType
  }

  export type GetArenaAggregateType<T extends ArenaAggregateArgs> = {
        [P in keyof T & keyof AggregateArena]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArena[P]>
      : GetScalarType<T[P], AggregateArena[P]>
  }




  export type ArenaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArenaWhereInput
    orderBy?: ArenaOrderByWithAggregationInput | ArenaOrderByWithAggregationInput[]
    by: ArenaScalarFieldEnum[] | ArenaScalarFieldEnum
    having?: ArenaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArenaCountAggregateInputType | true
    _avg?: ArenaAvgAggregateInputType
    _sum?: ArenaSumAggregateInputType
    _min?: ArenaMinAggregateInputType
    _max?: ArenaMaxAggregateInputType
  }

  export type ArenaGroupByOutputType = {
    id: number
    name: string
    _count: ArenaCountAggregateOutputType | null
    _avg: ArenaAvgAggregateOutputType | null
    _sum: ArenaSumAggregateOutputType | null
    _min: ArenaMinAggregateOutputType | null
    _max: ArenaMaxAggregateOutputType | null
  }

  type GetArenaGroupByPayload<T extends ArenaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArenaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArenaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArenaGroupByOutputType[P]>
            : GetScalarType<T[P], ArenaGroupByOutputType[P]>
        }
      >
    >


  export type ArenaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accounts?: boolean | Arena$accountsArgs<ExtArgs>
    _count?: boolean | ArenaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["arena"]>



  export type ArenaSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ArenaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["arena"]>
  export type ArenaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | Arena$accountsArgs<ExtArgs>
    _count?: boolean | ArenaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ArenaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Arena"
    objects: {
      accounts: Prisma.$AccountArenaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["arena"]>
    composites: {}
  }

  type ArenaGetPayload<S extends boolean | null | undefined | ArenaDefaultArgs> = $Result.GetResult<Prisma.$ArenaPayload, S>

  type ArenaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArenaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArenaCountAggregateInputType | true
    }

  export interface ArenaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Arena'], meta: { name: 'Arena' } }
    /**
     * Find zero or one Arena that matches the filter.
     * @param {ArenaFindUniqueArgs} args - Arguments to find a Arena
     * @example
     * // Get one Arena
     * const arena = await prisma.arena.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArenaFindUniqueArgs>(args: SelectSubset<T, ArenaFindUniqueArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Arena that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArenaFindUniqueOrThrowArgs} args - Arguments to find a Arena
     * @example
     * // Get one Arena
     * const arena = await prisma.arena.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArenaFindUniqueOrThrowArgs>(args: SelectSubset<T, ArenaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Arena that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaFindFirstArgs} args - Arguments to find a Arena
     * @example
     * // Get one Arena
     * const arena = await prisma.arena.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArenaFindFirstArgs>(args?: SelectSubset<T, ArenaFindFirstArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Arena that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaFindFirstOrThrowArgs} args - Arguments to find a Arena
     * @example
     * // Get one Arena
     * const arena = await prisma.arena.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArenaFindFirstOrThrowArgs>(args?: SelectSubset<T, ArenaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Arenas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Arenas
     * const arenas = await prisma.arena.findMany()
     * 
     * // Get first 10 Arenas
     * const arenas = await prisma.arena.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const arenaWithIdOnly = await prisma.arena.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArenaFindManyArgs>(args?: SelectSubset<T, ArenaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Arena.
     * @param {ArenaCreateArgs} args - Arguments to create a Arena.
     * @example
     * // Create one Arena
     * const Arena = await prisma.arena.create({
     *   data: {
     *     // ... data to create a Arena
     *   }
     * })
     * 
     */
    create<T extends ArenaCreateArgs>(args: SelectSubset<T, ArenaCreateArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Arenas.
     * @param {ArenaCreateManyArgs} args - Arguments to create many Arenas.
     * @example
     * // Create many Arenas
     * const arena = await prisma.arena.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArenaCreateManyArgs>(args?: SelectSubset<T, ArenaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Arena.
     * @param {ArenaDeleteArgs} args - Arguments to delete one Arena.
     * @example
     * // Delete one Arena
     * const Arena = await prisma.arena.delete({
     *   where: {
     *     // ... filter to delete one Arena
     *   }
     * })
     * 
     */
    delete<T extends ArenaDeleteArgs>(args: SelectSubset<T, ArenaDeleteArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Arena.
     * @param {ArenaUpdateArgs} args - Arguments to update one Arena.
     * @example
     * // Update one Arena
     * const arena = await prisma.arena.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArenaUpdateArgs>(args: SelectSubset<T, ArenaUpdateArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Arenas.
     * @param {ArenaDeleteManyArgs} args - Arguments to filter Arenas to delete.
     * @example
     * // Delete a few Arenas
     * const { count } = await prisma.arena.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArenaDeleteManyArgs>(args?: SelectSubset<T, ArenaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Arenas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Arenas
     * const arena = await prisma.arena.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArenaUpdateManyArgs>(args: SelectSubset<T, ArenaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Arena.
     * @param {ArenaUpsertArgs} args - Arguments to update or create a Arena.
     * @example
     * // Update or create a Arena
     * const arena = await prisma.arena.upsert({
     *   create: {
     *     // ... data to create a Arena
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Arena we want to update
     *   }
     * })
     */
    upsert<T extends ArenaUpsertArgs>(args: SelectSubset<T, ArenaUpsertArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Arenas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaCountArgs} args - Arguments to filter Arenas to count.
     * @example
     * // Count the number of Arenas
     * const count = await prisma.arena.count({
     *   where: {
     *     // ... the filter for the Arenas we want to count
     *   }
     * })
    **/
    count<T extends ArenaCountArgs>(
      args?: Subset<T, ArenaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArenaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Arena.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArenaAggregateArgs>(args: Subset<T, ArenaAggregateArgs>): Prisma.PrismaPromise<GetArenaAggregateType<T>>

    /**
     * Group by Arena.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArenaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArenaGroupByArgs['orderBy'] }
        : { orderBy?: ArenaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArenaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArenaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Arena model
   */
  readonly fields: ArenaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Arena.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArenaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends Arena$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Arena$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Arena model
   */
  interface ArenaFieldRefs {
    readonly id: FieldRef<"Arena", 'Int'>
    readonly name: FieldRef<"Arena", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Arena findUnique
   */
  export type ArenaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter, which Arena to fetch.
     */
    where: ArenaWhereUniqueInput
  }

  /**
   * Arena findUniqueOrThrow
   */
  export type ArenaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter, which Arena to fetch.
     */
    where: ArenaWhereUniqueInput
  }

  /**
   * Arena findFirst
   */
  export type ArenaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter, which Arena to fetch.
     */
    where?: ArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arenas to fetch.
     */
    orderBy?: ArenaOrderByWithRelationInput | ArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Arenas.
     */
    cursor?: ArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Arenas.
     */
    distinct?: ArenaScalarFieldEnum | ArenaScalarFieldEnum[]
  }

  /**
   * Arena findFirstOrThrow
   */
  export type ArenaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter, which Arena to fetch.
     */
    where?: ArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arenas to fetch.
     */
    orderBy?: ArenaOrderByWithRelationInput | ArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Arenas.
     */
    cursor?: ArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Arenas.
     */
    distinct?: ArenaScalarFieldEnum | ArenaScalarFieldEnum[]
  }

  /**
   * Arena findMany
   */
  export type ArenaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter, which Arenas to fetch.
     */
    where?: ArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arenas to fetch.
     */
    orderBy?: ArenaOrderByWithRelationInput | ArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Arenas.
     */
    cursor?: ArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arenas.
     */
    skip?: number
    distinct?: ArenaScalarFieldEnum | ArenaScalarFieldEnum[]
  }

  /**
   * Arena create
   */
  export type ArenaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * The data needed to create a Arena.
     */
    data: XOR<ArenaCreateInput, ArenaUncheckedCreateInput>
  }

  /**
   * Arena createMany
   */
  export type ArenaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Arenas.
     */
    data: ArenaCreateManyInput | ArenaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Arena update
   */
  export type ArenaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * The data needed to update a Arena.
     */
    data: XOR<ArenaUpdateInput, ArenaUncheckedUpdateInput>
    /**
     * Choose, which Arena to update.
     */
    where: ArenaWhereUniqueInput
  }

  /**
   * Arena updateMany
   */
  export type ArenaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Arenas.
     */
    data: XOR<ArenaUpdateManyMutationInput, ArenaUncheckedUpdateManyInput>
    /**
     * Filter which Arenas to update
     */
    where?: ArenaWhereInput
    /**
     * Limit how many Arenas to update.
     */
    limit?: number
  }

  /**
   * Arena upsert
   */
  export type ArenaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * The filter to search for the Arena to update in case it exists.
     */
    where: ArenaWhereUniqueInput
    /**
     * In case the Arena found by the `where` argument doesn't exist, create a new Arena with this data.
     */
    create: XOR<ArenaCreateInput, ArenaUncheckedCreateInput>
    /**
     * In case the Arena was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArenaUpdateInput, ArenaUncheckedUpdateInput>
  }

  /**
   * Arena delete
   */
  export type ArenaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter which Arena to delete.
     */
    where: ArenaWhereUniqueInput
  }

  /**
   * Arena deleteMany
   */
  export type ArenaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Arenas to delete
     */
    where?: ArenaWhereInput
    /**
     * Limit how many Arenas to delete.
     */
    limit?: number
  }

  /**
   * Arena.accounts
   */
  export type Arena$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    where?: AccountArenaWhereInput
    orderBy?: AccountArenaOrderByWithRelationInput | AccountArenaOrderByWithRelationInput[]
    cursor?: AccountArenaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountArenaScalarFieldEnum | AccountArenaScalarFieldEnum[]
  }

  /**
   * Arena without action
   */
  export type ArenaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
  }


  /**
   * Model AccountChampion
   */

  export type AggregateAccountChampion = {
    _count: AccountChampionCountAggregateOutputType | null
    _avg: AccountChampionAvgAggregateOutputType | null
    _sum: AccountChampionSumAggregateOutputType | null
    _min: AccountChampionMinAggregateOutputType | null
    _max: AccountChampionMaxAggregateOutputType | null
  }

  export type AccountChampionAvgAggregateOutputType = {
    accountId: number | null
    championId: number | null
  }

  export type AccountChampionSumAggregateOutputType = {
    accountId: number | null
    championId: number | null
  }

  export type AccountChampionMinAggregateOutputType = {
    accountId: number | null
    championId: number | null
  }

  export type AccountChampionMaxAggregateOutputType = {
    accountId: number | null
    championId: number | null
  }

  export type AccountChampionCountAggregateOutputType = {
    accountId: number
    championId: number
    _all: number
  }


  export type AccountChampionAvgAggregateInputType = {
    accountId?: true
    championId?: true
  }

  export type AccountChampionSumAggregateInputType = {
    accountId?: true
    championId?: true
  }

  export type AccountChampionMinAggregateInputType = {
    accountId?: true
    championId?: true
  }

  export type AccountChampionMaxAggregateInputType = {
    accountId?: true
    championId?: true
  }

  export type AccountChampionCountAggregateInputType = {
    accountId?: true
    championId?: true
    _all?: true
  }

  export type AccountChampionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountChampion to aggregate.
     */
    where?: AccountChampionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountChampions to fetch.
     */
    orderBy?: AccountChampionOrderByWithRelationInput | AccountChampionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountChampionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountChampions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountChampions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountChampions
    **/
    _count?: true | AccountChampionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountChampionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountChampionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountChampionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountChampionMaxAggregateInputType
  }

  export type GetAccountChampionAggregateType<T extends AccountChampionAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountChampion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountChampion[P]>
      : GetScalarType<T[P], AggregateAccountChampion[P]>
  }




  export type AccountChampionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountChampionWhereInput
    orderBy?: AccountChampionOrderByWithAggregationInput | AccountChampionOrderByWithAggregationInput[]
    by: AccountChampionScalarFieldEnum[] | AccountChampionScalarFieldEnum
    having?: AccountChampionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountChampionCountAggregateInputType | true
    _avg?: AccountChampionAvgAggregateInputType
    _sum?: AccountChampionSumAggregateInputType
    _min?: AccountChampionMinAggregateInputType
    _max?: AccountChampionMaxAggregateInputType
  }

  export type AccountChampionGroupByOutputType = {
    accountId: number
    championId: number
    _count: AccountChampionCountAggregateOutputType | null
    _avg: AccountChampionAvgAggregateOutputType | null
    _sum: AccountChampionSumAggregateOutputType | null
    _min: AccountChampionMinAggregateOutputType | null
    _max: AccountChampionMaxAggregateOutputType | null
  }

  type GetAccountChampionGroupByPayload<T extends AccountChampionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountChampionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountChampionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountChampionGroupByOutputType[P]>
            : GetScalarType<T[P], AccountChampionGroupByOutputType[P]>
        }
      >
    >


  export type AccountChampionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountId?: boolean
    championId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    champion?: boolean | ChampionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountChampion"]>



  export type AccountChampionSelectScalar = {
    accountId?: boolean
    championId?: boolean
  }

  export type AccountChampionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"accountId" | "championId", ExtArgs["result"]["accountChampion"]>
  export type AccountChampionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    champion?: boolean | ChampionDefaultArgs<ExtArgs>
  }

  export type $AccountChampionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountChampion"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      champion: Prisma.$ChampionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      accountId: number
      championId: number
    }, ExtArgs["result"]["accountChampion"]>
    composites: {}
  }

  type AccountChampionGetPayload<S extends boolean | null | undefined | AccountChampionDefaultArgs> = $Result.GetResult<Prisma.$AccountChampionPayload, S>

  type AccountChampionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountChampionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountChampionCountAggregateInputType | true
    }

  export interface AccountChampionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountChampion'], meta: { name: 'AccountChampion' } }
    /**
     * Find zero or one AccountChampion that matches the filter.
     * @param {AccountChampionFindUniqueArgs} args - Arguments to find a AccountChampion
     * @example
     * // Get one AccountChampion
     * const accountChampion = await prisma.accountChampion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountChampionFindUniqueArgs>(args: SelectSubset<T, AccountChampionFindUniqueArgs<ExtArgs>>): Prisma__AccountChampionClient<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountChampion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountChampionFindUniqueOrThrowArgs} args - Arguments to find a AccountChampion
     * @example
     * // Get one AccountChampion
     * const accountChampion = await prisma.accountChampion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountChampionFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountChampionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountChampionClient<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountChampion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChampionFindFirstArgs} args - Arguments to find a AccountChampion
     * @example
     * // Get one AccountChampion
     * const accountChampion = await prisma.accountChampion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountChampionFindFirstArgs>(args?: SelectSubset<T, AccountChampionFindFirstArgs<ExtArgs>>): Prisma__AccountChampionClient<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountChampion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChampionFindFirstOrThrowArgs} args - Arguments to find a AccountChampion
     * @example
     * // Get one AccountChampion
     * const accountChampion = await prisma.accountChampion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountChampionFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountChampionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountChampionClient<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountChampions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChampionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountChampions
     * const accountChampions = await prisma.accountChampion.findMany()
     * 
     * // Get first 10 AccountChampions
     * const accountChampions = await prisma.accountChampion.findMany({ take: 10 })
     * 
     * // Only select the `accountId`
     * const accountChampionWithAccountIdOnly = await prisma.accountChampion.findMany({ select: { accountId: true } })
     * 
     */
    findMany<T extends AccountChampionFindManyArgs>(args?: SelectSubset<T, AccountChampionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountChampion.
     * @param {AccountChampionCreateArgs} args - Arguments to create a AccountChampion.
     * @example
     * // Create one AccountChampion
     * const AccountChampion = await prisma.accountChampion.create({
     *   data: {
     *     // ... data to create a AccountChampion
     *   }
     * })
     * 
     */
    create<T extends AccountChampionCreateArgs>(args: SelectSubset<T, AccountChampionCreateArgs<ExtArgs>>): Prisma__AccountChampionClient<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountChampions.
     * @param {AccountChampionCreateManyArgs} args - Arguments to create many AccountChampions.
     * @example
     * // Create many AccountChampions
     * const accountChampion = await prisma.accountChampion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountChampionCreateManyArgs>(args?: SelectSubset<T, AccountChampionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountChampion.
     * @param {AccountChampionDeleteArgs} args - Arguments to delete one AccountChampion.
     * @example
     * // Delete one AccountChampion
     * const AccountChampion = await prisma.accountChampion.delete({
     *   where: {
     *     // ... filter to delete one AccountChampion
     *   }
     * })
     * 
     */
    delete<T extends AccountChampionDeleteArgs>(args: SelectSubset<T, AccountChampionDeleteArgs<ExtArgs>>): Prisma__AccountChampionClient<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountChampion.
     * @param {AccountChampionUpdateArgs} args - Arguments to update one AccountChampion.
     * @example
     * // Update one AccountChampion
     * const accountChampion = await prisma.accountChampion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountChampionUpdateArgs>(args: SelectSubset<T, AccountChampionUpdateArgs<ExtArgs>>): Prisma__AccountChampionClient<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountChampions.
     * @param {AccountChampionDeleteManyArgs} args - Arguments to filter AccountChampions to delete.
     * @example
     * // Delete a few AccountChampions
     * const { count } = await prisma.accountChampion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountChampionDeleteManyArgs>(args?: SelectSubset<T, AccountChampionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountChampions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChampionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountChampions
     * const accountChampion = await prisma.accountChampion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountChampionUpdateManyArgs>(args: SelectSubset<T, AccountChampionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountChampion.
     * @param {AccountChampionUpsertArgs} args - Arguments to update or create a AccountChampion.
     * @example
     * // Update or create a AccountChampion
     * const accountChampion = await prisma.accountChampion.upsert({
     *   create: {
     *     // ... data to create a AccountChampion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountChampion we want to update
     *   }
     * })
     */
    upsert<T extends AccountChampionUpsertArgs>(args: SelectSubset<T, AccountChampionUpsertArgs<ExtArgs>>): Prisma__AccountChampionClient<$Result.GetResult<Prisma.$AccountChampionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountChampions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChampionCountArgs} args - Arguments to filter AccountChampions to count.
     * @example
     * // Count the number of AccountChampions
     * const count = await prisma.accountChampion.count({
     *   where: {
     *     // ... the filter for the AccountChampions we want to count
     *   }
     * })
    **/
    count<T extends AccountChampionCountArgs>(
      args?: Subset<T, AccountChampionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountChampionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountChampion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChampionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountChampionAggregateArgs>(args: Subset<T, AccountChampionAggregateArgs>): Prisma.PrismaPromise<GetAccountChampionAggregateType<T>>

    /**
     * Group by AccountChampion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChampionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountChampionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountChampionGroupByArgs['orderBy'] }
        : { orderBy?: AccountChampionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountChampionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountChampionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountChampion model
   */
  readonly fields: AccountChampionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountChampion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountChampionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    champion<T extends ChampionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChampionDefaultArgs<ExtArgs>>): Prisma__ChampionClient<$Result.GetResult<Prisma.$ChampionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountChampion model
   */
  interface AccountChampionFieldRefs {
    readonly accountId: FieldRef<"AccountChampion", 'Int'>
    readonly championId: FieldRef<"AccountChampion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AccountChampion findUnique
   */
  export type AccountChampionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    /**
     * Filter, which AccountChampion to fetch.
     */
    where: AccountChampionWhereUniqueInput
  }

  /**
   * AccountChampion findUniqueOrThrow
   */
  export type AccountChampionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    /**
     * Filter, which AccountChampion to fetch.
     */
    where: AccountChampionWhereUniqueInput
  }

  /**
   * AccountChampion findFirst
   */
  export type AccountChampionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    /**
     * Filter, which AccountChampion to fetch.
     */
    where?: AccountChampionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountChampions to fetch.
     */
    orderBy?: AccountChampionOrderByWithRelationInput | AccountChampionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountChampions.
     */
    cursor?: AccountChampionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountChampions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountChampions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountChampions.
     */
    distinct?: AccountChampionScalarFieldEnum | AccountChampionScalarFieldEnum[]
  }

  /**
   * AccountChampion findFirstOrThrow
   */
  export type AccountChampionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    /**
     * Filter, which AccountChampion to fetch.
     */
    where?: AccountChampionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountChampions to fetch.
     */
    orderBy?: AccountChampionOrderByWithRelationInput | AccountChampionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountChampions.
     */
    cursor?: AccountChampionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountChampions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountChampions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountChampions.
     */
    distinct?: AccountChampionScalarFieldEnum | AccountChampionScalarFieldEnum[]
  }

  /**
   * AccountChampion findMany
   */
  export type AccountChampionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    /**
     * Filter, which AccountChampions to fetch.
     */
    where?: AccountChampionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountChampions to fetch.
     */
    orderBy?: AccountChampionOrderByWithRelationInput | AccountChampionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountChampions.
     */
    cursor?: AccountChampionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountChampions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountChampions.
     */
    skip?: number
    distinct?: AccountChampionScalarFieldEnum | AccountChampionScalarFieldEnum[]
  }

  /**
   * AccountChampion create
   */
  export type AccountChampionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountChampion.
     */
    data: XOR<AccountChampionCreateInput, AccountChampionUncheckedCreateInput>
  }

  /**
   * AccountChampion createMany
   */
  export type AccountChampionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountChampions.
     */
    data: AccountChampionCreateManyInput | AccountChampionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountChampion update
   */
  export type AccountChampionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountChampion.
     */
    data: XOR<AccountChampionUpdateInput, AccountChampionUncheckedUpdateInput>
    /**
     * Choose, which AccountChampion to update.
     */
    where: AccountChampionWhereUniqueInput
  }

  /**
   * AccountChampion updateMany
   */
  export type AccountChampionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountChampions.
     */
    data: XOR<AccountChampionUpdateManyMutationInput, AccountChampionUncheckedUpdateManyInput>
    /**
     * Filter which AccountChampions to update
     */
    where?: AccountChampionWhereInput
    /**
     * Limit how many AccountChampions to update.
     */
    limit?: number
  }

  /**
   * AccountChampion upsert
   */
  export type AccountChampionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountChampion to update in case it exists.
     */
    where: AccountChampionWhereUniqueInput
    /**
     * In case the AccountChampion found by the `where` argument doesn't exist, create a new AccountChampion with this data.
     */
    create: XOR<AccountChampionCreateInput, AccountChampionUncheckedCreateInput>
    /**
     * In case the AccountChampion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountChampionUpdateInput, AccountChampionUncheckedUpdateInput>
  }

  /**
   * AccountChampion delete
   */
  export type AccountChampionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
    /**
     * Filter which AccountChampion to delete.
     */
    where: AccountChampionWhereUniqueInput
  }

  /**
   * AccountChampion deleteMany
   */
  export type AccountChampionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountChampions to delete
     */
    where?: AccountChampionWhereInput
    /**
     * Limit how many AccountChampions to delete.
     */
    limit?: number
  }

  /**
   * AccountChampion without action
   */
  export type AccountChampionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChampion
     */
    select?: AccountChampionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChampion
     */
    omit?: AccountChampionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChampionInclude<ExtArgs> | null
  }


  /**
   * Model AccountSkin
   */

  export type AggregateAccountSkin = {
    _count: AccountSkinCountAggregateOutputType | null
    _avg: AccountSkinAvgAggregateOutputType | null
    _sum: AccountSkinSumAggregateOutputType | null
    _min: AccountSkinMinAggregateOutputType | null
    _max: AccountSkinMaxAggregateOutputType | null
  }

  export type AccountSkinAvgAggregateOutputType = {
    accountId: number | null
    skinId: number | null
  }

  export type AccountSkinSumAggregateOutputType = {
    accountId: number | null
    skinId: number | null
  }

  export type AccountSkinMinAggregateOutputType = {
    accountId: number | null
    skinId: number | null
  }

  export type AccountSkinMaxAggregateOutputType = {
    accountId: number | null
    skinId: number | null
  }

  export type AccountSkinCountAggregateOutputType = {
    accountId: number
    skinId: number
    _all: number
  }


  export type AccountSkinAvgAggregateInputType = {
    accountId?: true
    skinId?: true
  }

  export type AccountSkinSumAggregateInputType = {
    accountId?: true
    skinId?: true
  }

  export type AccountSkinMinAggregateInputType = {
    accountId?: true
    skinId?: true
  }

  export type AccountSkinMaxAggregateInputType = {
    accountId?: true
    skinId?: true
  }

  export type AccountSkinCountAggregateInputType = {
    accountId?: true
    skinId?: true
    _all?: true
  }

  export type AccountSkinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountSkin to aggregate.
     */
    where?: AccountSkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountSkins to fetch.
     */
    orderBy?: AccountSkinOrderByWithRelationInput | AccountSkinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountSkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountSkins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountSkins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountSkins
    **/
    _count?: true | AccountSkinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountSkinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSkinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountSkinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountSkinMaxAggregateInputType
  }

  export type GetAccountSkinAggregateType<T extends AccountSkinAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountSkin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountSkin[P]>
      : GetScalarType<T[P], AggregateAccountSkin[P]>
  }




  export type AccountSkinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountSkinWhereInput
    orderBy?: AccountSkinOrderByWithAggregationInput | AccountSkinOrderByWithAggregationInput[]
    by: AccountSkinScalarFieldEnum[] | AccountSkinScalarFieldEnum
    having?: AccountSkinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountSkinCountAggregateInputType | true
    _avg?: AccountSkinAvgAggregateInputType
    _sum?: AccountSkinSumAggregateInputType
    _min?: AccountSkinMinAggregateInputType
    _max?: AccountSkinMaxAggregateInputType
  }

  export type AccountSkinGroupByOutputType = {
    accountId: number
    skinId: number
    _count: AccountSkinCountAggregateOutputType | null
    _avg: AccountSkinAvgAggregateOutputType | null
    _sum: AccountSkinSumAggregateOutputType | null
    _min: AccountSkinMinAggregateOutputType | null
    _max: AccountSkinMaxAggregateOutputType | null
  }

  type GetAccountSkinGroupByPayload<T extends AccountSkinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountSkinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountSkinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountSkinGroupByOutputType[P]>
            : GetScalarType<T[P], AccountSkinGroupByOutputType[P]>
        }
      >
    >


  export type AccountSkinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountId?: boolean
    skinId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    skin?: boolean | SkinDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountSkin"]>



  export type AccountSkinSelectScalar = {
    accountId?: boolean
    skinId?: boolean
  }

  export type AccountSkinOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"accountId" | "skinId", ExtArgs["result"]["accountSkin"]>
  export type AccountSkinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    skin?: boolean | SkinDefaultArgs<ExtArgs>
  }

  export type $AccountSkinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountSkin"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      skin: Prisma.$SkinPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      accountId: number
      skinId: number
    }, ExtArgs["result"]["accountSkin"]>
    composites: {}
  }

  type AccountSkinGetPayload<S extends boolean | null | undefined | AccountSkinDefaultArgs> = $Result.GetResult<Prisma.$AccountSkinPayload, S>

  type AccountSkinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountSkinFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountSkinCountAggregateInputType | true
    }

  export interface AccountSkinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountSkin'], meta: { name: 'AccountSkin' } }
    /**
     * Find zero or one AccountSkin that matches the filter.
     * @param {AccountSkinFindUniqueArgs} args - Arguments to find a AccountSkin
     * @example
     * // Get one AccountSkin
     * const accountSkin = await prisma.accountSkin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountSkinFindUniqueArgs>(args: SelectSubset<T, AccountSkinFindUniqueArgs<ExtArgs>>): Prisma__AccountSkinClient<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountSkin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountSkinFindUniqueOrThrowArgs} args - Arguments to find a AccountSkin
     * @example
     * // Get one AccountSkin
     * const accountSkin = await prisma.accountSkin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountSkinFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountSkinFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountSkinClient<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountSkin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountSkinFindFirstArgs} args - Arguments to find a AccountSkin
     * @example
     * // Get one AccountSkin
     * const accountSkin = await prisma.accountSkin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountSkinFindFirstArgs>(args?: SelectSubset<T, AccountSkinFindFirstArgs<ExtArgs>>): Prisma__AccountSkinClient<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountSkin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountSkinFindFirstOrThrowArgs} args - Arguments to find a AccountSkin
     * @example
     * // Get one AccountSkin
     * const accountSkin = await prisma.accountSkin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountSkinFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountSkinFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountSkinClient<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountSkins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountSkinFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountSkins
     * const accountSkins = await prisma.accountSkin.findMany()
     * 
     * // Get first 10 AccountSkins
     * const accountSkins = await prisma.accountSkin.findMany({ take: 10 })
     * 
     * // Only select the `accountId`
     * const accountSkinWithAccountIdOnly = await prisma.accountSkin.findMany({ select: { accountId: true } })
     * 
     */
    findMany<T extends AccountSkinFindManyArgs>(args?: SelectSubset<T, AccountSkinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountSkin.
     * @param {AccountSkinCreateArgs} args - Arguments to create a AccountSkin.
     * @example
     * // Create one AccountSkin
     * const AccountSkin = await prisma.accountSkin.create({
     *   data: {
     *     // ... data to create a AccountSkin
     *   }
     * })
     * 
     */
    create<T extends AccountSkinCreateArgs>(args: SelectSubset<T, AccountSkinCreateArgs<ExtArgs>>): Prisma__AccountSkinClient<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountSkins.
     * @param {AccountSkinCreateManyArgs} args - Arguments to create many AccountSkins.
     * @example
     * // Create many AccountSkins
     * const accountSkin = await prisma.accountSkin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountSkinCreateManyArgs>(args?: SelectSubset<T, AccountSkinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountSkin.
     * @param {AccountSkinDeleteArgs} args - Arguments to delete one AccountSkin.
     * @example
     * // Delete one AccountSkin
     * const AccountSkin = await prisma.accountSkin.delete({
     *   where: {
     *     // ... filter to delete one AccountSkin
     *   }
     * })
     * 
     */
    delete<T extends AccountSkinDeleteArgs>(args: SelectSubset<T, AccountSkinDeleteArgs<ExtArgs>>): Prisma__AccountSkinClient<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountSkin.
     * @param {AccountSkinUpdateArgs} args - Arguments to update one AccountSkin.
     * @example
     * // Update one AccountSkin
     * const accountSkin = await prisma.accountSkin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountSkinUpdateArgs>(args: SelectSubset<T, AccountSkinUpdateArgs<ExtArgs>>): Prisma__AccountSkinClient<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountSkins.
     * @param {AccountSkinDeleteManyArgs} args - Arguments to filter AccountSkins to delete.
     * @example
     * // Delete a few AccountSkins
     * const { count } = await prisma.accountSkin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountSkinDeleteManyArgs>(args?: SelectSubset<T, AccountSkinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountSkins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountSkinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountSkins
     * const accountSkin = await prisma.accountSkin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountSkinUpdateManyArgs>(args: SelectSubset<T, AccountSkinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountSkin.
     * @param {AccountSkinUpsertArgs} args - Arguments to update or create a AccountSkin.
     * @example
     * // Update or create a AccountSkin
     * const accountSkin = await prisma.accountSkin.upsert({
     *   create: {
     *     // ... data to create a AccountSkin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountSkin we want to update
     *   }
     * })
     */
    upsert<T extends AccountSkinUpsertArgs>(args: SelectSubset<T, AccountSkinUpsertArgs<ExtArgs>>): Prisma__AccountSkinClient<$Result.GetResult<Prisma.$AccountSkinPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountSkins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountSkinCountArgs} args - Arguments to filter AccountSkins to count.
     * @example
     * // Count the number of AccountSkins
     * const count = await prisma.accountSkin.count({
     *   where: {
     *     // ... the filter for the AccountSkins we want to count
     *   }
     * })
    **/
    count<T extends AccountSkinCountArgs>(
      args?: Subset<T, AccountSkinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountSkinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountSkin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountSkinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountSkinAggregateArgs>(args: Subset<T, AccountSkinAggregateArgs>): Prisma.PrismaPromise<GetAccountSkinAggregateType<T>>

    /**
     * Group by AccountSkin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountSkinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountSkinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountSkinGroupByArgs['orderBy'] }
        : { orderBy?: AccountSkinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountSkinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountSkinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountSkin model
   */
  readonly fields: AccountSkinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountSkin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountSkinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    skin<T extends SkinDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkinDefaultArgs<ExtArgs>>): Prisma__SkinClient<$Result.GetResult<Prisma.$SkinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountSkin model
   */
  interface AccountSkinFieldRefs {
    readonly accountId: FieldRef<"AccountSkin", 'Int'>
    readonly skinId: FieldRef<"AccountSkin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AccountSkin findUnique
   */
  export type AccountSkinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    /**
     * Filter, which AccountSkin to fetch.
     */
    where: AccountSkinWhereUniqueInput
  }

  /**
   * AccountSkin findUniqueOrThrow
   */
  export type AccountSkinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    /**
     * Filter, which AccountSkin to fetch.
     */
    where: AccountSkinWhereUniqueInput
  }

  /**
   * AccountSkin findFirst
   */
  export type AccountSkinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    /**
     * Filter, which AccountSkin to fetch.
     */
    where?: AccountSkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountSkins to fetch.
     */
    orderBy?: AccountSkinOrderByWithRelationInput | AccountSkinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountSkins.
     */
    cursor?: AccountSkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountSkins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountSkins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountSkins.
     */
    distinct?: AccountSkinScalarFieldEnum | AccountSkinScalarFieldEnum[]
  }

  /**
   * AccountSkin findFirstOrThrow
   */
  export type AccountSkinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    /**
     * Filter, which AccountSkin to fetch.
     */
    where?: AccountSkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountSkins to fetch.
     */
    orderBy?: AccountSkinOrderByWithRelationInput | AccountSkinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountSkins.
     */
    cursor?: AccountSkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountSkins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountSkins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountSkins.
     */
    distinct?: AccountSkinScalarFieldEnum | AccountSkinScalarFieldEnum[]
  }

  /**
   * AccountSkin findMany
   */
  export type AccountSkinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    /**
     * Filter, which AccountSkins to fetch.
     */
    where?: AccountSkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountSkins to fetch.
     */
    orderBy?: AccountSkinOrderByWithRelationInput | AccountSkinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountSkins.
     */
    cursor?: AccountSkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountSkins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountSkins.
     */
    skip?: number
    distinct?: AccountSkinScalarFieldEnum | AccountSkinScalarFieldEnum[]
  }

  /**
   * AccountSkin create
   */
  export type AccountSkinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountSkin.
     */
    data: XOR<AccountSkinCreateInput, AccountSkinUncheckedCreateInput>
  }

  /**
   * AccountSkin createMany
   */
  export type AccountSkinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountSkins.
     */
    data: AccountSkinCreateManyInput | AccountSkinCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountSkin update
   */
  export type AccountSkinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountSkin.
     */
    data: XOR<AccountSkinUpdateInput, AccountSkinUncheckedUpdateInput>
    /**
     * Choose, which AccountSkin to update.
     */
    where: AccountSkinWhereUniqueInput
  }

  /**
   * AccountSkin updateMany
   */
  export type AccountSkinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountSkins.
     */
    data: XOR<AccountSkinUpdateManyMutationInput, AccountSkinUncheckedUpdateManyInput>
    /**
     * Filter which AccountSkins to update
     */
    where?: AccountSkinWhereInput
    /**
     * Limit how many AccountSkins to update.
     */
    limit?: number
  }

  /**
   * AccountSkin upsert
   */
  export type AccountSkinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountSkin to update in case it exists.
     */
    where: AccountSkinWhereUniqueInput
    /**
     * In case the AccountSkin found by the `where` argument doesn't exist, create a new AccountSkin with this data.
     */
    create: XOR<AccountSkinCreateInput, AccountSkinUncheckedCreateInput>
    /**
     * In case the AccountSkin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountSkinUpdateInput, AccountSkinUncheckedUpdateInput>
  }

  /**
   * AccountSkin delete
   */
  export type AccountSkinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
    /**
     * Filter which AccountSkin to delete.
     */
    where: AccountSkinWhereUniqueInput
  }

  /**
   * AccountSkin deleteMany
   */
  export type AccountSkinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountSkins to delete
     */
    where?: AccountSkinWhereInput
    /**
     * Limit how many AccountSkins to delete.
     */
    limit?: number
  }

  /**
   * AccountSkin without action
   */
  export type AccountSkinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountSkin
     */
    select?: AccountSkinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountSkin
     */
    omit?: AccountSkinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountSkinInclude<ExtArgs> | null
  }


  /**
   * Model AccountChroma
   */

  export type AggregateAccountChroma = {
    _count: AccountChromaCountAggregateOutputType | null
    _avg: AccountChromaAvgAggregateOutputType | null
    _sum: AccountChromaSumAggregateOutputType | null
    _min: AccountChromaMinAggregateOutputType | null
    _max: AccountChromaMaxAggregateOutputType | null
  }

  export type AccountChromaAvgAggregateOutputType = {
    accountId: number | null
    chromaId: number | null
  }

  export type AccountChromaSumAggregateOutputType = {
    accountId: number | null
    chromaId: number | null
  }

  export type AccountChromaMinAggregateOutputType = {
    accountId: number | null
    chromaId: number | null
  }

  export type AccountChromaMaxAggregateOutputType = {
    accountId: number | null
    chromaId: number | null
  }

  export type AccountChromaCountAggregateOutputType = {
    accountId: number
    chromaId: number
    _all: number
  }


  export type AccountChromaAvgAggregateInputType = {
    accountId?: true
    chromaId?: true
  }

  export type AccountChromaSumAggregateInputType = {
    accountId?: true
    chromaId?: true
  }

  export type AccountChromaMinAggregateInputType = {
    accountId?: true
    chromaId?: true
  }

  export type AccountChromaMaxAggregateInputType = {
    accountId?: true
    chromaId?: true
  }

  export type AccountChromaCountAggregateInputType = {
    accountId?: true
    chromaId?: true
    _all?: true
  }

  export type AccountChromaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountChroma to aggregate.
     */
    where?: AccountChromaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountChromas to fetch.
     */
    orderBy?: AccountChromaOrderByWithRelationInput | AccountChromaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountChromaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountChromas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountChromas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountChromas
    **/
    _count?: true | AccountChromaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountChromaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountChromaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountChromaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountChromaMaxAggregateInputType
  }

  export type GetAccountChromaAggregateType<T extends AccountChromaAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountChroma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountChroma[P]>
      : GetScalarType<T[P], AggregateAccountChroma[P]>
  }




  export type AccountChromaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountChromaWhereInput
    orderBy?: AccountChromaOrderByWithAggregationInput | AccountChromaOrderByWithAggregationInput[]
    by: AccountChromaScalarFieldEnum[] | AccountChromaScalarFieldEnum
    having?: AccountChromaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountChromaCountAggregateInputType | true
    _avg?: AccountChromaAvgAggregateInputType
    _sum?: AccountChromaSumAggregateInputType
    _min?: AccountChromaMinAggregateInputType
    _max?: AccountChromaMaxAggregateInputType
  }

  export type AccountChromaGroupByOutputType = {
    accountId: number
    chromaId: number
    _count: AccountChromaCountAggregateOutputType | null
    _avg: AccountChromaAvgAggregateOutputType | null
    _sum: AccountChromaSumAggregateOutputType | null
    _min: AccountChromaMinAggregateOutputType | null
    _max: AccountChromaMaxAggregateOutputType | null
  }

  type GetAccountChromaGroupByPayload<T extends AccountChromaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountChromaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountChromaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountChromaGroupByOutputType[P]>
            : GetScalarType<T[P], AccountChromaGroupByOutputType[P]>
        }
      >
    >


  export type AccountChromaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountId?: boolean
    chromaId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    chroma?: boolean | ChromaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountChroma"]>



  export type AccountChromaSelectScalar = {
    accountId?: boolean
    chromaId?: boolean
  }

  export type AccountChromaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"accountId" | "chromaId", ExtArgs["result"]["accountChroma"]>
  export type AccountChromaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    chroma?: boolean | ChromaDefaultArgs<ExtArgs>
  }

  export type $AccountChromaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountChroma"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      chroma: Prisma.$ChromaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      accountId: number
      chromaId: number
    }, ExtArgs["result"]["accountChroma"]>
    composites: {}
  }

  type AccountChromaGetPayload<S extends boolean | null | undefined | AccountChromaDefaultArgs> = $Result.GetResult<Prisma.$AccountChromaPayload, S>

  type AccountChromaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountChromaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountChromaCountAggregateInputType | true
    }

  export interface AccountChromaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountChroma'], meta: { name: 'AccountChroma' } }
    /**
     * Find zero or one AccountChroma that matches the filter.
     * @param {AccountChromaFindUniqueArgs} args - Arguments to find a AccountChroma
     * @example
     * // Get one AccountChroma
     * const accountChroma = await prisma.accountChroma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountChromaFindUniqueArgs>(args: SelectSubset<T, AccountChromaFindUniqueArgs<ExtArgs>>): Prisma__AccountChromaClient<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountChroma that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountChromaFindUniqueOrThrowArgs} args - Arguments to find a AccountChroma
     * @example
     * // Get one AccountChroma
     * const accountChroma = await prisma.accountChroma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountChromaFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountChromaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountChromaClient<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountChroma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChromaFindFirstArgs} args - Arguments to find a AccountChroma
     * @example
     * // Get one AccountChroma
     * const accountChroma = await prisma.accountChroma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountChromaFindFirstArgs>(args?: SelectSubset<T, AccountChromaFindFirstArgs<ExtArgs>>): Prisma__AccountChromaClient<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountChroma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChromaFindFirstOrThrowArgs} args - Arguments to find a AccountChroma
     * @example
     * // Get one AccountChroma
     * const accountChroma = await prisma.accountChroma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountChromaFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountChromaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountChromaClient<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountChromas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChromaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountChromas
     * const accountChromas = await prisma.accountChroma.findMany()
     * 
     * // Get first 10 AccountChromas
     * const accountChromas = await prisma.accountChroma.findMany({ take: 10 })
     * 
     * // Only select the `accountId`
     * const accountChromaWithAccountIdOnly = await prisma.accountChroma.findMany({ select: { accountId: true } })
     * 
     */
    findMany<T extends AccountChromaFindManyArgs>(args?: SelectSubset<T, AccountChromaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountChroma.
     * @param {AccountChromaCreateArgs} args - Arguments to create a AccountChroma.
     * @example
     * // Create one AccountChroma
     * const AccountChroma = await prisma.accountChroma.create({
     *   data: {
     *     // ... data to create a AccountChroma
     *   }
     * })
     * 
     */
    create<T extends AccountChromaCreateArgs>(args: SelectSubset<T, AccountChromaCreateArgs<ExtArgs>>): Prisma__AccountChromaClient<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountChromas.
     * @param {AccountChromaCreateManyArgs} args - Arguments to create many AccountChromas.
     * @example
     * // Create many AccountChromas
     * const accountChroma = await prisma.accountChroma.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountChromaCreateManyArgs>(args?: SelectSubset<T, AccountChromaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountChroma.
     * @param {AccountChromaDeleteArgs} args - Arguments to delete one AccountChroma.
     * @example
     * // Delete one AccountChroma
     * const AccountChroma = await prisma.accountChroma.delete({
     *   where: {
     *     // ... filter to delete one AccountChroma
     *   }
     * })
     * 
     */
    delete<T extends AccountChromaDeleteArgs>(args: SelectSubset<T, AccountChromaDeleteArgs<ExtArgs>>): Prisma__AccountChromaClient<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountChroma.
     * @param {AccountChromaUpdateArgs} args - Arguments to update one AccountChroma.
     * @example
     * // Update one AccountChroma
     * const accountChroma = await prisma.accountChroma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountChromaUpdateArgs>(args: SelectSubset<T, AccountChromaUpdateArgs<ExtArgs>>): Prisma__AccountChromaClient<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountChromas.
     * @param {AccountChromaDeleteManyArgs} args - Arguments to filter AccountChromas to delete.
     * @example
     * // Delete a few AccountChromas
     * const { count } = await prisma.accountChroma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountChromaDeleteManyArgs>(args?: SelectSubset<T, AccountChromaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountChromas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChromaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountChromas
     * const accountChroma = await prisma.accountChroma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountChromaUpdateManyArgs>(args: SelectSubset<T, AccountChromaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountChroma.
     * @param {AccountChromaUpsertArgs} args - Arguments to update or create a AccountChroma.
     * @example
     * // Update or create a AccountChroma
     * const accountChroma = await prisma.accountChroma.upsert({
     *   create: {
     *     // ... data to create a AccountChroma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountChroma we want to update
     *   }
     * })
     */
    upsert<T extends AccountChromaUpsertArgs>(args: SelectSubset<T, AccountChromaUpsertArgs<ExtArgs>>): Prisma__AccountChromaClient<$Result.GetResult<Prisma.$AccountChromaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountChromas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChromaCountArgs} args - Arguments to filter AccountChromas to count.
     * @example
     * // Count the number of AccountChromas
     * const count = await prisma.accountChroma.count({
     *   where: {
     *     // ... the filter for the AccountChromas we want to count
     *   }
     * })
    **/
    count<T extends AccountChromaCountArgs>(
      args?: Subset<T, AccountChromaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountChromaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountChroma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChromaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountChromaAggregateArgs>(args: Subset<T, AccountChromaAggregateArgs>): Prisma.PrismaPromise<GetAccountChromaAggregateType<T>>

    /**
     * Group by AccountChroma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountChromaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountChromaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountChromaGroupByArgs['orderBy'] }
        : { orderBy?: AccountChromaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountChromaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountChromaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountChroma model
   */
  readonly fields: AccountChromaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountChroma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountChromaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chroma<T extends ChromaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChromaDefaultArgs<ExtArgs>>): Prisma__ChromaClient<$Result.GetResult<Prisma.$ChromaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountChroma model
   */
  interface AccountChromaFieldRefs {
    readonly accountId: FieldRef<"AccountChroma", 'Int'>
    readonly chromaId: FieldRef<"AccountChroma", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AccountChroma findUnique
   */
  export type AccountChromaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    /**
     * Filter, which AccountChroma to fetch.
     */
    where: AccountChromaWhereUniqueInput
  }

  /**
   * AccountChroma findUniqueOrThrow
   */
  export type AccountChromaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    /**
     * Filter, which AccountChroma to fetch.
     */
    where: AccountChromaWhereUniqueInput
  }

  /**
   * AccountChroma findFirst
   */
  export type AccountChromaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    /**
     * Filter, which AccountChroma to fetch.
     */
    where?: AccountChromaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountChromas to fetch.
     */
    orderBy?: AccountChromaOrderByWithRelationInput | AccountChromaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountChromas.
     */
    cursor?: AccountChromaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountChromas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountChromas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountChromas.
     */
    distinct?: AccountChromaScalarFieldEnum | AccountChromaScalarFieldEnum[]
  }

  /**
   * AccountChroma findFirstOrThrow
   */
  export type AccountChromaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    /**
     * Filter, which AccountChroma to fetch.
     */
    where?: AccountChromaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountChromas to fetch.
     */
    orderBy?: AccountChromaOrderByWithRelationInput | AccountChromaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountChromas.
     */
    cursor?: AccountChromaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountChromas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountChromas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountChromas.
     */
    distinct?: AccountChromaScalarFieldEnum | AccountChromaScalarFieldEnum[]
  }

  /**
   * AccountChroma findMany
   */
  export type AccountChromaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    /**
     * Filter, which AccountChromas to fetch.
     */
    where?: AccountChromaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountChromas to fetch.
     */
    orderBy?: AccountChromaOrderByWithRelationInput | AccountChromaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountChromas.
     */
    cursor?: AccountChromaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountChromas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountChromas.
     */
    skip?: number
    distinct?: AccountChromaScalarFieldEnum | AccountChromaScalarFieldEnum[]
  }

  /**
   * AccountChroma create
   */
  export type AccountChromaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountChroma.
     */
    data: XOR<AccountChromaCreateInput, AccountChromaUncheckedCreateInput>
  }

  /**
   * AccountChroma createMany
   */
  export type AccountChromaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountChromas.
     */
    data: AccountChromaCreateManyInput | AccountChromaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountChroma update
   */
  export type AccountChromaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountChroma.
     */
    data: XOR<AccountChromaUpdateInput, AccountChromaUncheckedUpdateInput>
    /**
     * Choose, which AccountChroma to update.
     */
    where: AccountChromaWhereUniqueInput
  }

  /**
   * AccountChroma updateMany
   */
  export type AccountChromaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountChromas.
     */
    data: XOR<AccountChromaUpdateManyMutationInput, AccountChromaUncheckedUpdateManyInput>
    /**
     * Filter which AccountChromas to update
     */
    where?: AccountChromaWhereInput
    /**
     * Limit how many AccountChromas to update.
     */
    limit?: number
  }

  /**
   * AccountChroma upsert
   */
  export type AccountChromaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountChroma to update in case it exists.
     */
    where: AccountChromaWhereUniqueInput
    /**
     * In case the AccountChroma found by the `where` argument doesn't exist, create a new AccountChroma with this data.
     */
    create: XOR<AccountChromaCreateInput, AccountChromaUncheckedCreateInput>
    /**
     * In case the AccountChroma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountChromaUpdateInput, AccountChromaUncheckedUpdateInput>
  }

  /**
   * AccountChroma delete
   */
  export type AccountChromaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
    /**
     * Filter which AccountChroma to delete.
     */
    where: AccountChromaWhereUniqueInput
  }

  /**
   * AccountChroma deleteMany
   */
  export type AccountChromaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountChromas to delete
     */
    where?: AccountChromaWhereInput
    /**
     * Limit how many AccountChromas to delete.
     */
    limit?: number
  }

  /**
   * AccountChroma without action
   */
  export type AccountChromaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountChroma
     */
    select?: AccountChromaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountChroma
     */
    omit?: AccountChromaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountChromaInclude<ExtArgs> | null
  }


  /**
   * Model AccountWard
   */

  export type AggregateAccountWard = {
    _count: AccountWardCountAggregateOutputType | null
    _avg: AccountWardAvgAggregateOutputType | null
    _sum: AccountWardSumAggregateOutputType | null
    _min: AccountWardMinAggregateOutputType | null
    _max: AccountWardMaxAggregateOutputType | null
  }

  export type AccountWardAvgAggregateOutputType = {
    accountId: number | null
    wardId: number | null
  }

  export type AccountWardSumAggregateOutputType = {
    accountId: number | null
    wardId: number | null
  }

  export type AccountWardMinAggregateOutputType = {
    accountId: number | null
    wardId: number | null
  }

  export type AccountWardMaxAggregateOutputType = {
    accountId: number | null
    wardId: number | null
  }

  export type AccountWardCountAggregateOutputType = {
    accountId: number
    wardId: number
    _all: number
  }


  export type AccountWardAvgAggregateInputType = {
    accountId?: true
    wardId?: true
  }

  export type AccountWardSumAggregateInputType = {
    accountId?: true
    wardId?: true
  }

  export type AccountWardMinAggregateInputType = {
    accountId?: true
    wardId?: true
  }

  export type AccountWardMaxAggregateInputType = {
    accountId?: true
    wardId?: true
  }

  export type AccountWardCountAggregateInputType = {
    accountId?: true
    wardId?: true
    _all?: true
  }

  export type AccountWardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountWard to aggregate.
     */
    where?: AccountWardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountWards to fetch.
     */
    orderBy?: AccountWardOrderByWithRelationInput | AccountWardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountWards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountWards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountWards
    **/
    _count?: true | AccountWardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountWardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountWardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountWardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountWardMaxAggregateInputType
  }

  export type GetAccountWardAggregateType<T extends AccountWardAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountWard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountWard[P]>
      : GetScalarType<T[P], AggregateAccountWard[P]>
  }




  export type AccountWardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWardWhereInput
    orderBy?: AccountWardOrderByWithAggregationInput | AccountWardOrderByWithAggregationInput[]
    by: AccountWardScalarFieldEnum[] | AccountWardScalarFieldEnum
    having?: AccountWardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountWardCountAggregateInputType | true
    _avg?: AccountWardAvgAggregateInputType
    _sum?: AccountWardSumAggregateInputType
    _min?: AccountWardMinAggregateInputType
    _max?: AccountWardMaxAggregateInputType
  }

  export type AccountWardGroupByOutputType = {
    accountId: number
    wardId: number
    _count: AccountWardCountAggregateOutputType | null
    _avg: AccountWardAvgAggregateOutputType | null
    _sum: AccountWardSumAggregateOutputType | null
    _min: AccountWardMinAggregateOutputType | null
    _max: AccountWardMaxAggregateOutputType | null
  }

  type GetAccountWardGroupByPayload<T extends AccountWardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountWardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountWardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountWardGroupByOutputType[P]>
            : GetScalarType<T[P], AccountWardGroupByOutputType[P]>
        }
      >
    >


  export type AccountWardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountId?: boolean
    wardId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    ward?: boolean | WardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountWard"]>



  export type AccountWardSelectScalar = {
    accountId?: boolean
    wardId?: boolean
  }

  export type AccountWardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"accountId" | "wardId", ExtArgs["result"]["accountWard"]>
  export type AccountWardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    ward?: boolean | WardDefaultArgs<ExtArgs>
  }

  export type $AccountWardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountWard"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      ward: Prisma.$WardPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      accountId: number
      wardId: number
    }, ExtArgs["result"]["accountWard"]>
    composites: {}
  }

  type AccountWardGetPayload<S extends boolean | null | undefined | AccountWardDefaultArgs> = $Result.GetResult<Prisma.$AccountWardPayload, S>

  type AccountWardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountWardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountWardCountAggregateInputType | true
    }

  export interface AccountWardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountWard'], meta: { name: 'AccountWard' } }
    /**
     * Find zero or one AccountWard that matches the filter.
     * @param {AccountWardFindUniqueArgs} args - Arguments to find a AccountWard
     * @example
     * // Get one AccountWard
     * const accountWard = await prisma.accountWard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountWardFindUniqueArgs>(args: SelectSubset<T, AccountWardFindUniqueArgs<ExtArgs>>): Prisma__AccountWardClient<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountWard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountWardFindUniqueOrThrowArgs} args - Arguments to find a AccountWard
     * @example
     * // Get one AccountWard
     * const accountWard = await prisma.accountWard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountWardFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountWardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountWardClient<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountWard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountWardFindFirstArgs} args - Arguments to find a AccountWard
     * @example
     * // Get one AccountWard
     * const accountWard = await prisma.accountWard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountWardFindFirstArgs>(args?: SelectSubset<T, AccountWardFindFirstArgs<ExtArgs>>): Prisma__AccountWardClient<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountWard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountWardFindFirstOrThrowArgs} args - Arguments to find a AccountWard
     * @example
     * // Get one AccountWard
     * const accountWard = await prisma.accountWard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountWardFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountWardFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountWardClient<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountWards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountWardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountWards
     * const accountWards = await prisma.accountWard.findMany()
     * 
     * // Get first 10 AccountWards
     * const accountWards = await prisma.accountWard.findMany({ take: 10 })
     * 
     * // Only select the `accountId`
     * const accountWardWithAccountIdOnly = await prisma.accountWard.findMany({ select: { accountId: true } })
     * 
     */
    findMany<T extends AccountWardFindManyArgs>(args?: SelectSubset<T, AccountWardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountWard.
     * @param {AccountWardCreateArgs} args - Arguments to create a AccountWard.
     * @example
     * // Create one AccountWard
     * const AccountWard = await prisma.accountWard.create({
     *   data: {
     *     // ... data to create a AccountWard
     *   }
     * })
     * 
     */
    create<T extends AccountWardCreateArgs>(args: SelectSubset<T, AccountWardCreateArgs<ExtArgs>>): Prisma__AccountWardClient<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountWards.
     * @param {AccountWardCreateManyArgs} args - Arguments to create many AccountWards.
     * @example
     * // Create many AccountWards
     * const accountWard = await prisma.accountWard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountWardCreateManyArgs>(args?: SelectSubset<T, AccountWardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountWard.
     * @param {AccountWardDeleteArgs} args - Arguments to delete one AccountWard.
     * @example
     * // Delete one AccountWard
     * const AccountWard = await prisma.accountWard.delete({
     *   where: {
     *     // ... filter to delete one AccountWard
     *   }
     * })
     * 
     */
    delete<T extends AccountWardDeleteArgs>(args: SelectSubset<T, AccountWardDeleteArgs<ExtArgs>>): Prisma__AccountWardClient<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountWard.
     * @param {AccountWardUpdateArgs} args - Arguments to update one AccountWard.
     * @example
     * // Update one AccountWard
     * const accountWard = await prisma.accountWard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountWardUpdateArgs>(args: SelectSubset<T, AccountWardUpdateArgs<ExtArgs>>): Prisma__AccountWardClient<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountWards.
     * @param {AccountWardDeleteManyArgs} args - Arguments to filter AccountWards to delete.
     * @example
     * // Delete a few AccountWards
     * const { count } = await prisma.accountWard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountWardDeleteManyArgs>(args?: SelectSubset<T, AccountWardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountWards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountWardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountWards
     * const accountWard = await prisma.accountWard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountWardUpdateManyArgs>(args: SelectSubset<T, AccountWardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountWard.
     * @param {AccountWardUpsertArgs} args - Arguments to update or create a AccountWard.
     * @example
     * // Update or create a AccountWard
     * const accountWard = await prisma.accountWard.upsert({
     *   create: {
     *     // ... data to create a AccountWard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountWard we want to update
     *   }
     * })
     */
    upsert<T extends AccountWardUpsertArgs>(args: SelectSubset<T, AccountWardUpsertArgs<ExtArgs>>): Prisma__AccountWardClient<$Result.GetResult<Prisma.$AccountWardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountWards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountWardCountArgs} args - Arguments to filter AccountWards to count.
     * @example
     * // Count the number of AccountWards
     * const count = await prisma.accountWard.count({
     *   where: {
     *     // ... the filter for the AccountWards we want to count
     *   }
     * })
    **/
    count<T extends AccountWardCountArgs>(
      args?: Subset<T, AccountWardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountWardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountWard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountWardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountWardAggregateArgs>(args: Subset<T, AccountWardAggregateArgs>): Prisma.PrismaPromise<GetAccountWardAggregateType<T>>

    /**
     * Group by AccountWard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountWardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountWardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountWardGroupByArgs['orderBy'] }
        : { orderBy?: AccountWardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountWardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountWardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountWard model
   */
  readonly fields: AccountWardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountWard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountWardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ward<T extends WardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WardDefaultArgs<ExtArgs>>): Prisma__WardClient<$Result.GetResult<Prisma.$WardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountWard model
   */
  interface AccountWardFieldRefs {
    readonly accountId: FieldRef<"AccountWard", 'Int'>
    readonly wardId: FieldRef<"AccountWard", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AccountWard findUnique
   */
  export type AccountWardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    /**
     * Filter, which AccountWard to fetch.
     */
    where: AccountWardWhereUniqueInput
  }

  /**
   * AccountWard findUniqueOrThrow
   */
  export type AccountWardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    /**
     * Filter, which AccountWard to fetch.
     */
    where: AccountWardWhereUniqueInput
  }

  /**
   * AccountWard findFirst
   */
  export type AccountWardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    /**
     * Filter, which AccountWard to fetch.
     */
    where?: AccountWardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountWards to fetch.
     */
    orderBy?: AccountWardOrderByWithRelationInput | AccountWardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountWards.
     */
    cursor?: AccountWardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountWards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountWards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountWards.
     */
    distinct?: AccountWardScalarFieldEnum | AccountWardScalarFieldEnum[]
  }

  /**
   * AccountWard findFirstOrThrow
   */
  export type AccountWardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    /**
     * Filter, which AccountWard to fetch.
     */
    where?: AccountWardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountWards to fetch.
     */
    orderBy?: AccountWardOrderByWithRelationInput | AccountWardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountWards.
     */
    cursor?: AccountWardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountWards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountWards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountWards.
     */
    distinct?: AccountWardScalarFieldEnum | AccountWardScalarFieldEnum[]
  }

  /**
   * AccountWard findMany
   */
  export type AccountWardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    /**
     * Filter, which AccountWards to fetch.
     */
    where?: AccountWardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountWards to fetch.
     */
    orderBy?: AccountWardOrderByWithRelationInput | AccountWardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountWards.
     */
    cursor?: AccountWardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountWards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountWards.
     */
    skip?: number
    distinct?: AccountWardScalarFieldEnum | AccountWardScalarFieldEnum[]
  }

  /**
   * AccountWard create
   */
  export type AccountWardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountWard.
     */
    data: XOR<AccountWardCreateInput, AccountWardUncheckedCreateInput>
  }

  /**
   * AccountWard createMany
   */
  export type AccountWardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountWards.
     */
    data: AccountWardCreateManyInput | AccountWardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountWard update
   */
  export type AccountWardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountWard.
     */
    data: XOR<AccountWardUpdateInput, AccountWardUncheckedUpdateInput>
    /**
     * Choose, which AccountWard to update.
     */
    where: AccountWardWhereUniqueInput
  }

  /**
   * AccountWard updateMany
   */
  export type AccountWardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountWards.
     */
    data: XOR<AccountWardUpdateManyMutationInput, AccountWardUncheckedUpdateManyInput>
    /**
     * Filter which AccountWards to update
     */
    where?: AccountWardWhereInput
    /**
     * Limit how many AccountWards to update.
     */
    limit?: number
  }

  /**
   * AccountWard upsert
   */
  export type AccountWardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountWard to update in case it exists.
     */
    where: AccountWardWhereUniqueInput
    /**
     * In case the AccountWard found by the `where` argument doesn't exist, create a new AccountWard with this data.
     */
    create: XOR<AccountWardCreateInput, AccountWardUncheckedCreateInput>
    /**
     * In case the AccountWard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountWardUpdateInput, AccountWardUncheckedUpdateInput>
  }

  /**
   * AccountWard delete
   */
  export type AccountWardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
    /**
     * Filter which AccountWard to delete.
     */
    where: AccountWardWhereUniqueInput
  }

  /**
   * AccountWard deleteMany
   */
  export type AccountWardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountWards to delete
     */
    where?: AccountWardWhereInput
    /**
     * Limit how many AccountWards to delete.
     */
    limit?: number
  }

  /**
   * AccountWard without action
   */
  export type AccountWardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountWard
     */
    select?: AccountWardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountWard
     */
    omit?: AccountWardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountWardInclude<ExtArgs> | null
  }


  /**
   * Model AccountEmote
   */

  export type AggregateAccountEmote = {
    _count: AccountEmoteCountAggregateOutputType | null
    _avg: AccountEmoteAvgAggregateOutputType | null
    _sum: AccountEmoteSumAggregateOutputType | null
    _min: AccountEmoteMinAggregateOutputType | null
    _max: AccountEmoteMaxAggregateOutputType | null
  }

  export type AccountEmoteAvgAggregateOutputType = {
    accountId: number | null
    emoteId: number | null
  }

  export type AccountEmoteSumAggregateOutputType = {
    accountId: number | null
    emoteId: number | null
  }

  export type AccountEmoteMinAggregateOutputType = {
    accountId: number | null
    emoteId: number | null
  }

  export type AccountEmoteMaxAggregateOutputType = {
    accountId: number | null
    emoteId: number | null
  }

  export type AccountEmoteCountAggregateOutputType = {
    accountId: number
    emoteId: number
    _all: number
  }


  export type AccountEmoteAvgAggregateInputType = {
    accountId?: true
    emoteId?: true
  }

  export type AccountEmoteSumAggregateInputType = {
    accountId?: true
    emoteId?: true
  }

  export type AccountEmoteMinAggregateInputType = {
    accountId?: true
    emoteId?: true
  }

  export type AccountEmoteMaxAggregateInputType = {
    accountId?: true
    emoteId?: true
  }

  export type AccountEmoteCountAggregateInputType = {
    accountId?: true
    emoteId?: true
    _all?: true
  }

  export type AccountEmoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountEmote to aggregate.
     */
    where?: AccountEmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountEmotes to fetch.
     */
    orderBy?: AccountEmoteOrderByWithRelationInput | AccountEmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountEmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountEmotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountEmotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountEmotes
    **/
    _count?: true | AccountEmoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountEmoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountEmoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountEmoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountEmoteMaxAggregateInputType
  }

  export type GetAccountEmoteAggregateType<T extends AccountEmoteAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountEmote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountEmote[P]>
      : GetScalarType<T[P], AggregateAccountEmote[P]>
  }




  export type AccountEmoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountEmoteWhereInput
    orderBy?: AccountEmoteOrderByWithAggregationInput | AccountEmoteOrderByWithAggregationInput[]
    by: AccountEmoteScalarFieldEnum[] | AccountEmoteScalarFieldEnum
    having?: AccountEmoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountEmoteCountAggregateInputType | true
    _avg?: AccountEmoteAvgAggregateInputType
    _sum?: AccountEmoteSumAggregateInputType
    _min?: AccountEmoteMinAggregateInputType
    _max?: AccountEmoteMaxAggregateInputType
  }

  export type AccountEmoteGroupByOutputType = {
    accountId: number
    emoteId: number
    _count: AccountEmoteCountAggregateOutputType | null
    _avg: AccountEmoteAvgAggregateOutputType | null
    _sum: AccountEmoteSumAggregateOutputType | null
    _min: AccountEmoteMinAggregateOutputType | null
    _max: AccountEmoteMaxAggregateOutputType | null
  }

  type GetAccountEmoteGroupByPayload<T extends AccountEmoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountEmoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountEmoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountEmoteGroupByOutputType[P]>
            : GetScalarType<T[P], AccountEmoteGroupByOutputType[P]>
        }
      >
    >


  export type AccountEmoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountId?: boolean
    emoteId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    emote?: boolean | EmoteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountEmote"]>



  export type AccountEmoteSelectScalar = {
    accountId?: boolean
    emoteId?: boolean
  }

  export type AccountEmoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"accountId" | "emoteId", ExtArgs["result"]["accountEmote"]>
  export type AccountEmoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    emote?: boolean | EmoteDefaultArgs<ExtArgs>
  }

  export type $AccountEmotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountEmote"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      emote: Prisma.$EmotePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      accountId: number
      emoteId: number
    }, ExtArgs["result"]["accountEmote"]>
    composites: {}
  }

  type AccountEmoteGetPayload<S extends boolean | null | undefined | AccountEmoteDefaultArgs> = $Result.GetResult<Prisma.$AccountEmotePayload, S>

  type AccountEmoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountEmoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountEmoteCountAggregateInputType | true
    }

  export interface AccountEmoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountEmote'], meta: { name: 'AccountEmote' } }
    /**
     * Find zero or one AccountEmote that matches the filter.
     * @param {AccountEmoteFindUniqueArgs} args - Arguments to find a AccountEmote
     * @example
     * // Get one AccountEmote
     * const accountEmote = await prisma.accountEmote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountEmoteFindUniqueArgs>(args: SelectSubset<T, AccountEmoteFindUniqueArgs<ExtArgs>>): Prisma__AccountEmoteClient<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountEmote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountEmoteFindUniqueOrThrowArgs} args - Arguments to find a AccountEmote
     * @example
     * // Get one AccountEmote
     * const accountEmote = await prisma.accountEmote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountEmoteFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountEmoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountEmoteClient<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountEmote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountEmoteFindFirstArgs} args - Arguments to find a AccountEmote
     * @example
     * // Get one AccountEmote
     * const accountEmote = await prisma.accountEmote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountEmoteFindFirstArgs>(args?: SelectSubset<T, AccountEmoteFindFirstArgs<ExtArgs>>): Prisma__AccountEmoteClient<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountEmote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountEmoteFindFirstOrThrowArgs} args - Arguments to find a AccountEmote
     * @example
     * // Get one AccountEmote
     * const accountEmote = await prisma.accountEmote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountEmoteFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountEmoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountEmoteClient<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountEmotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountEmoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountEmotes
     * const accountEmotes = await prisma.accountEmote.findMany()
     * 
     * // Get first 10 AccountEmotes
     * const accountEmotes = await prisma.accountEmote.findMany({ take: 10 })
     * 
     * // Only select the `accountId`
     * const accountEmoteWithAccountIdOnly = await prisma.accountEmote.findMany({ select: { accountId: true } })
     * 
     */
    findMany<T extends AccountEmoteFindManyArgs>(args?: SelectSubset<T, AccountEmoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountEmote.
     * @param {AccountEmoteCreateArgs} args - Arguments to create a AccountEmote.
     * @example
     * // Create one AccountEmote
     * const AccountEmote = await prisma.accountEmote.create({
     *   data: {
     *     // ... data to create a AccountEmote
     *   }
     * })
     * 
     */
    create<T extends AccountEmoteCreateArgs>(args: SelectSubset<T, AccountEmoteCreateArgs<ExtArgs>>): Prisma__AccountEmoteClient<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountEmotes.
     * @param {AccountEmoteCreateManyArgs} args - Arguments to create many AccountEmotes.
     * @example
     * // Create many AccountEmotes
     * const accountEmote = await prisma.accountEmote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountEmoteCreateManyArgs>(args?: SelectSubset<T, AccountEmoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountEmote.
     * @param {AccountEmoteDeleteArgs} args - Arguments to delete one AccountEmote.
     * @example
     * // Delete one AccountEmote
     * const AccountEmote = await prisma.accountEmote.delete({
     *   where: {
     *     // ... filter to delete one AccountEmote
     *   }
     * })
     * 
     */
    delete<T extends AccountEmoteDeleteArgs>(args: SelectSubset<T, AccountEmoteDeleteArgs<ExtArgs>>): Prisma__AccountEmoteClient<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountEmote.
     * @param {AccountEmoteUpdateArgs} args - Arguments to update one AccountEmote.
     * @example
     * // Update one AccountEmote
     * const accountEmote = await prisma.accountEmote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountEmoteUpdateArgs>(args: SelectSubset<T, AccountEmoteUpdateArgs<ExtArgs>>): Prisma__AccountEmoteClient<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountEmotes.
     * @param {AccountEmoteDeleteManyArgs} args - Arguments to filter AccountEmotes to delete.
     * @example
     * // Delete a few AccountEmotes
     * const { count } = await prisma.accountEmote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountEmoteDeleteManyArgs>(args?: SelectSubset<T, AccountEmoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountEmotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountEmoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountEmotes
     * const accountEmote = await prisma.accountEmote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountEmoteUpdateManyArgs>(args: SelectSubset<T, AccountEmoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountEmote.
     * @param {AccountEmoteUpsertArgs} args - Arguments to update or create a AccountEmote.
     * @example
     * // Update or create a AccountEmote
     * const accountEmote = await prisma.accountEmote.upsert({
     *   create: {
     *     // ... data to create a AccountEmote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountEmote we want to update
     *   }
     * })
     */
    upsert<T extends AccountEmoteUpsertArgs>(args: SelectSubset<T, AccountEmoteUpsertArgs<ExtArgs>>): Prisma__AccountEmoteClient<$Result.GetResult<Prisma.$AccountEmotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountEmotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountEmoteCountArgs} args - Arguments to filter AccountEmotes to count.
     * @example
     * // Count the number of AccountEmotes
     * const count = await prisma.accountEmote.count({
     *   where: {
     *     // ... the filter for the AccountEmotes we want to count
     *   }
     * })
    **/
    count<T extends AccountEmoteCountArgs>(
      args?: Subset<T, AccountEmoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountEmoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountEmote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountEmoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountEmoteAggregateArgs>(args: Subset<T, AccountEmoteAggregateArgs>): Prisma.PrismaPromise<GetAccountEmoteAggregateType<T>>

    /**
     * Group by AccountEmote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountEmoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountEmoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountEmoteGroupByArgs['orderBy'] }
        : { orderBy?: AccountEmoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountEmoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountEmoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountEmote model
   */
  readonly fields: AccountEmoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountEmote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountEmoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    emote<T extends EmoteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmoteDefaultArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountEmote model
   */
  interface AccountEmoteFieldRefs {
    readonly accountId: FieldRef<"AccountEmote", 'Int'>
    readonly emoteId: FieldRef<"AccountEmote", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AccountEmote findUnique
   */
  export type AccountEmoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    /**
     * Filter, which AccountEmote to fetch.
     */
    where: AccountEmoteWhereUniqueInput
  }

  /**
   * AccountEmote findUniqueOrThrow
   */
  export type AccountEmoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    /**
     * Filter, which AccountEmote to fetch.
     */
    where: AccountEmoteWhereUniqueInput
  }

  /**
   * AccountEmote findFirst
   */
  export type AccountEmoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    /**
     * Filter, which AccountEmote to fetch.
     */
    where?: AccountEmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountEmotes to fetch.
     */
    orderBy?: AccountEmoteOrderByWithRelationInput | AccountEmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountEmotes.
     */
    cursor?: AccountEmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountEmotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountEmotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountEmotes.
     */
    distinct?: AccountEmoteScalarFieldEnum | AccountEmoteScalarFieldEnum[]
  }

  /**
   * AccountEmote findFirstOrThrow
   */
  export type AccountEmoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    /**
     * Filter, which AccountEmote to fetch.
     */
    where?: AccountEmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountEmotes to fetch.
     */
    orderBy?: AccountEmoteOrderByWithRelationInput | AccountEmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountEmotes.
     */
    cursor?: AccountEmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountEmotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountEmotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountEmotes.
     */
    distinct?: AccountEmoteScalarFieldEnum | AccountEmoteScalarFieldEnum[]
  }

  /**
   * AccountEmote findMany
   */
  export type AccountEmoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    /**
     * Filter, which AccountEmotes to fetch.
     */
    where?: AccountEmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountEmotes to fetch.
     */
    orderBy?: AccountEmoteOrderByWithRelationInput | AccountEmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountEmotes.
     */
    cursor?: AccountEmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountEmotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountEmotes.
     */
    skip?: number
    distinct?: AccountEmoteScalarFieldEnum | AccountEmoteScalarFieldEnum[]
  }

  /**
   * AccountEmote create
   */
  export type AccountEmoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountEmote.
     */
    data: XOR<AccountEmoteCreateInput, AccountEmoteUncheckedCreateInput>
  }

  /**
   * AccountEmote createMany
   */
  export type AccountEmoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountEmotes.
     */
    data: AccountEmoteCreateManyInput | AccountEmoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountEmote update
   */
  export type AccountEmoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountEmote.
     */
    data: XOR<AccountEmoteUpdateInput, AccountEmoteUncheckedUpdateInput>
    /**
     * Choose, which AccountEmote to update.
     */
    where: AccountEmoteWhereUniqueInput
  }

  /**
   * AccountEmote updateMany
   */
  export type AccountEmoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountEmotes.
     */
    data: XOR<AccountEmoteUpdateManyMutationInput, AccountEmoteUncheckedUpdateManyInput>
    /**
     * Filter which AccountEmotes to update
     */
    where?: AccountEmoteWhereInput
    /**
     * Limit how many AccountEmotes to update.
     */
    limit?: number
  }

  /**
   * AccountEmote upsert
   */
  export type AccountEmoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountEmote to update in case it exists.
     */
    where: AccountEmoteWhereUniqueInput
    /**
     * In case the AccountEmote found by the `where` argument doesn't exist, create a new AccountEmote with this data.
     */
    create: XOR<AccountEmoteCreateInput, AccountEmoteUncheckedCreateInput>
    /**
     * In case the AccountEmote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountEmoteUpdateInput, AccountEmoteUncheckedUpdateInput>
  }

  /**
   * AccountEmote delete
   */
  export type AccountEmoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
    /**
     * Filter which AccountEmote to delete.
     */
    where: AccountEmoteWhereUniqueInput
  }

  /**
   * AccountEmote deleteMany
   */
  export type AccountEmoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountEmotes to delete
     */
    where?: AccountEmoteWhereInput
    /**
     * Limit how many AccountEmotes to delete.
     */
    limit?: number
  }

  /**
   * AccountEmote without action
   */
  export type AccountEmoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountEmote
     */
    select?: AccountEmoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountEmote
     */
    omit?: AccountEmoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountEmoteInclude<ExtArgs> | null
  }


  /**
   * Model AccountIcon
   */

  export type AggregateAccountIcon = {
    _count: AccountIconCountAggregateOutputType | null
    _avg: AccountIconAvgAggregateOutputType | null
    _sum: AccountIconSumAggregateOutputType | null
    _min: AccountIconMinAggregateOutputType | null
    _max: AccountIconMaxAggregateOutputType | null
  }

  export type AccountIconAvgAggregateOutputType = {
    accountId: number | null
    iconId: number | null
  }

  export type AccountIconSumAggregateOutputType = {
    accountId: number | null
    iconId: number | null
  }

  export type AccountIconMinAggregateOutputType = {
    accountId: number | null
    iconId: number | null
  }

  export type AccountIconMaxAggregateOutputType = {
    accountId: number | null
    iconId: number | null
  }

  export type AccountIconCountAggregateOutputType = {
    accountId: number
    iconId: number
    _all: number
  }


  export type AccountIconAvgAggregateInputType = {
    accountId?: true
    iconId?: true
  }

  export type AccountIconSumAggregateInputType = {
    accountId?: true
    iconId?: true
  }

  export type AccountIconMinAggregateInputType = {
    accountId?: true
    iconId?: true
  }

  export type AccountIconMaxAggregateInputType = {
    accountId?: true
    iconId?: true
  }

  export type AccountIconCountAggregateInputType = {
    accountId?: true
    iconId?: true
    _all?: true
  }

  export type AccountIconAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountIcon to aggregate.
     */
    where?: AccountIconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountIcons to fetch.
     */
    orderBy?: AccountIconOrderByWithRelationInput | AccountIconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountIconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountIcons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountIcons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountIcons
    **/
    _count?: true | AccountIconCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountIconAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountIconSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountIconMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountIconMaxAggregateInputType
  }

  export type GetAccountIconAggregateType<T extends AccountIconAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountIcon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountIcon[P]>
      : GetScalarType<T[P], AggregateAccountIcon[P]>
  }




  export type AccountIconGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountIconWhereInput
    orderBy?: AccountIconOrderByWithAggregationInput | AccountIconOrderByWithAggregationInput[]
    by: AccountIconScalarFieldEnum[] | AccountIconScalarFieldEnum
    having?: AccountIconScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountIconCountAggregateInputType | true
    _avg?: AccountIconAvgAggregateInputType
    _sum?: AccountIconSumAggregateInputType
    _min?: AccountIconMinAggregateInputType
    _max?: AccountIconMaxAggregateInputType
  }

  export type AccountIconGroupByOutputType = {
    accountId: number
    iconId: number
    _count: AccountIconCountAggregateOutputType | null
    _avg: AccountIconAvgAggregateOutputType | null
    _sum: AccountIconSumAggregateOutputType | null
    _min: AccountIconMinAggregateOutputType | null
    _max: AccountIconMaxAggregateOutputType | null
  }

  type GetAccountIconGroupByPayload<T extends AccountIconGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountIconGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountIconGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountIconGroupByOutputType[P]>
            : GetScalarType<T[P], AccountIconGroupByOutputType[P]>
        }
      >
    >


  export type AccountIconSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountId?: boolean
    iconId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    icon?: boolean | IconDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountIcon"]>



  export type AccountIconSelectScalar = {
    accountId?: boolean
    iconId?: boolean
  }

  export type AccountIconOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"accountId" | "iconId", ExtArgs["result"]["accountIcon"]>
  export type AccountIconInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    icon?: boolean | IconDefaultArgs<ExtArgs>
  }

  export type $AccountIconPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountIcon"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      icon: Prisma.$IconPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      accountId: number
      iconId: number
    }, ExtArgs["result"]["accountIcon"]>
    composites: {}
  }

  type AccountIconGetPayload<S extends boolean | null | undefined | AccountIconDefaultArgs> = $Result.GetResult<Prisma.$AccountIconPayload, S>

  type AccountIconCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountIconFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountIconCountAggregateInputType | true
    }

  export interface AccountIconDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountIcon'], meta: { name: 'AccountIcon' } }
    /**
     * Find zero or one AccountIcon that matches the filter.
     * @param {AccountIconFindUniqueArgs} args - Arguments to find a AccountIcon
     * @example
     * // Get one AccountIcon
     * const accountIcon = await prisma.accountIcon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountIconFindUniqueArgs>(args: SelectSubset<T, AccountIconFindUniqueArgs<ExtArgs>>): Prisma__AccountIconClient<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountIcon that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountIconFindUniqueOrThrowArgs} args - Arguments to find a AccountIcon
     * @example
     * // Get one AccountIcon
     * const accountIcon = await prisma.accountIcon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountIconFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountIconFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountIconClient<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountIcon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountIconFindFirstArgs} args - Arguments to find a AccountIcon
     * @example
     * // Get one AccountIcon
     * const accountIcon = await prisma.accountIcon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountIconFindFirstArgs>(args?: SelectSubset<T, AccountIconFindFirstArgs<ExtArgs>>): Prisma__AccountIconClient<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountIcon that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountIconFindFirstOrThrowArgs} args - Arguments to find a AccountIcon
     * @example
     * // Get one AccountIcon
     * const accountIcon = await prisma.accountIcon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountIconFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountIconFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountIconClient<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountIcons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountIconFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountIcons
     * const accountIcons = await prisma.accountIcon.findMany()
     * 
     * // Get first 10 AccountIcons
     * const accountIcons = await prisma.accountIcon.findMany({ take: 10 })
     * 
     * // Only select the `accountId`
     * const accountIconWithAccountIdOnly = await prisma.accountIcon.findMany({ select: { accountId: true } })
     * 
     */
    findMany<T extends AccountIconFindManyArgs>(args?: SelectSubset<T, AccountIconFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountIcon.
     * @param {AccountIconCreateArgs} args - Arguments to create a AccountIcon.
     * @example
     * // Create one AccountIcon
     * const AccountIcon = await prisma.accountIcon.create({
     *   data: {
     *     // ... data to create a AccountIcon
     *   }
     * })
     * 
     */
    create<T extends AccountIconCreateArgs>(args: SelectSubset<T, AccountIconCreateArgs<ExtArgs>>): Prisma__AccountIconClient<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountIcons.
     * @param {AccountIconCreateManyArgs} args - Arguments to create many AccountIcons.
     * @example
     * // Create many AccountIcons
     * const accountIcon = await prisma.accountIcon.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountIconCreateManyArgs>(args?: SelectSubset<T, AccountIconCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountIcon.
     * @param {AccountIconDeleteArgs} args - Arguments to delete one AccountIcon.
     * @example
     * // Delete one AccountIcon
     * const AccountIcon = await prisma.accountIcon.delete({
     *   where: {
     *     // ... filter to delete one AccountIcon
     *   }
     * })
     * 
     */
    delete<T extends AccountIconDeleteArgs>(args: SelectSubset<T, AccountIconDeleteArgs<ExtArgs>>): Prisma__AccountIconClient<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountIcon.
     * @param {AccountIconUpdateArgs} args - Arguments to update one AccountIcon.
     * @example
     * // Update one AccountIcon
     * const accountIcon = await prisma.accountIcon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountIconUpdateArgs>(args: SelectSubset<T, AccountIconUpdateArgs<ExtArgs>>): Prisma__AccountIconClient<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountIcons.
     * @param {AccountIconDeleteManyArgs} args - Arguments to filter AccountIcons to delete.
     * @example
     * // Delete a few AccountIcons
     * const { count } = await prisma.accountIcon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountIconDeleteManyArgs>(args?: SelectSubset<T, AccountIconDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountIcons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountIconUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountIcons
     * const accountIcon = await prisma.accountIcon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountIconUpdateManyArgs>(args: SelectSubset<T, AccountIconUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountIcon.
     * @param {AccountIconUpsertArgs} args - Arguments to update or create a AccountIcon.
     * @example
     * // Update or create a AccountIcon
     * const accountIcon = await prisma.accountIcon.upsert({
     *   create: {
     *     // ... data to create a AccountIcon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountIcon we want to update
     *   }
     * })
     */
    upsert<T extends AccountIconUpsertArgs>(args: SelectSubset<T, AccountIconUpsertArgs<ExtArgs>>): Prisma__AccountIconClient<$Result.GetResult<Prisma.$AccountIconPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountIcons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountIconCountArgs} args - Arguments to filter AccountIcons to count.
     * @example
     * // Count the number of AccountIcons
     * const count = await prisma.accountIcon.count({
     *   where: {
     *     // ... the filter for the AccountIcons we want to count
     *   }
     * })
    **/
    count<T extends AccountIconCountArgs>(
      args?: Subset<T, AccountIconCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountIconCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountIcon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountIconAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountIconAggregateArgs>(args: Subset<T, AccountIconAggregateArgs>): Prisma.PrismaPromise<GetAccountIconAggregateType<T>>

    /**
     * Group by AccountIcon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountIconGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountIconGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountIconGroupByArgs['orderBy'] }
        : { orderBy?: AccountIconGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountIconGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountIconGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountIcon model
   */
  readonly fields: AccountIconFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountIcon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountIconClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    icon<T extends IconDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IconDefaultArgs<ExtArgs>>): Prisma__IconClient<$Result.GetResult<Prisma.$IconPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountIcon model
   */
  interface AccountIconFieldRefs {
    readonly accountId: FieldRef<"AccountIcon", 'Int'>
    readonly iconId: FieldRef<"AccountIcon", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AccountIcon findUnique
   */
  export type AccountIconFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    /**
     * Filter, which AccountIcon to fetch.
     */
    where: AccountIconWhereUniqueInput
  }

  /**
   * AccountIcon findUniqueOrThrow
   */
  export type AccountIconFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    /**
     * Filter, which AccountIcon to fetch.
     */
    where: AccountIconWhereUniqueInput
  }

  /**
   * AccountIcon findFirst
   */
  export type AccountIconFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    /**
     * Filter, which AccountIcon to fetch.
     */
    where?: AccountIconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountIcons to fetch.
     */
    orderBy?: AccountIconOrderByWithRelationInput | AccountIconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountIcons.
     */
    cursor?: AccountIconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountIcons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountIcons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountIcons.
     */
    distinct?: AccountIconScalarFieldEnum | AccountIconScalarFieldEnum[]
  }

  /**
   * AccountIcon findFirstOrThrow
   */
  export type AccountIconFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    /**
     * Filter, which AccountIcon to fetch.
     */
    where?: AccountIconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountIcons to fetch.
     */
    orderBy?: AccountIconOrderByWithRelationInput | AccountIconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountIcons.
     */
    cursor?: AccountIconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountIcons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountIcons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountIcons.
     */
    distinct?: AccountIconScalarFieldEnum | AccountIconScalarFieldEnum[]
  }

  /**
   * AccountIcon findMany
   */
  export type AccountIconFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    /**
     * Filter, which AccountIcons to fetch.
     */
    where?: AccountIconWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountIcons to fetch.
     */
    orderBy?: AccountIconOrderByWithRelationInput | AccountIconOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountIcons.
     */
    cursor?: AccountIconWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountIcons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountIcons.
     */
    skip?: number
    distinct?: AccountIconScalarFieldEnum | AccountIconScalarFieldEnum[]
  }

  /**
   * AccountIcon create
   */
  export type AccountIconCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountIcon.
     */
    data: XOR<AccountIconCreateInput, AccountIconUncheckedCreateInput>
  }

  /**
   * AccountIcon createMany
   */
  export type AccountIconCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountIcons.
     */
    data: AccountIconCreateManyInput | AccountIconCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountIcon update
   */
  export type AccountIconUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountIcon.
     */
    data: XOR<AccountIconUpdateInput, AccountIconUncheckedUpdateInput>
    /**
     * Choose, which AccountIcon to update.
     */
    where: AccountIconWhereUniqueInput
  }

  /**
   * AccountIcon updateMany
   */
  export type AccountIconUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountIcons.
     */
    data: XOR<AccountIconUpdateManyMutationInput, AccountIconUncheckedUpdateManyInput>
    /**
     * Filter which AccountIcons to update
     */
    where?: AccountIconWhereInput
    /**
     * Limit how many AccountIcons to update.
     */
    limit?: number
  }

  /**
   * AccountIcon upsert
   */
  export type AccountIconUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountIcon to update in case it exists.
     */
    where: AccountIconWhereUniqueInput
    /**
     * In case the AccountIcon found by the `where` argument doesn't exist, create a new AccountIcon with this data.
     */
    create: XOR<AccountIconCreateInput, AccountIconUncheckedCreateInput>
    /**
     * In case the AccountIcon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountIconUpdateInput, AccountIconUncheckedUpdateInput>
  }

  /**
   * AccountIcon delete
   */
  export type AccountIconDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
    /**
     * Filter which AccountIcon to delete.
     */
    where: AccountIconWhereUniqueInput
  }

  /**
   * AccountIcon deleteMany
   */
  export type AccountIconDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountIcons to delete
     */
    where?: AccountIconWhereInput
    /**
     * Limit how many AccountIcons to delete.
     */
    limit?: number
  }

  /**
   * AccountIcon without action
   */
  export type AccountIconDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountIcon
     */
    select?: AccountIconSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountIcon
     */
    omit?: AccountIconOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIconInclude<ExtArgs> | null
  }


  /**
   * Model AccountLittleLegend
   */

  export type AggregateAccountLittleLegend = {
    _count: AccountLittleLegendCountAggregateOutputType | null
    _avg: AccountLittleLegendAvgAggregateOutputType | null
    _sum: AccountLittleLegendSumAggregateOutputType | null
    _min: AccountLittleLegendMinAggregateOutputType | null
    _max: AccountLittleLegendMaxAggregateOutputType | null
  }

  export type AccountLittleLegendAvgAggregateOutputType = {
    accountId: number | null
    littleLegendId: number | null
  }

  export type AccountLittleLegendSumAggregateOutputType = {
    accountId: number | null
    littleLegendId: number | null
  }

  export type AccountLittleLegendMinAggregateOutputType = {
    accountId: number | null
    littleLegendId: number | null
  }

  export type AccountLittleLegendMaxAggregateOutputType = {
    accountId: number | null
    littleLegendId: number | null
  }

  export type AccountLittleLegendCountAggregateOutputType = {
    accountId: number
    littleLegendId: number
    _all: number
  }


  export type AccountLittleLegendAvgAggregateInputType = {
    accountId?: true
    littleLegendId?: true
  }

  export type AccountLittleLegendSumAggregateInputType = {
    accountId?: true
    littleLegendId?: true
  }

  export type AccountLittleLegendMinAggregateInputType = {
    accountId?: true
    littleLegendId?: true
  }

  export type AccountLittleLegendMaxAggregateInputType = {
    accountId?: true
    littleLegendId?: true
  }

  export type AccountLittleLegendCountAggregateInputType = {
    accountId?: true
    littleLegendId?: true
    _all?: true
  }

  export type AccountLittleLegendAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountLittleLegend to aggregate.
     */
    where?: AccountLittleLegendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountLittleLegends to fetch.
     */
    orderBy?: AccountLittleLegendOrderByWithRelationInput | AccountLittleLegendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountLittleLegendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountLittleLegends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountLittleLegends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountLittleLegends
    **/
    _count?: true | AccountLittleLegendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountLittleLegendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountLittleLegendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountLittleLegendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountLittleLegendMaxAggregateInputType
  }

  export type GetAccountLittleLegendAggregateType<T extends AccountLittleLegendAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountLittleLegend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountLittleLegend[P]>
      : GetScalarType<T[P], AggregateAccountLittleLegend[P]>
  }




  export type AccountLittleLegendGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountLittleLegendWhereInput
    orderBy?: AccountLittleLegendOrderByWithAggregationInput | AccountLittleLegendOrderByWithAggregationInput[]
    by: AccountLittleLegendScalarFieldEnum[] | AccountLittleLegendScalarFieldEnum
    having?: AccountLittleLegendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountLittleLegendCountAggregateInputType | true
    _avg?: AccountLittleLegendAvgAggregateInputType
    _sum?: AccountLittleLegendSumAggregateInputType
    _min?: AccountLittleLegendMinAggregateInputType
    _max?: AccountLittleLegendMaxAggregateInputType
  }

  export type AccountLittleLegendGroupByOutputType = {
    accountId: number
    littleLegendId: number
    _count: AccountLittleLegendCountAggregateOutputType | null
    _avg: AccountLittleLegendAvgAggregateOutputType | null
    _sum: AccountLittleLegendSumAggregateOutputType | null
    _min: AccountLittleLegendMinAggregateOutputType | null
    _max: AccountLittleLegendMaxAggregateOutputType | null
  }

  type GetAccountLittleLegendGroupByPayload<T extends AccountLittleLegendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountLittleLegendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountLittleLegendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountLittleLegendGroupByOutputType[P]>
            : GetScalarType<T[P], AccountLittleLegendGroupByOutputType[P]>
        }
      >
    >


  export type AccountLittleLegendSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountId?: boolean
    littleLegendId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    littleLegend?: boolean | LittleLegendDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountLittleLegend"]>



  export type AccountLittleLegendSelectScalar = {
    accountId?: boolean
    littleLegendId?: boolean
  }

  export type AccountLittleLegendOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"accountId" | "littleLegendId", ExtArgs["result"]["accountLittleLegend"]>
  export type AccountLittleLegendInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    littleLegend?: boolean | LittleLegendDefaultArgs<ExtArgs>
  }

  export type $AccountLittleLegendPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountLittleLegend"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      littleLegend: Prisma.$LittleLegendPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      accountId: number
      littleLegendId: number
    }, ExtArgs["result"]["accountLittleLegend"]>
    composites: {}
  }

  type AccountLittleLegendGetPayload<S extends boolean | null | undefined | AccountLittleLegendDefaultArgs> = $Result.GetResult<Prisma.$AccountLittleLegendPayload, S>

  type AccountLittleLegendCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountLittleLegendFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountLittleLegendCountAggregateInputType | true
    }

  export interface AccountLittleLegendDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountLittleLegend'], meta: { name: 'AccountLittleLegend' } }
    /**
     * Find zero or one AccountLittleLegend that matches the filter.
     * @param {AccountLittleLegendFindUniqueArgs} args - Arguments to find a AccountLittleLegend
     * @example
     * // Get one AccountLittleLegend
     * const accountLittleLegend = await prisma.accountLittleLegend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountLittleLegendFindUniqueArgs>(args: SelectSubset<T, AccountLittleLegendFindUniqueArgs<ExtArgs>>): Prisma__AccountLittleLegendClient<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountLittleLegend that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountLittleLegendFindUniqueOrThrowArgs} args - Arguments to find a AccountLittleLegend
     * @example
     * // Get one AccountLittleLegend
     * const accountLittleLegend = await prisma.accountLittleLegend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountLittleLegendFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountLittleLegendFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountLittleLegendClient<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountLittleLegend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLittleLegendFindFirstArgs} args - Arguments to find a AccountLittleLegend
     * @example
     * // Get one AccountLittleLegend
     * const accountLittleLegend = await prisma.accountLittleLegend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountLittleLegendFindFirstArgs>(args?: SelectSubset<T, AccountLittleLegendFindFirstArgs<ExtArgs>>): Prisma__AccountLittleLegendClient<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountLittleLegend that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLittleLegendFindFirstOrThrowArgs} args - Arguments to find a AccountLittleLegend
     * @example
     * // Get one AccountLittleLegend
     * const accountLittleLegend = await prisma.accountLittleLegend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountLittleLegendFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountLittleLegendFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountLittleLegendClient<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountLittleLegends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLittleLegendFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountLittleLegends
     * const accountLittleLegends = await prisma.accountLittleLegend.findMany()
     * 
     * // Get first 10 AccountLittleLegends
     * const accountLittleLegends = await prisma.accountLittleLegend.findMany({ take: 10 })
     * 
     * // Only select the `accountId`
     * const accountLittleLegendWithAccountIdOnly = await prisma.accountLittleLegend.findMany({ select: { accountId: true } })
     * 
     */
    findMany<T extends AccountLittleLegendFindManyArgs>(args?: SelectSubset<T, AccountLittleLegendFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountLittleLegend.
     * @param {AccountLittleLegendCreateArgs} args - Arguments to create a AccountLittleLegend.
     * @example
     * // Create one AccountLittleLegend
     * const AccountLittleLegend = await prisma.accountLittleLegend.create({
     *   data: {
     *     // ... data to create a AccountLittleLegend
     *   }
     * })
     * 
     */
    create<T extends AccountLittleLegendCreateArgs>(args: SelectSubset<T, AccountLittleLegendCreateArgs<ExtArgs>>): Prisma__AccountLittleLegendClient<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountLittleLegends.
     * @param {AccountLittleLegendCreateManyArgs} args - Arguments to create many AccountLittleLegends.
     * @example
     * // Create many AccountLittleLegends
     * const accountLittleLegend = await prisma.accountLittleLegend.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountLittleLegendCreateManyArgs>(args?: SelectSubset<T, AccountLittleLegendCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountLittleLegend.
     * @param {AccountLittleLegendDeleteArgs} args - Arguments to delete one AccountLittleLegend.
     * @example
     * // Delete one AccountLittleLegend
     * const AccountLittleLegend = await prisma.accountLittleLegend.delete({
     *   where: {
     *     // ... filter to delete one AccountLittleLegend
     *   }
     * })
     * 
     */
    delete<T extends AccountLittleLegendDeleteArgs>(args: SelectSubset<T, AccountLittleLegendDeleteArgs<ExtArgs>>): Prisma__AccountLittleLegendClient<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountLittleLegend.
     * @param {AccountLittleLegendUpdateArgs} args - Arguments to update one AccountLittleLegend.
     * @example
     * // Update one AccountLittleLegend
     * const accountLittleLegend = await prisma.accountLittleLegend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountLittleLegendUpdateArgs>(args: SelectSubset<T, AccountLittleLegendUpdateArgs<ExtArgs>>): Prisma__AccountLittleLegendClient<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountLittleLegends.
     * @param {AccountLittleLegendDeleteManyArgs} args - Arguments to filter AccountLittleLegends to delete.
     * @example
     * // Delete a few AccountLittleLegends
     * const { count } = await prisma.accountLittleLegend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountLittleLegendDeleteManyArgs>(args?: SelectSubset<T, AccountLittleLegendDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountLittleLegends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLittleLegendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountLittleLegends
     * const accountLittleLegend = await prisma.accountLittleLegend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountLittleLegendUpdateManyArgs>(args: SelectSubset<T, AccountLittleLegendUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountLittleLegend.
     * @param {AccountLittleLegendUpsertArgs} args - Arguments to update or create a AccountLittleLegend.
     * @example
     * // Update or create a AccountLittleLegend
     * const accountLittleLegend = await prisma.accountLittleLegend.upsert({
     *   create: {
     *     // ... data to create a AccountLittleLegend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountLittleLegend we want to update
     *   }
     * })
     */
    upsert<T extends AccountLittleLegendUpsertArgs>(args: SelectSubset<T, AccountLittleLegendUpsertArgs<ExtArgs>>): Prisma__AccountLittleLegendClient<$Result.GetResult<Prisma.$AccountLittleLegendPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountLittleLegends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLittleLegendCountArgs} args - Arguments to filter AccountLittleLegends to count.
     * @example
     * // Count the number of AccountLittleLegends
     * const count = await prisma.accountLittleLegend.count({
     *   where: {
     *     // ... the filter for the AccountLittleLegends we want to count
     *   }
     * })
    **/
    count<T extends AccountLittleLegendCountArgs>(
      args?: Subset<T, AccountLittleLegendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountLittleLegendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountLittleLegend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLittleLegendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountLittleLegendAggregateArgs>(args: Subset<T, AccountLittleLegendAggregateArgs>): Prisma.PrismaPromise<GetAccountLittleLegendAggregateType<T>>

    /**
     * Group by AccountLittleLegend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountLittleLegendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountLittleLegendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountLittleLegendGroupByArgs['orderBy'] }
        : { orderBy?: AccountLittleLegendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountLittleLegendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountLittleLegendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountLittleLegend model
   */
  readonly fields: AccountLittleLegendFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountLittleLegend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountLittleLegendClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    littleLegend<T extends LittleLegendDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LittleLegendDefaultArgs<ExtArgs>>): Prisma__LittleLegendClient<$Result.GetResult<Prisma.$LittleLegendPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountLittleLegend model
   */
  interface AccountLittleLegendFieldRefs {
    readonly accountId: FieldRef<"AccountLittleLegend", 'Int'>
    readonly littleLegendId: FieldRef<"AccountLittleLegend", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AccountLittleLegend findUnique
   */
  export type AccountLittleLegendFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    /**
     * Filter, which AccountLittleLegend to fetch.
     */
    where: AccountLittleLegendWhereUniqueInput
  }

  /**
   * AccountLittleLegend findUniqueOrThrow
   */
  export type AccountLittleLegendFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    /**
     * Filter, which AccountLittleLegend to fetch.
     */
    where: AccountLittleLegendWhereUniqueInput
  }

  /**
   * AccountLittleLegend findFirst
   */
  export type AccountLittleLegendFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    /**
     * Filter, which AccountLittleLegend to fetch.
     */
    where?: AccountLittleLegendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountLittleLegends to fetch.
     */
    orderBy?: AccountLittleLegendOrderByWithRelationInput | AccountLittleLegendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountLittleLegends.
     */
    cursor?: AccountLittleLegendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountLittleLegends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountLittleLegends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountLittleLegends.
     */
    distinct?: AccountLittleLegendScalarFieldEnum | AccountLittleLegendScalarFieldEnum[]
  }

  /**
   * AccountLittleLegend findFirstOrThrow
   */
  export type AccountLittleLegendFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    /**
     * Filter, which AccountLittleLegend to fetch.
     */
    where?: AccountLittleLegendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountLittleLegends to fetch.
     */
    orderBy?: AccountLittleLegendOrderByWithRelationInput | AccountLittleLegendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountLittleLegends.
     */
    cursor?: AccountLittleLegendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountLittleLegends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountLittleLegends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountLittleLegends.
     */
    distinct?: AccountLittleLegendScalarFieldEnum | AccountLittleLegendScalarFieldEnum[]
  }

  /**
   * AccountLittleLegend findMany
   */
  export type AccountLittleLegendFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    /**
     * Filter, which AccountLittleLegends to fetch.
     */
    where?: AccountLittleLegendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountLittleLegends to fetch.
     */
    orderBy?: AccountLittleLegendOrderByWithRelationInput | AccountLittleLegendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountLittleLegends.
     */
    cursor?: AccountLittleLegendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountLittleLegends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountLittleLegends.
     */
    skip?: number
    distinct?: AccountLittleLegendScalarFieldEnum | AccountLittleLegendScalarFieldEnum[]
  }

  /**
   * AccountLittleLegend create
   */
  export type AccountLittleLegendCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountLittleLegend.
     */
    data: XOR<AccountLittleLegendCreateInput, AccountLittleLegendUncheckedCreateInput>
  }

  /**
   * AccountLittleLegend createMany
   */
  export type AccountLittleLegendCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountLittleLegends.
     */
    data: AccountLittleLegendCreateManyInput | AccountLittleLegendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountLittleLegend update
   */
  export type AccountLittleLegendUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountLittleLegend.
     */
    data: XOR<AccountLittleLegendUpdateInput, AccountLittleLegendUncheckedUpdateInput>
    /**
     * Choose, which AccountLittleLegend to update.
     */
    where: AccountLittleLegendWhereUniqueInput
  }

  /**
   * AccountLittleLegend updateMany
   */
  export type AccountLittleLegendUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountLittleLegends.
     */
    data: XOR<AccountLittleLegendUpdateManyMutationInput, AccountLittleLegendUncheckedUpdateManyInput>
    /**
     * Filter which AccountLittleLegends to update
     */
    where?: AccountLittleLegendWhereInput
    /**
     * Limit how many AccountLittleLegends to update.
     */
    limit?: number
  }

  /**
   * AccountLittleLegend upsert
   */
  export type AccountLittleLegendUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountLittleLegend to update in case it exists.
     */
    where: AccountLittleLegendWhereUniqueInput
    /**
     * In case the AccountLittleLegend found by the `where` argument doesn't exist, create a new AccountLittleLegend with this data.
     */
    create: XOR<AccountLittleLegendCreateInput, AccountLittleLegendUncheckedCreateInput>
    /**
     * In case the AccountLittleLegend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountLittleLegendUpdateInput, AccountLittleLegendUncheckedUpdateInput>
  }

  /**
   * AccountLittleLegend delete
   */
  export type AccountLittleLegendDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
    /**
     * Filter which AccountLittleLegend to delete.
     */
    where: AccountLittleLegendWhereUniqueInput
  }

  /**
   * AccountLittleLegend deleteMany
   */
  export type AccountLittleLegendDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountLittleLegends to delete
     */
    where?: AccountLittleLegendWhereInput
    /**
     * Limit how many AccountLittleLegends to delete.
     */
    limit?: number
  }

  /**
   * AccountLittleLegend without action
   */
  export type AccountLittleLegendDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountLittleLegend
     */
    select?: AccountLittleLegendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountLittleLegend
     */
    omit?: AccountLittleLegendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountLittleLegendInclude<ExtArgs> | null
  }


  /**
   * Model AccountBoom
   */

  export type AggregateAccountBoom = {
    _count: AccountBoomCountAggregateOutputType | null
    _avg: AccountBoomAvgAggregateOutputType | null
    _sum: AccountBoomSumAggregateOutputType | null
    _min: AccountBoomMinAggregateOutputType | null
    _max: AccountBoomMaxAggregateOutputType | null
  }

  export type AccountBoomAvgAggregateOutputType = {
    accountId: number | null
    boomId: number | null
  }

  export type AccountBoomSumAggregateOutputType = {
    accountId: number | null
    boomId: number | null
  }

  export type AccountBoomMinAggregateOutputType = {
    accountId: number | null
    boomId: number | null
  }

  export type AccountBoomMaxAggregateOutputType = {
    accountId: number | null
    boomId: number | null
  }

  export type AccountBoomCountAggregateOutputType = {
    accountId: number
    boomId: number
    _all: number
  }


  export type AccountBoomAvgAggregateInputType = {
    accountId?: true
    boomId?: true
  }

  export type AccountBoomSumAggregateInputType = {
    accountId?: true
    boomId?: true
  }

  export type AccountBoomMinAggregateInputType = {
    accountId?: true
    boomId?: true
  }

  export type AccountBoomMaxAggregateInputType = {
    accountId?: true
    boomId?: true
  }

  export type AccountBoomCountAggregateInputType = {
    accountId?: true
    boomId?: true
    _all?: true
  }

  export type AccountBoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountBoom to aggregate.
     */
    where?: AccountBoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountBooms to fetch.
     */
    orderBy?: AccountBoomOrderByWithRelationInput | AccountBoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountBoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountBooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountBooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountBooms
    **/
    _count?: true | AccountBoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountBoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountBoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountBoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountBoomMaxAggregateInputType
  }

  export type GetAccountBoomAggregateType<T extends AccountBoomAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountBoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountBoom[P]>
      : GetScalarType<T[P], AggregateAccountBoom[P]>
  }




  export type AccountBoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountBoomWhereInput
    orderBy?: AccountBoomOrderByWithAggregationInput | AccountBoomOrderByWithAggregationInput[]
    by: AccountBoomScalarFieldEnum[] | AccountBoomScalarFieldEnum
    having?: AccountBoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountBoomCountAggregateInputType | true
    _avg?: AccountBoomAvgAggregateInputType
    _sum?: AccountBoomSumAggregateInputType
    _min?: AccountBoomMinAggregateInputType
    _max?: AccountBoomMaxAggregateInputType
  }

  export type AccountBoomGroupByOutputType = {
    accountId: number
    boomId: number
    _count: AccountBoomCountAggregateOutputType | null
    _avg: AccountBoomAvgAggregateOutputType | null
    _sum: AccountBoomSumAggregateOutputType | null
    _min: AccountBoomMinAggregateOutputType | null
    _max: AccountBoomMaxAggregateOutputType | null
  }

  type GetAccountBoomGroupByPayload<T extends AccountBoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountBoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountBoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountBoomGroupByOutputType[P]>
            : GetScalarType<T[P], AccountBoomGroupByOutputType[P]>
        }
      >
    >


  export type AccountBoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountId?: boolean
    boomId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    boom?: boolean | BoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountBoom"]>



  export type AccountBoomSelectScalar = {
    accountId?: boolean
    boomId?: boolean
  }

  export type AccountBoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"accountId" | "boomId", ExtArgs["result"]["accountBoom"]>
  export type AccountBoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    boom?: boolean | BoomDefaultArgs<ExtArgs>
  }

  export type $AccountBoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountBoom"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      boom: Prisma.$BoomPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      accountId: number
      boomId: number
    }, ExtArgs["result"]["accountBoom"]>
    composites: {}
  }

  type AccountBoomGetPayload<S extends boolean | null | undefined | AccountBoomDefaultArgs> = $Result.GetResult<Prisma.$AccountBoomPayload, S>

  type AccountBoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountBoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountBoomCountAggregateInputType | true
    }

  export interface AccountBoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountBoom'], meta: { name: 'AccountBoom' } }
    /**
     * Find zero or one AccountBoom that matches the filter.
     * @param {AccountBoomFindUniqueArgs} args - Arguments to find a AccountBoom
     * @example
     * // Get one AccountBoom
     * const accountBoom = await prisma.accountBoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountBoomFindUniqueArgs>(args: SelectSubset<T, AccountBoomFindUniqueArgs<ExtArgs>>): Prisma__AccountBoomClient<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountBoom that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountBoomFindUniqueOrThrowArgs} args - Arguments to find a AccountBoom
     * @example
     * // Get one AccountBoom
     * const accountBoom = await prisma.accountBoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountBoomFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountBoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountBoomClient<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountBoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBoomFindFirstArgs} args - Arguments to find a AccountBoom
     * @example
     * // Get one AccountBoom
     * const accountBoom = await prisma.accountBoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountBoomFindFirstArgs>(args?: SelectSubset<T, AccountBoomFindFirstArgs<ExtArgs>>): Prisma__AccountBoomClient<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountBoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBoomFindFirstOrThrowArgs} args - Arguments to find a AccountBoom
     * @example
     * // Get one AccountBoom
     * const accountBoom = await prisma.accountBoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountBoomFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountBoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountBoomClient<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountBooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountBooms
     * const accountBooms = await prisma.accountBoom.findMany()
     * 
     * // Get first 10 AccountBooms
     * const accountBooms = await prisma.accountBoom.findMany({ take: 10 })
     * 
     * // Only select the `accountId`
     * const accountBoomWithAccountIdOnly = await prisma.accountBoom.findMany({ select: { accountId: true } })
     * 
     */
    findMany<T extends AccountBoomFindManyArgs>(args?: SelectSubset<T, AccountBoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountBoom.
     * @param {AccountBoomCreateArgs} args - Arguments to create a AccountBoom.
     * @example
     * // Create one AccountBoom
     * const AccountBoom = await prisma.accountBoom.create({
     *   data: {
     *     // ... data to create a AccountBoom
     *   }
     * })
     * 
     */
    create<T extends AccountBoomCreateArgs>(args: SelectSubset<T, AccountBoomCreateArgs<ExtArgs>>): Prisma__AccountBoomClient<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountBooms.
     * @param {AccountBoomCreateManyArgs} args - Arguments to create many AccountBooms.
     * @example
     * // Create many AccountBooms
     * const accountBoom = await prisma.accountBoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountBoomCreateManyArgs>(args?: SelectSubset<T, AccountBoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountBoom.
     * @param {AccountBoomDeleteArgs} args - Arguments to delete one AccountBoom.
     * @example
     * // Delete one AccountBoom
     * const AccountBoom = await prisma.accountBoom.delete({
     *   where: {
     *     // ... filter to delete one AccountBoom
     *   }
     * })
     * 
     */
    delete<T extends AccountBoomDeleteArgs>(args: SelectSubset<T, AccountBoomDeleteArgs<ExtArgs>>): Prisma__AccountBoomClient<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountBoom.
     * @param {AccountBoomUpdateArgs} args - Arguments to update one AccountBoom.
     * @example
     * // Update one AccountBoom
     * const accountBoom = await prisma.accountBoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountBoomUpdateArgs>(args: SelectSubset<T, AccountBoomUpdateArgs<ExtArgs>>): Prisma__AccountBoomClient<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountBooms.
     * @param {AccountBoomDeleteManyArgs} args - Arguments to filter AccountBooms to delete.
     * @example
     * // Delete a few AccountBooms
     * const { count } = await prisma.accountBoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountBoomDeleteManyArgs>(args?: SelectSubset<T, AccountBoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountBooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountBooms
     * const accountBoom = await prisma.accountBoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountBoomUpdateManyArgs>(args: SelectSubset<T, AccountBoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountBoom.
     * @param {AccountBoomUpsertArgs} args - Arguments to update or create a AccountBoom.
     * @example
     * // Update or create a AccountBoom
     * const accountBoom = await prisma.accountBoom.upsert({
     *   create: {
     *     // ... data to create a AccountBoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountBoom we want to update
     *   }
     * })
     */
    upsert<T extends AccountBoomUpsertArgs>(args: SelectSubset<T, AccountBoomUpsertArgs<ExtArgs>>): Prisma__AccountBoomClient<$Result.GetResult<Prisma.$AccountBoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountBooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBoomCountArgs} args - Arguments to filter AccountBooms to count.
     * @example
     * // Count the number of AccountBooms
     * const count = await prisma.accountBoom.count({
     *   where: {
     *     // ... the filter for the AccountBooms we want to count
     *   }
     * })
    **/
    count<T extends AccountBoomCountArgs>(
      args?: Subset<T, AccountBoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountBoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountBoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountBoomAggregateArgs>(args: Subset<T, AccountBoomAggregateArgs>): Prisma.PrismaPromise<GetAccountBoomAggregateType<T>>

    /**
     * Group by AccountBoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountBoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountBoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountBoomGroupByArgs['orderBy'] }
        : { orderBy?: AccountBoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountBoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountBoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountBoom model
   */
  readonly fields: AccountBoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountBoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountBoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    boom<T extends BoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoomDefaultArgs<ExtArgs>>): Prisma__BoomClient<$Result.GetResult<Prisma.$BoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountBoom model
   */
  interface AccountBoomFieldRefs {
    readonly accountId: FieldRef<"AccountBoom", 'Int'>
    readonly boomId: FieldRef<"AccountBoom", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AccountBoom findUnique
   */
  export type AccountBoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    /**
     * Filter, which AccountBoom to fetch.
     */
    where: AccountBoomWhereUniqueInput
  }

  /**
   * AccountBoom findUniqueOrThrow
   */
  export type AccountBoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    /**
     * Filter, which AccountBoom to fetch.
     */
    where: AccountBoomWhereUniqueInput
  }

  /**
   * AccountBoom findFirst
   */
  export type AccountBoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    /**
     * Filter, which AccountBoom to fetch.
     */
    where?: AccountBoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountBooms to fetch.
     */
    orderBy?: AccountBoomOrderByWithRelationInput | AccountBoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountBooms.
     */
    cursor?: AccountBoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountBooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountBooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountBooms.
     */
    distinct?: AccountBoomScalarFieldEnum | AccountBoomScalarFieldEnum[]
  }

  /**
   * AccountBoom findFirstOrThrow
   */
  export type AccountBoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    /**
     * Filter, which AccountBoom to fetch.
     */
    where?: AccountBoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountBooms to fetch.
     */
    orderBy?: AccountBoomOrderByWithRelationInput | AccountBoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountBooms.
     */
    cursor?: AccountBoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountBooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountBooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountBooms.
     */
    distinct?: AccountBoomScalarFieldEnum | AccountBoomScalarFieldEnum[]
  }

  /**
   * AccountBoom findMany
   */
  export type AccountBoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    /**
     * Filter, which AccountBooms to fetch.
     */
    where?: AccountBoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountBooms to fetch.
     */
    orderBy?: AccountBoomOrderByWithRelationInput | AccountBoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountBooms.
     */
    cursor?: AccountBoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountBooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountBooms.
     */
    skip?: number
    distinct?: AccountBoomScalarFieldEnum | AccountBoomScalarFieldEnum[]
  }

  /**
   * AccountBoom create
   */
  export type AccountBoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountBoom.
     */
    data: XOR<AccountBoomCreateInput, AccountBoomUncheckedCreateInput>
  }

  /**
   * AccountBoom createMany
   */
  export type AccountBoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountBooms.
     */
    data: AccountBoomCreateManyInput | AccountBoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountBoom update
   */
  export type AccountBoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountBoom.
     */
    data: XOR<AccountBoomUpdateInput, AccountBoomUncheckedUpdateInput>
    /**
     * Choose, which AccountBoom to update.
     */
    where: AccountBoomWhereUniqueInput
  }

  /**
   * AccountBoom updateMany
   */
  export type AccountBoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountBooms.
     */
    data: XOR<AccountBoomUpdateManyMutationInput, AccountBoomUncheckedUpdateManyInput>
    /**
     * Filter which AccountBooms to update
     */
    where?: AccountBoomWhereInput
    /**
     * Limit how many AccountBooms to update.
     */
    limit?: number
  }

  /**
   * AccountBoom upsert
   */
  export type AccountBoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountBoom to update in case it exists.
     */
    where: AccountBoomWhereUniqueInput
    /**
     * In case the AccountBoom found by the `where` argument doesn't exist, create a new AccountBoom with this data.
     */
    create: XOR<AccountBoomCreateInput, AccountBoomUncheckedCreateInput>
    /**
     * In case the AccountBoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountBoomUpdateInput, AccountBoomUncheckedUpdateInput>
  }

  /**
   * AccountBoom delete
   */
  export type AccountBoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
    /**
     * Filter which AccountBoom to delete.
     */
    where: AccountBoomWhereUniqueInput
  }

  /**
   * AccountBoom deleteMany
   */
  export type AccountBoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountBooms to delete
     */
    where?: AccountBoomWhereInput
    /**
     * Limit how many AccountBooms to delete.
     */
    limit?: number
  }

  /**
   * AccountBoom without action
   */
  export type AccountBoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountBoom
     */
    select?: AccountBoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountBoom
     */
    omit?: AccountBoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountBoomInclude<ExtArgs> | null
  }


  /**
   * Model AccountArena
   */

  export type AggregateAccountArena = {
    _count: AccountArenaCountAggregateOutputType | null
    _avg: AccountArenaAvgAggregateOutputType | null
    _sum: AccountArenaSumAggregateOutputType | null
    _min: AccountArenaMinAggregateOutputType | null
    _max: AccountArenaMaxAggregateOutputType | null
  }

  export type AccountArenaAvgAggregateOutputType = {
    accountId: number | null
    arenaId: number | null
  }

  export type AccountArenaSumAggregateOutputType = {
    accountId: number | null
    arenaId: number | null
  }

  export type AccountArenaMinAggregateOutputType = {
    accountId: number | null
    arenaId: number | null
  }

  export type AccountArenaMaxAggregateOutputType = {
    accountId: number | null
    arenaId: number | null
  }

  export type AccountArenaCountAggregateOutputType = {
    accountId: number
    arenaId: number
    _all: number
  }


  export type AccountArenaAvgAggregateInputType = {
    accountId?: true
    arenaId?: true
  }

  export type AccountArenaSumAggregateInputType = {
    accountId?: true
    arenaId?: true
  }

  export type AccountArenaMinAggregateInputType = {
    accountId?: true
    arenaId?: true
  }

  export type AccountArenaMaxAggregateInputType = {
    accountId?: true
    arenaId?: true
  }

  export type AccountArenaCountAggregateInputType = {
    accountId?: true
    arenaId?: true
    _all?: true
  }

  export type AccountArenaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountArena to aggregate.
     */
    where?: AccountArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountArenas to fetch.
     */
    orderBy?: AccountArenaOrderByWithRelationInput | AccountArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountArenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountArenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountArenas
    **/
    _count?: true | AccountArenaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountArenaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountArenaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountArenaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountArenaMaxAggregateInputType
  }

  export type GetAccountArenaAggregateType<T extends AccountArenaAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountArena]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountArena[P]>
      : GetScalarType<T[P], AggregateAccountArena[P]>
  }




  export type AccountArenaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountArenaWhereInput
    orderBy?: AccountArenaOrderByWithAggregationInput | AccountArenaOrderByWithAggregationInput[]
    by: AccountArenaScalarFieldEnum[] | AccountArenaScalarFieldEnum
    having?: AccountArenaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountArenaCountAggregateInputType | true
    _avg?: AccountArenaAvgAggregateInputType
    _sum?: AccountArenaSumAggregateInputType
    _min?: AccountArenaMinAggregateInputType
    _max?: AccountArenaMaxAggregateInputType
  }

  export type AccountArenaGroupByOutputType = {
    accountId: number
    arenaId: number
    _count: AccountArenaCountAggregateOutputType | null
    _avg: AccountArenaAvgAggregateOutputType | null
    _sum: AccountArenaSumAggregateOutputType | null
    _min: AccountArenaMinAggregateOutputType | null
    _max: AccountArenaMaxAggregateOutputType | null
  }

  type GetAccountArenaGroupByPayload<T extends AccountArenaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountArenaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountArenaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountArenaGroupByOutputType[P]>
            : GetScalarType<T[P], AccountArenaGroupByOutputType[P]>
        }
      >
    >


  export type AccountArenaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountId?: boolean
    arenaId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountArena"]>



  export type AccountArenaSelectScalar = {
    accountId?: boolean
    arenaId?: boolean
  }

  export type AccountArenaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"accountId" | "arenaId", ExtArgs["result"]["accountArena"]>
  export type AccountArenaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
  }

  export type $AccountArenaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountArena"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      arena: Prisma.$ArenaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      accountId: number
      arenaId: number
    }, ExtArgs["result"]["accountArena"]>
    composites: {}
  }

  type AccountArenaGetPayload<S extends boolean | null | undefined | AccountArenaDefaultArgs> = $Result.GetResult<Prisma.$AccountArenaPayload, S>

  type AccountArenaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountArenaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountArenaCountAggregateInputType | true
    }

  export interface AccountArenaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountArena'], meta: { name: 'AccountArena' } }
    /**
     * Find zero or one AccountArena that matches the filter.
     * @param {AccountArenaFindUniqueArgs} args - Arguments to find a AccountArena
     * @example
     * // Get one AccountArena
     * const accountArena = await prisma.accountArena.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountArenaFindUniqueArgs>(args: SelectSubset<T, AccountArenaFindUniqueArgs<ExtArgs>>): Prisma__AccountArenaClient<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountArena that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountArenaFindUniqueOrThrowArgs} args - Arguments to find a AccountArena
     * @example
     * // Get one AccountArena
     * const accountArena = await prisma.accountArena.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountArenaFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountArenaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountArenaClient<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountArena that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountArenaFindFirstArgs} args - Arguments to find a AccountArena
     * @example
     * // Get one AccountArena
     * const accountArena = await prisma.accountArena.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountArenaFindFirstArgs>(args?: SelectSubset<T, AccountArenaFindFirstArgs<ExtArgs>>): Prisma__AccountArenaClient<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountArena that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountArenaFindFirstOrThrowArgs} args - Arguments to find a AccountArena
     * @example
     * // Get one AccountArena
     * const accountArena = await prisma.accountArena.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountArenaFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountArenaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountArenaClient<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountArenas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountArenaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountArenas
     * const accountArenas = await prisma.accountArena.findMany()
     * 
     * // Get first 10 AccountArenas
     * const accountArenas = await prisma.accountArena.findMany({ take: 10 })
     * 
     * // Only select the `accountId`
     * const accountArenaWithAccountIdOnly = await prisma.accountArena.findMany({ select: { accountId: true } })
     * 
     */
    findMany<T extends AccountArenaFindManyArgs>(args?: SelectSubset<T, AccountArenaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountArena.
     * @param {AccountArenaCreateArgs} args - Arguments to create a AccountArena.
     * @example
     * // Create one AccountArena
     * const AccountArena = await prisma.accountArena.create({
     *   data: {
     *     // ... data to create a AccountArena
     *   }
     * })
     * 
     */
    create<T extends AccountArenaCreateArgs>(args: SelectSubset<T, AccountArenaCreateArgs<ExtArgs>>): Prisma__AccountArenaClient<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountArenas.
     * @param {AccountArenaCreateManyArgs} args - Arguments to create many AccountArenas.
     * @example
     * // Create many AccountArenas
     * const accountArena = await prisma.accountArena.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountArenaCreateManyArgs>(args?: SelectSubset<T, AccountArenaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountArena.
     * @param {AccountArenaDeleteArgs} args - Arguments to delete one AccountArena.
     * @example
     * // Delete one AccountArena
     * const AccountArena = await prisma.accountArena.delete({
     *   where: {
     *     // ... filter to delete one AccountArena
     *   }
     * })
     * 
     */
    delete<T extends AccountArenaDeleteArgs>(args: SelectSubset<T, AccountArenaDeleteArgs<ExtArgs>>): Prisma__AccountArenaClient<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountArena.
     * @param {AccountArenaUpdateArgs} args - Arguments to update one AccountArena.
     * @example
     * // Update one AccountArena
     * const accountArena = await prisma.accountArena.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountArenaUpdateArgs>(args: SelectSubset<T, AccountArenaUpdateArgs<ExtArgs>>): Prisma__AccountArenaClient<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountArenas.
     * @param {AccountArenaDeleteManyArgs} args - Arguments to filter AccountArenas to delete.
     * @example
     * // Delete a few AccountArenas
     * const { count } = await prisma.accountArena.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountArenaDeleteManyArgs>(args?: SelectSubset<T, AccountArenaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountArenas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountArenaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountArenas
     * const accountArena = await prisma.accountArena.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountArenaUpdateManyArgs>(args: SelectSubset<T, AccountArenaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountArena.
     * @param {AccountArenaUpsertArgs} args - Arguments to update or create a AccountArena.
     * @example
     * // Update or create a AccountArena
     * const accountArena = await prisma.accountArena.upsert({
     *   create: {
     *     // ... data to create a AccountArena
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountArena we want to update
     *   }
     * })
     */
    upsert<T extends AccountArenaUpsertArgs>(args: SelectSubset<T, AccountArenaUpsertArgs<ExtArgs>>): Prisma__AccountArenaClient<$Result.GetResult<Prisma.$AccountArenaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountArenas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountArenaCountArgs} args - Arguments to filter AccountArenas to count.
     * @example
     * // Count the number of AccountArenas
     * const count = await prisma.accountArena.count({
     *   where: {
     *     // ... the filter for the AccountArenas we want to count
     *   }
     * })
    **/
    count<T extends AccountArenaCountArgs>(
      args?: Subset<T, AccountArenaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountArenaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountArena.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountArenaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountArenaAggregateArgs>(args: Subset<T, AccountArenaAggregateArgs>): Prisma.PrismaPromise<GetAccountArenaAggregateType<T>>

    /**
     * Group by AccountArena.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountArenaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountArenaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountArenaGroupByArgs['orderBy'] }
        : { orderBy?: AccountArenaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountArenaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountArenaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountArena model
   */
  readonly fields: AccountArenaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountArena.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountArenaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    arena<T extends ArenaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArenaDefaultArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountArena model
   */
  interface AccountArenaFieldRefs {
    readonly accountId: FieldRef<"AccountArena", 'Int'>
    readonly arenaId: FieldRef<"AccountArena", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AccountArena findUnique
   */
  export type AccountArenaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    /**
     * Filter, which AccountArena to fetch.
     */
    where: AccountArenaWhereUniqueInput
  }

  /**
   * AccountArena findUniqueOrThrow
   */
  export type AccountArenaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    /**
     * Filter, which AccountArena to fetch.
     */
    where: AccountArenaWhereUniqueInput
  }

  /**
   * AccountArena findFirst
   */
  export type AccountArenaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    /**
     * Filter, which AccountArena to fetch.
     */
    where?: AccountArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountArenas to fetch.
     */
    orderBy?: AccountArenaOrderByWithRelationInput | AccountArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountArenas.
     */
    cursor?: AccountArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountArenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountArenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountArenas.
     */
    distinct?: AccountArenaScalarFieldEnum | AccountArenaScalarFieldEnum[]
  }

  /**
   * AccountArena findFirstOrThrow
   */
  export type AccountArenaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    /**
     * Filter, which AccountArena to fetch.
     */
    where?: AccountArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountArenas to fetch.
     */
    orderBy?: AccountArenaOrderByWithRelationInput | AccountArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountArenas.
     */
    cursor?: AccountArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountArenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountArenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountArenas.
     */
    distinct?: AccountArenaScalarFieldEnum | AccountArenaScalarFieldEnum[]
  }

  /**
   * AccountArena findMany
   */
  export type AccountArenaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    /**
     * Filter, which AccountArenas to fetch.
     */
    where?: AccountArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountArenas to fetch.
     */
    orderBy?: AccountArenaOrderByWithRelationInput | AccountArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountArenas.
     */
    cursor?: AccountArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountArenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountArenas.
     */
    skip?: number
    distinct?: AccountArenaScalarFieldEnum | AccountArenaScalarFieldEnum[]
  }

  /**
   * AccountArena create
   */
  export type AccountArenaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountArena.
     */
    data: XOR<AccountArenaCreateInput, AccountArenaUncheckedCreateInput>
  }

  /**
   * AccountArena createMany
   */
  export type AccountArenaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountArenas.
     */
    data: AccountArenaCreateManyInput | AccountArenaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountArena update
   */
  export type AccountArenaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountArena.
     */
    data: XOR<AccountArenaUpdateInput, AccountArenaUncheckedUpdateInput>
    /**
     * Choose, which AccountArena to update.
     */
    where: AccountArenaWhereUniqueInput
  }

  /**
   * AccountArena updateMany
   */
  export type AccountArenaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountArenas.
     */
    data: XOR<AccountArenaUpdateManyMutationInput, AccountArenaUncheckedUpdateManyInput>
    /**
     * Filter which AccountArenas to update
     */
    where?: AccountArenaWhereInput
    /**
     * Limit how many AccountArenas to update.
     */
    limit?: number
  }

  /**
   * AccountArena upsert
   */
  export type AccountArenaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountArena to update in case it exists.
     */
    where: AccountArenaWhereUniqueInput
    /**
     * In case the AccountArena found by the `where` argument doesn't exist, create a new AccountArena with this data.
     */
    create: XOR<AccountArenaCreateInput, AccountArenaUncheckedCreateInput>
    /**
     * In case the AccountArena was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountArenaUpdateInput, AccountArenaUncheckedUpdateInput>
  }

  /**
   * AccountArena delete
   */
  export type AccountArenaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
    /**
     * Filter which AccountArena to delete.
     */
    where: AccountArenaWhereUniqueInput
  }

  /**
   * AccountArena deleteMany
   */
  export type AccountArenaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountArenas to delete
     */
    where?: AccountArenaWhereInput
    /**
     * Limit how many AccountArenas to delete.
     */
    limit?: number
  }

  /**
   * AccountArena without action
   */
  export type AccountArenaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountArena
     */
    select?: AccountArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountArena
     */
    omit?: AccountArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountArenaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    phone: 'phone',
    isAdmin: 'isAdmin',
    balance: 'balance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    soloRank: 'soloRank',
    flexRank: 'flexRank',
    tftRank: 'tftRank',
    level: 'level',
    blueEssence: 'blueEssence',
    riotPoints: 'riotPoints',
    verifiedEmail: 'verifiedEmail',
    championCount: 'championCount',
    skinCount: 'skinCount',
    chromaCount: 'chromaCount',
    wardCount: 'wardCount',
    emoteCount: 'emoteCount',
    iconCount: 'iconCount',
    littleLegendCount: 'littleLegendCount',
    boomCount: 'boomCount',
    arenaCount: 'arenaCount',
    price: 'price',
    status: 'status',
    buyerId: 'buyerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    orderId: 'orderId'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const TopUpTransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    amount: 'amount',
    bank: 'bank',
    transactionCode: 'transactionCode',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type TopUpTransactionScalarFieldEnum = (typeof TopUpTransactionScalarFieldEnum)[keyof typeof TopUpTransactionScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    totalAmount: 'totalAmount',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const ChampionScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ChampionScalarFieldEnum = (typeof ChampionScalarFieldEnum)[keyof typeof ChampionScalarFieldEnum]


  export const SkinScalarFieldEnum: {
    id: 'id',
    name: 'name',
    championId: 'championId'
  };

  export type SkinScalarFieldEnum = (typeof SkinScalarFieldEnum)[keyof typeof SkinScalarFieldEnum]


  export const ChromaScalarFieldEnum: {
    id: 'id',
    name: 'name',
    skinId: 'skinId'
  };

  export type ChromaScalarFieldEnum = (typeof ChromaScalarFieldEnum)[keyof typeof ChromaScalarFieldEnum]


  export const WardScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type WardScalarFieldEnum = (typeof WardScalarFieldEnum)[keyof typeof WardScalarFieldEnum]


  export const EmoteScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type EmoteScalarFieldEnum = (typeof EmoteScalarFieldEnum)[keyof typeof EmoteScalarFieldEnum]


  export const IconScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type IconScalarFieldEnum = (typeof IconScalarFieldEnum)[keyof typeof IconScalarFieldEnum]


  export const LittleLegendScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type LittleLegendScalarFieldEnum = (typeof LittleLegendScalarFieldEnum)[keyof typeof LittleLegendScalarFieldEnum]


  export const BoomScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type BoomScalarFieldEnum = (typeof BoomScalarFieldEnum)[keyof typeof BoomScalarFieldEnum]


  export const ArenaScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ArenaScalarFieldEnum = (typeof ArenaScalarFieldEnum)[keyof typeof ArenaScalarFieldEnum]


  export const AccountChampionScalarFieldEnum: {
    accountId: 'accountId',
    championId: 'championId'
  };

  export type AccountChampionScalarFieldEnum = (typeof AccountChampionScalarFieldEnum)[keyof typeof AccountChampionScalarFieldEnum]


  export const AccountSkinScalarFieldEnum: {
    accountId: 'accountId',
    skinId: 'skinId'
  };

  export type AccountSkinScalarFieldEnum = (typeof AccountSkinScalarFieldEnum)[keyof typeof AccountSkinScalarFieldEnum]


  export const AccountChromaScalarFieldEnum: {
    accountId: 'accountId',
    chromaId: 'chromaId'
  };

  export type AccountChromaScalarFieldEnum = (typeof AccountChromaScalarFieldEnum)[keyof typeof AccountChromaScalarFieldEnum]


  export const AccountWardScalarFieldEnum: {
    accountId: 'accountId',
    wardId: 'wardId'
  };

  export type AccountWardScalarFieldEnum = (typeof AccountWardScalarFieldEnum)[keyof typeof AccountWardScalarFieldEnum]


  export const AccountEmoteScalarFieldEnum: {
    accountId: 'accountId',
    emoteId: 'emoteId'
  };

  export type AccountEmoteScalarFieldEnum = (typeof AccountEmoteScalarFieldEnum)[keyof typeof AccountEmoteScalarFieldEnum]


  export const AccountIconScalarFieldEnum: {
    accountId: 'accountId',
    iconId: 'iconId'
  };

  export type AccountIconScalarFieldEnum = (typeof AccountIconScalarFieldEnum)[keyof typeof AccountIconScalarFieldEnum]


  export const AccountLittleLegendScalarFieldEnum: {
    accountId: 'accountId',
    littleLegendId: 'littleLegendId'
  };

  export type AccountLittleLegendScalarFieldEnum = (typeof AccountLittleLegendScalarFieldEnum)[keyof typeof AccountLittleLegendScalarFieldEnum]


  export const AccountBoomScalarFieldEnum: {
    accountId: 'accountId',
    boomId: 'boomId'
  };

  export type AccountBoomScalarFieldEnum = (typeof AccountBoomScalarFieldEnum)[keyof typeof AccountBoomScalarFieldEnum]


  export const AccountArenaScalarFieldEnum: {
    accountId: 'accountId',
    arenaId: 'arenaId'
  };

  export type AccountArenaScalarFieldEnum = (typeof AccountArenaScalarFieldEnum)[keyof typeof AccountArenaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    email: 'email',
    password: 'password',
    name: 'name',
    phone: 'phone'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const AccountOrderByRelevanceFieldEnum: {
    username: 'username',
    password: 'password'
  };

  export type AccountOrderByRelevanceFieldEnum = (typeof AccountOrderByRelevanceFieldEnum)[keyof typeof AccountOrderByRelevanceFieldEnum]


  export const TopUpTransactionOrderByRelevanceFieldEnum: {
    bank: 'bank',
    transactionCode: 'transactionCode'
  };

  export type TopUpTransactionOrderByRelevanceFieldEnum = (typeof TopUpTransactionOrderByRelevanceFieldEnum)[keyof typeof TopUpTransactionOrderByRelevanceFieldEnum]


  export const ChampionOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type ChampionOrderByRelevanceFieldEnum = (typeof ChampionOrderByRelevanceFieldEnum)[keyof typeof ChampionOrderByRelevanceFieldEnum]


  export const SkinOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type SkinOrderByRelevanceFieldEnum = (typeof SkinOrderByRelevanceFieldEnum)[keyof typeof SkinOrderByRelevanceFieldEnum]


  export const ChromaOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type ChromaOrderByRelevanceFieldEnum = (typeof ChromaOrderByRelevanceFieldEnum)[keyof typeof ChromaOrderByRelevanceFieldEnum]


  export const WardOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type WardOrderByRelevanceFieldEnum = (typeof WardOrderByRelevanceFieldEnum)[keyof typeof WardOrderByRelevanceFieldEnum]


  export const EmoteOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type EmoteOrderByRelevanceFieldEnum = (typeof EmoteOrderByRelevanceFieldEnum)[keyof typeof EmoteOrderByRelevanceFieldEnum]


  export const IconOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type IconOrderByRelevanceFieldEnum = (typeof IconOrderByRelevanceFieldEnum)[keyof typeof IconOrderByRelevanceFieldEnum]


  export const LittleLegendOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type LittleLegendOrderByRelevanceFieldEnum = (typeof LittleLegendOrderByRelevanceFieldEnum)[keyof typeof LittleLegendOrderByRelevanceFieldEnum]


  export const BoomOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type BoomOrderByRelevanceFieldEnum = (typeof BoomOrderByRelevanceFieldEnum)[keyof typeof BoomOrderByRelevanceFieldEnum]


  export const ArenaOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type ArenaOrderByRelevanceFieldEnum = (typeof ArenaOrderByRelevanceFieldEnum)[keyof typeof ArenaOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Rank'
   */
  export type EnumRankFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rank'>
    


  /**
   * Reference to a field of type 'AccountStatus'
   */
  export type EnumAccountStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountStatus'>
    


  /**
   * Reference to a field of type 'TopUpStatus'
   */
  export type EnumTopUpStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TopUpStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    balance?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    topUpTransactions?: TopUpTransactionListRelationFilter
    orders?: OrderListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    topUpTransactions?: TopUpTransactionOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    balance?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    topUpTransactions?: TopUpTransactionListRelationFilter
    orders?: OrderListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    balance?: DecimalWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: IntFilter<"Account"> | number
    username?: StringFilter<"Account"> | string
    password?: StringFilter<"Account"> | string
    soloRank?: EnumRankFilter<"Account"> | $Enums.Rank
    flexRank?: EnumRankFilter<"Account"> | $Enums.Rank
    tftRank?: EnumRankFilter<"Account"> | $Enums.Rank
    level?: IntFilter<"Account"> | number
    blueEssence?: IntFilter<"Account"> | number
    riotPoints?: IntFilter<"Account"> | number
    verifiedEmail?: BoolFilter<"Account"> | boolean
    championCount?: IntFilter<"Account"> | number
    skinCount?: IntFilter<"Account"> | number
    chromaCount?: IntFilter<"Account"> | number
    wardCount?: IntFilter<"Account"> | number
    emoteCount?: IntFilter<"Account"> | number
    iconCount?: IntFilter<"Account"> | number
    littleLegendCount?: IntFilter<"Account"> | number
    boomCount?: IntFilter<"Account"> | number
    arenaCount?: IntFilter<"Account"> | number
    price?: DecimalFilter<"Account"> | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFilter<"Account"> | $Enums.AccountStatus
    buyerId?: IntNullableFilter<"Account"> | number | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    orderId?: IntNullableFilter<"Account"> | number | null
    buyer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    order?: XOR<OrderNullableScalarRelationFilter, OrderWhereInput> | null
    ownedChampions?: AccountChampionListRelationFilter
    ownedSkins?: AccountSkinListRelationFilter
    ownedChromas?: AccountChromaListRelationFilter
    ownedWards?: AccountWardListRelationFilter
    ownedEmotes?: AccountEmoteListRelationFilter
    ownedIcons?: AccountIconListRelationFilter
    ownedLittleLegends?: AccountLittleLegendListRelationFilter
    ownedBooms?: AccountBoomListRelationFilter
    ownedArenas?: AccountArenaListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    soloRank?: SortOrder
    flexRank?: SortOrder
    tftRank?: SortOrder
    level?: SortOrder
    blueEssence?: SortOrder
    riotPoints?: SortOrder
    verifiedEmail?: SortOrder
    championCount?: SortOrder
    skinCount?: SortOrder
    chromaCount?: SortOrder
    wardCount?: SortOrder
    emoteCount?: SortOrder
    iconCount?: SortOrder
    littleLegendCount?: SortOrder
    boomCount?: SortOrder
    arenaCount?: SortOrder
    price?: SortOrder
    status?: SortOrder
    buyerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrderInput | SortOrder
    buyer?: UserOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
    ownedChampions?: AccountChampionOrderByRelationAggregateInput
    ownedSkins?: AccountSkinOrderByRelationAggregateInput
    ownedChromas?: AccountChromaOrderByRelationAggregateInput
    ownedWards?: AccountWardOrderByRelationAggregateInput
    ownedEmotes?: AccountEmoteOrderByRelationAggregateInput
    ownedIcons?: AccountIconOrderByRelationAggregateInput
    ownedLittleLegends?: AccountLittleLegendOrderByRelationAggregateInput
    ownedBooms?: AccountBoomOrderByRelationAggregateInput
    ownedArenas?: AccountArenaOrderByRelationAggregateInput
    _relevance?: AccountOrderByRelevanceInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    password?: StringFilter<"Account"> | string
    soloRank?: EnumRankFilter<"Account"> | $Enums.Rank
    flexRank?: EnumRankFilter<"Account"> | $Enums.Rank
    tftRank?: EnumRankFilter<"Account"> | $Enums.Rank
    level?: IntFilter<"Account"> | number
    blueEssence?: IntFilter<"Account"> | number
    riotPoints?: IntFilter<"Account"> | number
    verifiedEmail?: BoolFilter<"Account"> | boolean
    championCount?: IntFilter<"Account"> | number
    skinCount?: IntFilter<"Account"> | number
    chromaCount?: IntFilter<"Account"> | number
    wardCount?: IntFilter<"Account"> | number
    emoteCount?: IntFilter<"Account"> | number
    iconCount?: IntFilter<"Account"> | number
    littleLegendCount?: IntFilter<"Account"> | number
    boomCount?: IntFilter<"Account"> | number
    arenaCount?: IntFilter<"Account"> | number
    price?: DecimalFilter<"Account"> | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFilter<"Account"> | $Enums.AccountStatus
    buyerId?: IntNullableFilter<"Account"> | number | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    orderId?: IntNullableFilter<"Account"> | number | null
    buyer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    order?: XOR<OrderNullableScalarRelationFilter, OrderWhereInput> | null
    ownedChampions?: AccountChampionListRelationFilter
    ownedSkins?: AccountSkinListRelationFilter
    ownedChromas?: AccountChromaListRelationFilter
    ownedWards?: AccountWardListRelationFilter
    ownedEmotes?: AccountEmoteListRelationFilter
    ownedIcons?: AccountIconListRelationFilter
    ownedLittleLegends?: AccountLittleLegendListRelationFilter
    ownedBooms?: AccountBoomListRelationFilter
    ownedArenas?: AccountArenaListRelationFilter
  }, "id" | "username">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    soloRank?: SortOrder
    flexRank?: SortOrder
    tftRank?: SortOrder
    level?: SortOrder
    blueEssence?: SortOrder
    riotPoints?: SortOrder
    verifiedEmail?: SortOrder
    championCount?: SortOrder
    skinCount?: SortOrder
    chromaCount?: SortOrder
    wardCount?: SortOrder
    emoteCount?: SortOrder
    iconCount?: SortOrder
    littleLegendCount?: SortOrder
    boomCount?: SortOrder
    arenaCount?: SortOrder
    price?: SortOrder
    status?: SortOrder
    buyerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Account"> | number
    username?: StringWithAggregatesFilter<"Account"> | string
    password?: StringWithAggregatesFilter<"Account"> | string
    soloRank?: EnumRankWithAggregatesFilter<"Account"> | $Enums.Rank
    flexRank?: EnumRankWithAggregatesFilter<"Account"> | $Enums.Rank
    tftRank?: EnumRankWithAggregatesFilter<"Account"> | $Enums.Rank
    level?: IntWithAggregatesFilter<"Account"> | number
    blueEssence?: IntWithAggregatesFilter<"Account"> | number
    riotPoints?: IntWithAggregatesFilter<"Account"> | number
    verifiedEmail?: BoolWithAggregatesFilter<"Account"> | boolean
    championCount?: IntWithAggregatesFilter<"Account"> | number
    skinCount?: IntWithAggregatesFilter<"Account"> | number
    chromaCount?: IntWithAggregatesFilter<"Account"> | number
    wardCount?: IntWithAggregatesFilter<"Account"> | number
    emoteCount?: IntWithAggregatesFilter<"Account"> | number
    iconCount?: IntWithAggregatesFilter<"Account"> | number
    littleLegendCount?: IntWithAggregatesFilter<"Account"> | number
    boomCount?: IntWithAggregatesFilter<"Account"> | number
    arenaCount?: IntWithAggregatesFilter<"Account"> | number
    price?: DecimalWithAggregatesFilter<"Account"> | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusWithAggregatesFilter<"Account"> | $Enums.AccountStatus
    buyerId?: IntNullableWithAggregatesFilter<"Account"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    orderId?: IntNullableWithAggregatesFilter<"Account"> | number | null
  }

  export type TopUpTransactionWhereInput = {
    AND?: TopUpTransactionWhereInput | TopUpTransactionWhereInput[]
    OR?: TopUpTransactionWhereInput[]
    NOT?: TopUpTransactionWhereInput | TopUpTransactionWhereInput[]
    id?: IntFilter<"TopUpTransaction"> | number
    userId?: IntFilter<"TopUpTransaction"> | number
    amount?: DecimalFilter<"TopUpTransaction"> | Decimal | DecimalJsLike | number | string
    bank?: StringFilter<"TopUpTransaction"> | string
    transactionCode?: StringFilter<"TopUpTransaction"> | string
    status?: EnumTopUpStatusFilter<"TopUpTransaction"> | $Enums.TopUpStatus
    createdAt?: DateTimeFilter<"TopUpTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TopUpTransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    bank?: SortOrder
    transactionCode?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: TopUpTransactionOrderByRelevanceInput
  }

  export type TopUpTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TopUpTransactionWhereInput | TopUpTransactionWhereInput[]
    OR?: TopUpTransactionWhereInput[]
    NOT?: TopUpTransactionWhereInput | TopUpTransactionWhereInput[]
    userId?: IntFilter<"TopUpTransaction"> | number
    amount?: DecimalFilter<"TopUpTransaction"> | Decimal | DecimalJsLike | number | string
    bank?: StringFilter<"TopUpTransaction"> | string
    transactionCode?: StringFilter<"TopUpTransaction"> | string
    status?: EnumTopUpStatusFilter<"TopUpTransaction"> | $Enums.TopUpStatus
    createdAt?: DateTimeFilter<"TopUpTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TopUpTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    bank?: SortOrder
    transactionCode?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: TopUpTransactionCountOrderByAggregateInput
    _avg?: TopUpTransactionAvgOrderByAggregateInput
    _max?: TopUpTransactionMaxOrderByAggregateInput
    _min?: TopUpTransactionMinOrderByAggregateInput
    _sum?: TopUpTransactionSumOrderByAggregateInput
  }

  export type TopUpTransactionScalarWhereWithAggregatesInput = {
    AND?: TopUpTransactionScalarWhereWithAggregatesInput | TopUpTransactionScalarWhereWithAggregatesInput[]
    OR?: TopUpTransactionScalarWhereWithAggregatesInput[]
    NOT?: TopUpTransactionScalarWhereWithAggregatesInput | TopUpTransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TopUpTransaction"> | number
    userId?: IntWithAggregatesFilter<"TopUpTransaction"> | number
    amount?: DecimalWithAggregatesFilter<"TopUpTransaction"> | Decimal | DecimalJsLike | number | string
    bank?: StringWithAggregatesFilter<"TopUpTransaction"> | string
    transactionCode?: StringWithAggregatesFilter<"TopUpTransaction"> | string
    status?: EnumTopUpStatusWithAggregatesFilter<"TopUpTransaction"> | $Enums.TopUpStatus
    createdAt?: DateTimeWithAggregatesFilter<"TopUpTransaction"> | Date | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    createdAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    accounts?: AccountListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    accounts?: AccountOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    userId?: IntFilter<"Order"> | number
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    createdAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    accounts?: AccountListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    userId?: IntWithAggregatesFilter<"Order"> | number
    totalAmount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type ChampionWhereInput = {
    AND?: ChampionWhereInput | ChampionWhereInput[]
    OR?: ChampionWhereInput[]
    NOT?: ChampionWhereInput | ChampionWhereInput[]
    id?: IntFilter<"Champion"> | number
    name?: StringFilter<"Champion"> | string
    skins?: SkinListRelationFilter
    accounts?: AccountChampionListRelationFilter
  }

  export type ChampionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    skins?: SkinOrderByRelationAggregateInput
    accounts?: AccountChampionOrderByRelationAggregateInput
    _relevance?: ChampionOrderByRelevanceInput
  }

  export type ChampionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ChampionWhereInput | ChampionWhereInput[]
    OR?: ChampionWhereInput[]
    NOT?: ChampionWhereInput | ChampionWhereInput[]
    skins?: SkinListRelationFilter
    accounts?: AccountChampionListRelationFilter
  }, "id" | "name">

  export type ChampionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ChampionCountOrderByAggregateInput
    _avg?: ChampionAvgOrderByAggregateInput
    _max?: ChampionMaxOrderByAggregateInput
    _min?: ChampionMinOrderByAggregateInput
    _sum?: ChampionSumOrderByAggregateInput
  }

  export type ChampionScalarWhereWithAggregatesInput = {
    AND?: ChampionScalarWhereWithAggregatesInput | ChampionScalarWhereWithAggregatesInput[]
    OR?: ChampionScalarWhereWithAggregatesInput[]
    NOT?: ChampionScalarWhereWithAggregatesInput | ChampionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Champion"> | number
    name?: StringWithAggregatesFilter<"Champion"> | string
  }

  export type SkinWhereInput = {
    AND?: SkinWhereInput | SkinWhereInput[]
    OR?: SkinWhereInput[]
    NOT?: SkinWhereInput | SkinWhereInput[]
    id?: IntFilter<"Skin"> | number
    name?: StringFilter<"Skin"> | string
    championId?: IntFilter<"Skin"> | number
    champion?: XOR<ChampionScalarRelationFilter, ChampionWhereInput>
    chromas?: ChromaListRelationFilter
    accounts?: AccountSkinListRelationFilter
  }

  export type SkinOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    championId?: SortOrder
    champion?: ChampionOrderByWithRelationInput
    chromas?: ChromaOrderByRelationAggregateInput
    accounts?: AccountSkinOrderByRelationAggregateInput
    _relevance?: SkinOrderByRelevanceInput
  }

  export type SkinWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name_championId?: SkinNameChampionIdCompoundUniqueInput
    AND?: SkinWhereInput | SkinWhereInput[]
    OR?: SkinWhereInput[]
    NOT?: SkinWhereInput | SkinWhereInput[]
    name?: StringFilter<"Skin"> | string
    championId?: IntFilter<"Skin"> | number
    champion?: XOR<ChampionScalarRelationFilter, ChampionWhereInput>
    chromas?: ChromaListRelationFilter
    accounts?: AccountSkinListRelationFilter
  }, "id" | "name_championId">

  export type SkinOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    championId?: SortOrder
    _count?: SkinCountOrderByAggregateInput
    _avg?: SkinAvgOrderByAggregateInput
    _max?: SkinMaxOrderByAggregateInput
    _min?: SkinMinOrderByAggregateInput
    _sum?: SkinSumOrderByAggregateInput
  }

  export type SkinScalarWhereWithAggregatesInput = {
    AND?: SkinScalarWhereWithAggregatesInput | SkinScalarWhereWithAggregatesInput[]
    OR?: SkinScalarWhereWithAggregatesInput[]
    NOT?: SkinScalarWhereWithAggregatesInput | SkinScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Skin"> | number
    name?: StringWithAggregatesFilter<"Skin"> | string
    championId?: IntWithAggregatesFilter<"Skin"> | number
  }

  export type ChromaWhereInput = {
    AND?: ChromaWhereInput | ChromaWhereInput[]
    OR?: ChromaWhereInput[]
    NOT?: ChromaWhereInput | ChromaWhereInput[]
    id?: IntFilter<"Chroma"> | number
    name?: StringFilter<"Chroma"> | string
    skinId?: IntFilter<"Chroma"> | number
    skin?: XOR<SkinScalarRelationFilter, SkinWhereInput>
    accounts?: AccountChromaListRelationFilter
  }

  export type ChromaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    skinId?: SortOrder
    skin?: SkinOrderByWithRelationInput
    accounts?: AccountChromaOrderByRelationAggregateInput
    _relevance?: ChromaOrderByRelevanceInput
  }

  export type ChromaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name_skinId?: ChromaNameSkinIdCompoundUniqueInput
    AND?: ChromaWhereInput | ChromaWhereInput[]
    OR?: ChromaWhereInput[]
    NOT?: ChromaWhereInput | ChromaWhereInput[]
    name?: StringFilter<"Chroma"> | string
    skinId?: IntFilter<"Chroma"> | number
    skin?: XOR<SkinScalarRelationFilter, SkinWhereInput>
    accounts?: AccountChromaListRelationFilter
  }, "id" | "name_skinId">

  export type ChromaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    skinId?: SortOrder
    _count?: ChromaCountOrderByAggregateInput
    _avg?: ChromaAvgOrderByAggregateInput
    _max?: ChromaMaxOrderByAggregateInput
    _min?: ChromaMinOrderByAggregateInput
    _sum?: ChromaSumOrderByAggregateInput
  }

  export type ChromaScalarWhereWithAggregatesInput = {
    AND?: ChromaScalarWhereWithAggregatesInput | ChromaScalarWhereWithAggregatesInput[]
    OR?: ChromaScalarWhereWithAggregatesInput[]
    NOT?: ChromaScalarWhereWithAggregatesInput | ChromaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Chroma"> | number
    name?: StringWithAggregatesFilter<"Chroma"> | string
    skinId?: IntWithAggregatesFilter<"Chroma"> | number
  }

  export type WardWhereInput = {
    AND?: WardWhereInput | WardWhereInput[]
    OR?: WardWhereInput[]
    NOT?: WardWhereInput | WardWhereInput[]
    id?: IntFilter<"Ward"> | number
    name?: StringFilter<"Ward"> | string
    accounts?: AccountWardListRelationFilter
  }

  export type WardOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    accounts?: AccountWardOrderByRelationAggregateInput
    _relevance?: WardOrderByRelevanceInput
  }

  export type WardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: WardWhereInput | WardWhereInput[]
    OR?: WardWhereInput[]
    NOT?: WardWhereInput | WardWhereInput[]
    accounts?: AccountWardListRelationFilter
  }, "id" | "name">

  export type WardOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: WardCountOrderByAggregateInput
    _avg?: WardAvgOrderByAggregateInput
    _max?: WardMaxOrderByAggregateInput
    _min?: WardMinOrderByAggregateInput
    _sum?: WardSumOrderByAggregateInput
  }

  export type WardScalarWhereWithAggregatesInput = {
    AND?: WardScalarWhereWithAggregatesInput | WardScalarWhereWithAggregatesInput[]
    OR?: WardScalarWhereWithAggregatesInput[]
    NOT?: WardScalarWhereWithAggregatesInput | WardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ward"> | number
    name?: StringWithAggregatesFilter<"Ward"> | string
  }

  export type EmoteWhereInput = {
    AND?: EmoteWhereInput | EmoteWhereInput[]
    OR?: EmoteWhereInput[]
    NOT?: EmoteWhereInput | EmoteWhereInput[]
    id?: IntFilter<"Emote"> | number
    name?: StringFilter<"Emote"> | string
    accounts?: AccountEmoteListRelationFilter
  }

  export type EmoteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    accounts?: AccountEmoteOrderByRelationAggregateInput
    _relevance?: EmoteOrderByRelevanceInput
  }

  export type EmoteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: EmoteWhereInput | EmoteWhereInput[]
    OR?: EmoteWhereInput[]
    NOT?: EmoteWhereInput | EmoteWhereInput[]
    accounts?: AccountEmoteListRelationFilter
  }, "id" | "name">

  export type EmoteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: EmoteCountOrderByAggregateInput
    _avg?: EmoteAvgOrderByAggregateInput
    _max?: EmoteMaxOrderByAggregateInput
    _min?: EmoteMinOrderByAggregateInput
    _sum?: EmoteSumOrderByAggregateInput
  }

  export type EmoteScalarWhereWithAggregatesInput = {
    AND?: EmoteScalarWhereWithAggregatesInput | EmoteScalarWhereWithAggregatesInput[]
    OR?: EmoteScalarWhereWithAggregatesInput[]
    NOT?: EmoteScalarWhereWithAggregatesInput | EmoteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Emote"> | number
    name?: StringWithAggregatesFilter<"Emote"> | string
  }

  export type IconWhereInput = {
    AND?: IconWhereInput | IconWhereInput[]
    OR?: IconWhereInput[]
    NOT?: IconWhereInput | IconWhereInput[]
    id?: IntFilter<"Icon"> | number
    name?: StringFilter<"Icon"> | string
    accounts?: AccountIconListRelationFilter
  }

  export type IconOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    accounts?: AccountIconOrderByRelationAggregateInput
    _relevance?: IconOrderByRelevanceInput
  }

  export type IconWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: IconWhereInput | IconWhereInput[]
    OR?: IconWhereInput[]
    NOT?: IconWhereInput | IconWhereInput[]
    accounts?: AccountIconListRelationFilter
  }, "id" | "name">

  export type IconOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: IconCountOrderByAggregateInput
    _avg?: IconAvgOrderByAggregateInput
    _max?: IconMaxOrderByAggregateInput
    _min?: IconMinOrderByAggregateInput
    _sum?: IconSumOrderByAggregateInput
  }

  export type IconScalarWhereWithAggregatesInput = {
    AND?: IconScalarWhereWithAggregatesInput | IconScalarWhereWithAggregatesInput[]
    OR?: IconScalarWhereWithAggregatesInput[]
    NOT?: IconScalarWhereWithAggregatesInput | IconScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Icon"> | number
    name?: StringWithAggregatesFilter<"Icon"> | string
  }

  export type LittleLegendWhereInput = {
    AND?: LittleLegendWhereInput | LittleLegendWhereInput[]
    OR?: LittleLegendWhereInput[]
    NOT?: LittleLegendWhereInput | LittleLegendWhereInput[]
    id?: IntFilter<"LittleLegend"> | number
    name?: StringFilter<"LittleLegend"> | string
    accounts?: AccountLittleLegendListRelationFilter
  }

  export type LittleLegendOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    accounts?: AccountLittleLegendOrderByRelationAggregateInput
    _relevance?: LittleLegendOrderByRelevanceInput
  }

  export type LittleLegendWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: LittleLegendWhereInput | LittleLegendWhereInput[]
    OR?: LittleLegendWhereInput[]
    NOT?: LittleLegendWhereInput | LittleLegendWhereInput[]
    accounts?: AccountLittleLegendListRelationFilter
  }, "id" | "name">

  export type LittleLegendOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: LittleLegendCountOrderByAggregateInput
    _avg?: LittleLegendAvgOrderByAggregateInput
    _max?: LittleLegendMaxOrderByAggregateInput
    _min?: LittleLegendMinOrderByAggregateInput
    _sum?: LittleLegendSumOrderByAggregateInput
  }

  export type LittleLegendScalarWhereWithAggregatesInput = {
    AND?: LittleLegendScalarWhereWithAggregatesInput | LittleLegendScalarWhereWithAggregatesInput[]
    OR?: LittleLegendScalarWhereWithAggregatesInput[]
    NOT?: LittleLegendScalarWhereWithAggregatesInput | LittleLegendScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LittleLegend"> | number
    name?: StringWithAggregatesFilter<"LittleLegend"> | string
  }

  export type BoomWhereInput = {
    AND?: BoomWhereInput | BoomWhereInput[]
    OR?: BoomWhereInput[]
    NOT?: BoomWhereInput | BoomWhereInput[]
    id?: IntFilter<"Boom"> | number
    name?: StringFilter<"Boom"> | string
    accounts?: AccountBoomListRelationFilter
  }

  export type BoomOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    accounts?: AccountBoomOrderByRelationAggregateInput
    _relevance?: BoomOrderByRelevanceInput
  }

  export type BoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: BoomWhereInput | BoomWhereInput[]
    OR?: BoomWhereInput[]
    NOT?: BoomWhereInput | BoomWhereInput[]
    accounts?: AccountBoomListRelationFilter
  }, "id" | "name">

  export type BoomOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: BoomCountOrderByAggregateInput
    _avg?: BoomAvgOrderByAggregateInput
    _max?: BoomMaxOrderByAggregateInput
    _min?: BoomMinOrderByAggregateInput
    _sum?: BoomSumOrderByAggregateInput
  }

  export type BoomScalarWhereWithAggregatesInput = {
    AND?: BoomScalarWhereWithAggregatesInput | BoomScalarWhereWithAggregatesInput[]
    OR?: BoomScalarWhereWithAggregatesInput[]
    NOT?: BoomScalarWhereWithAggregatesInput | BoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Boom"> | number
    name?: StringWithAggregatesFilter<"Boom"> | string
  }

  export type ArenaWhereInput = {
    AND?: ArenaWhereInput | ArenaWhereInput[]
    OR?: ArenaWhereInput[]
    NOT?: ArenaWhereInput | ArenaWhereInput[]
    id?: IntFilter<"Arena"> | number
    name?: StringFilter<"Arena"> | string
    accounts?: AccountArenaListRelationFilter
  }

  export type ArenaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    accounts?: AccountArenaOrderByRelationAggregateInput
    _relevance?: ArenaOrderByRelevanceInput
  }

  export type ArenaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ArenaWhereInput | ArenaWhereInput[]
    OR?: ArenaWhereInput[]
    NOT?: ArenaWhereInput | ArenaWhereInput[]
    accounts?: AccountArenaListRelationFilter
  }, "id" | "name">

  export type ArenaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ArenaCountOrderByAggregateInput
    _avg?: ArenaAvgOrderByAggregateInput
    _max?: ArenaMaxOrderByAggregateInput
    _min?: ArenaMinOrderByAggregateInput
    _sum?: ArenaSumOrderByAggregateInput
  }

  export type ArenaScalarWhereWithAggregatesInput = {
    AND?: ArenaScalarWhereWithAggregatesInput | ArenaScalarWhereWithAggregatesInput[]
    OR?: ArenaScalarWhereWithAggregatesInput[]
    NOT?: ArenaScalarWhereWithAggregatesInput | ArenaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Arena"> | number
    name?: StringWithAggregatesFilter<"Arena"> | string
  }

  export type AccountChampionWhereInput = {
    AND?: AccountChampionWhereInput | AccountChampionWhereInput[]
    OR?: AccountChampionWhereInput[]
    NOT?: AccountChampionWhereInput | AccountChampionWhereInput[]
    accountId?: IntFilter<"AccountChampion"> | number
    championId?: IntFilter<"AccountChampion"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    champion?: XOR<ChampionScalarRelationFilter, ChampionWhereInput>
  }

  export type AccountChampionOrderByWithRelationInput = {
    accountId?: SortOrder
    championId?: SortOrder
    account?: AccountOrderByWithRelationInput
    champion?: ChampionOrderByWithRelationInput
  }

  export type AccountChampionWhereUniqueInput = Prisma.AtLeast<{
    accountId_championId?: AccountChampionAccountIdChampionIdCompoundUniqueInput
    AND?: AccountChampionWhereInput | AccountChampionWhereInput[]
    OR?: AccountChampionWhereInput[]
    NOT?: AccountChampionWhereInput | AccountChampionWhereInput[]
    accountId?: IntFilter<"AccountChampion"> | number
    championId?: IntFilter<"AccountChampion"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    champion?: XOR<ChampionScalarRelationFilter, ChampionWhereInput>
  }, "accountId_championId">

  export type AccountChampionOrderByWithAggregationInput = {
    accountId?: SortOrder
    championId?: SortOrder
    _count?: AccountChampionCountOrderByAggregateInput
    _avg?: AccountChampionAvgOrderByAggregateInput
    _max?: AccountChampionMaxOrderByAggregateInput
    _min?: AccountChampionMinOrderByAggregateInput
    _sum?: AccountChampionSumOrderByAggregateInput
  }

  export type AccountChampionScalarWhereWithAggregatesInput = {
    AND?: AccountChampionScalarWhereWithAggregatesInput | AccountChampionScalarWhereWithAggregatesInput[]
    OR?: AccountChampionScalarWhereWithAggregatesInput[]
    NOT?: AccountChampionScalarWhereWithAggregatesInput | AccountChampionScalarWhereWithAggregatesInput[]
    accountId?: IntWithAggregatesFilter<"AccountChampion"> | number
    championId?: IntWithAggregatesFilter<"AccountChampion"> | number
  }

  export type AccountSkinWhereInput = {
    AND?: AccountSkinWhereInput | AccountSkinWhereInput[]
    OR?: AccountSkinWhereInput[]
    NOT?: AccountSkinWhereInput | AccountSkinWhereInput[]
    accountId?: IntFilter<"AccountSkin"> | number
    skinId?: IntFilter<"AccountSkin"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    skin?: XOR<SkinScalarRelationFilter, SkinWhereInput>
  }

  export type AccountSkinOrderByWithRelationInput = {
    accountId?: SortOrder
    skinId?: SortOrder
    account?: AccountOrderByWithRelationInput
    skin?: SkinOrderByWithRelationInput
  }

  export type AccountSkinWhereUniqueInput = Prisma.AtLeast<{
    accountId_skinId?: AccountSkinAccountIdSkinIdCompoundUniqueInput
    AND?: AccountSkinWhereInput | AccountSkinWhereInput[]
    OR?: AccountSkinWhereInput[]
    NOT?: AccountSkinWhereInput | AccountSkinWhereInput[]
    accountId?: IntFilter<"AccountSkin"> | number
    skinId?: IntFilter<"AccountSkin"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    skin?: XOR<SkinScalarRelationFilter, SkinWhereInput>
  }, "accountId_skinId">

  export type AccountSkinOrderByWithAggregationInput = {
    accountId?: SortOrder
    skinId?: SortOrder
    _count?: AccountSkinCountOrderByAggregateInput
    _avg?: AccountSkinAvgOrderByAggregateInput
    _max?: AccountSkinMaxOrderByAggregateInput
    _min?: AccountSkinMinOrderByAggregateInput
    _sum?: AccountSkinSumOrderByAggregateInput
  }

  export type AccountSkinScalarWhereWithAggregatesInput = {
    AND?: AccountSkinScalarWhereWithAggregatesInput | AccountSkinScalarWhereWithAggregatesInput[]
    OR?: AccountSkinScalarWhereWithAggregatesInput[]
    NOT?: AccountSkinScalarWhereWithAggregatesInput | AccountSkinScalarWhereWithAggregatesInput[]
    accountId?: IntWithAggregatesFilter<"AccountSkin"> | number
    skinId?: IntWithAggregatesFilter<"AccountSkin"> | number
  }

  export type AccountChromaWhereInput = {
    AND?: AccountChromaWhereInput | AccountChromaWhereInput[]
    OR?: AccountChromaWhereInput[]
    NOT?: AccountChromaWhereInput | AccountChromaWhereInput[]
    accountId?: IntFilter<"AccountChroma"> | number
    chromaId?: IntFilter<"AccountChroma"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    chroma?: XOR<ChromaScalarRelationFilter, ChromaWhereInput>
  }

  export type AccountChromaOrderByWithRelationInput = {
    accountId?: SortOrder
    chromaId?: SortOrder
    account?: AccountOrderByWithRelationInput
    chroma?: ChromaOrderByWithRelationInput
  }

  export type AccountChromaWhereUniqueInput = Prisma.AtLeast<{
    accountId_chromaId?: AccountChromaAccountIdChromaIdCompoundUniqueInput
    AND?: AccountChromaWhereInput | AccountChromaWhereInput[]
    OR?: AccountChromaWhereInput[]
    NOT?: AccountChromaWhereInput | AccountChromaWhereInput[]
    accountId?: IntFilter<"AccountChroma"> | number
    chromaId?: IntFilter<"AccountChroma"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    chroma?: XOR<ChromaScalarRelationFilter, ChromaWhereInput>
  }, "accountId_chromaId">

  export type AccountChromaOrderByWithAggregationInput = {
    accountId?: SortOrder
    chromaId?: SortOrder
    _count?: AccountChromaCountOrderByAggregateInput
    _avg?: AccountChromaAvgOrderByAggregateInput
    _max?: AccountChromaMaxOrderByAggregateInput
    _min?: AccountChromaMinOrderByAggregateInput
    _sum?: AccountChromaSumOrderByAggregateInput
  }

  export type AccountChromaScalarWhereWithAggregatesInput = {
    AND?: AccountChromaScalarWhereWithAggregatesInput | AccountChromaScalarWhereWithAggregatesInput[]
    OR?: AccountChromaScalarWhereWithAggregatesInput[]
    NOT?: AccountChromaScalarWhereWithAggregatesInput | AccountChromaScalarWhereWithAggregatesInput[]
    accountId?: IntWithAggregatesFilter<"AccountChroma"> | number
    chromaId?: IntWithAggregatesFilter<"AccountChroma"> | number
  }

  export type AccountWardWhereInput = {
    AND?: AccountWardWhereInput | AccountWardWhereInput[]
    OR?: AccountWardWhereInput[]
    NOT?: AccountWardWhereInput | AccountWardWhereInput[]
    accountId?: IntFilter<"AccountWard"> | number
    wardId?: IntFilter<"AccountWard"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    ward?: XOR<WardScalarRelationFilter, WardWhereInput>
  }

  export type AccountWardOrderByWithRelationInput = {
    accountId?: SortOrder
    wardId?: SortOrder
    account?: AccountOrderByWithRelationInput
    ward?: WardOrderByWithRelationInput
  }

  export type AccountWardWhereUniqueInput = Prisma.AtLeast<{
    accountId_wardId?: AccountWardAccountIdWardIdCompoundUniqueInput
    AND?: AccountWardWhereInput | AccountWardWhereInput[]
    OR?: AccountWardWhereInput[]
    NOT?: AccountWardWhereInput | AccountWardWhereInput[]
    accountId?: IntFilter<"AccountWard"> | number
    wardId?: IntFilter<"AccountWard"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    ward?: XOR<WardScalarRelationFilter, WardWhereInput>
  }, "accountId_wardId">

  export type AccountWardOrderByWithAggregationInput = {
    accountId?: SortOrder
    wardId?: SortOrder
    _count?: AccountWardCountOrderByAggregateInput
    _avg?: AccountWardAvgOrderByAggregateInput
    _max?: AccountWardMaxOrderByAggregateInput
    _min?: AccountWardMinOrderByAggregateInput
    _sum?: AccountWardSumOrderByAggregateInput
  }

  export type AccountWardScalarWhereWithAggregatesInput = {
    AND?: AccountWardScalarWhereWithAggregatesInput | AccountWardScalarWhereWithAggregatesInput[]
    OR?: AccountWardScalarWhereWithAggregatesInput[]
    NOT?: AccountWardScalarWhereWithAggregatesInput | AccountWardScalarWhereWithAggregatesInput[]
    accountId?: IntWithAggregatesFilter<"AccountWard"> | number
    wardId?: IntWithAggregatesFilter<"AccountWard"> | number
  }

  export type AccountEmoteWhereInput = {
    AND?: AccountEmoteWhereInput | AccountEmoteWhereInput[]
    OR?: AccountEmoteWhereInput[]
    NOT?: AccountEmoteWhereInput | AccountEmoteWhereInput[]
    accountId?: IntFilter<"AccountEmote"> | number
    emoteId?: IntFilter<"AccountEmote"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    emote?: XOR<EmoteScalarRelationFilter, EmoteWhereInput>
  }

  export type AccountEmoteOrderByWithRelationInput = {
    accountId?: SortOrder
    emoteId?: SortOrder
    account?: AccountOrderByWithRelationInput
    emote?: EmoteOrderByWithRelationInput
  }

  export type AccountEmoteWhereUniqueInput = Prisma.AtLeast<{
    accountId_emoteId?: AccountEmoteAccountIdEmoteIdCompoundUniqueInput
    AND?: AccountEmoteWhereInput | AccountEmoteWhereInput[]
    OR?: AccountEmoteWhereInput[]
    NOT?: AccountEmoteWhereInput | AccountEmoteWhereInput[]
    accountId?: IntFilter<"AccountEmote"> | number
    emoteId?: IntFilter<"AccountEmote"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    emote?: XOR<EmoteScalarRelationFilter, EmoteWhereInput>
  }, "accountId_emoteId">

  export type AccountEmoteOrderByWithAggregationInput = {
    accountId?: SortOrder
    emoteId?: SortOrder
    _count?: AccountEmoteCountOrderByAggregateInput
    _avg?: AccountEmoteAvgOrderByAggregateInput
    _max?: AccountEmoteMaxOrderByAggregateInput
    _min?: AccountEmoteMinOrderByAggregateInput
    _sum?: AccountEmoteSumOrderByAggregateInput
  }

  export type AccountEmoteScalarWhereWithAggregatesInput = {
    AND?: AccountEmoteScalarWhereWithAggregatesInput | AccountEmoteScalarWhereWithAggregatesInput[]
    OR?: AccountEmoteScalarWhereWithAggregatesInput[]
    NOT?: AccountEmoteScalarWhereWithAggregatesInput | AccountEmoteScalarWhereWithAggregatesInput[]
    accountId?: IntWithAggregatesFilter<"AccountEmote"> | number
    emoteId?: IntWithAggregatesFilter<"AccountEmote"> | number
  }

  export type AccountIconWhereInput = {
    AND?: AccountIconWhereInput | AccountIconWhereInput[]
    OR?: AccountIconWhereInput[]
    NOT?: AccountIconWhereInput | AccountIconWhereInput[]
    accountId?: IntFilter<"AccountIcon"> | number
    iconId?: IntFilter<"AccountIcon"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    icon?: XOR<IconScalarRelationFilter, IconWhereInput>
  }

  export type AccountIconOrderByWithRelationInput = {
    accountId?: SortOrder
    iconId?: SortOrder
    account?: AccountOrderByWithRelationInput
    icon?: IconOrderByWithRelationInput
  }

  export type AccountIconWhereUniqueInput = Prisma.AtLeast<{
    accountId_iconId?: AccountIconAccountIdIconIdCompoundUniqueInput
    AND?: AccountIconWhereInput | AccountIconWhereInput[]
    OR?: AccountIconWhereInput[]
    NOT?: AccountIconWhereInput | AccountIconWhereInput[]
    accountId?: IntFilter<"AccountIcon"> | number
    iconId?: IntFilter<"AccountIcon"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    icon?: XOR<IconScalarRelationFilter, IconWhereInput>
  }, "accountId_iconId">

  export type AccountIconOrderByWithAggregationInput = {
    accountId?: SortOrder
    iconId?: SortOrder
    _count?: AccountIconCountOrderByAggregateInput
    _avg?: AccountIconAvgOrderByAggregateInput
    _max?: AccountIconMaxOrderByAggregateInput
    _min?: AccountIconMinOrderByAggregateInput
    _sum?: AccountIconSumOrderByAggregateInput
  }

  export type AccountIconScalarWhereWithAggregatesInput = {
    AND?: AccountIconScalarWhereWithAggregatesInput | AccountIconScalarWhereWithAggregatesInput[]
    OR?: AccountIconScalarWhereWithAggregatesInput[]
    NOT?: AccountIconScalarWhereWithAggregatesInput | AccountIconScalarWhereWithAggregatesInput[]
    accountId?: IntWithAggregatesFilter<"AccountIcon"> | number
    iconId?: IntWithAggregatesFilter<"AccountIcon"> | number
  }

  export type AccountLittleLegendWhereInput = {
    AND?: AccountLittleLegendWhereInput | AccountLittleLegendWhereInput[]
    OR?: AccountLittleLegendWhereInput[]
    NOT?: AccountLittleLegendWhereInput | AccountLittleLegendWhereInput[]
    accountId?: IntFilter<"AccountLittleLegend"> | number
    littleLegendId?: IntFilter<"AccountLittleLegend"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    littleLegend?: XOR<LittleLegendScalarRelationFilter, LittleLegendWhereInput>
  }

  export type AccountLittleLegendOrderByWithRelationInput = {
    accountId?: SortOrder
    littleLegendId?: SortOrder
    account?: AccountOrderByWithRelationInput
    littleLegend?: LittleLegendOrderByWithRelationInput
  }

  export type AccountLittleLegendWhereUniqueInput = Prisma.AtLeast<{
    accountId_littleLegendId?: AccountLittleLegendAccountIdLittleLegendIdCompoundUniqueInput
    AND?: AccountLittleLegendWhereInput | AccountLittleLegendWhereInput[]
    OR?: AccountLittleLegendWhereInput[]
    NOT?: AccountLittleLegendWhereInput | AccountLittleLegendWhereInput[]
    accountId?: IntFilter<"AccountLittleLegend"> | number
    littleLegendId?: IntFilter<"AccountLittleLegend"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    littleLegend?: XOR<LittleLegendScalarRelationFilter, LittleLegendWhereInput>
  }, "accountId_littleLegendId">

  export type AccountLittleLegendOrderByWithAggregationInput = {
    accountId?: SortOrder
    littleLegendId?: SortOrder
    _count?: AccountLittleLegendCountOrderByAggregateInput
    _avg?: AccountLittleLegendAvgOrderByAggregateInput
    _max?: AccountLittleLegendMaxOrderByAggregateInput
    _min?: AccountLittleLegendMinOrderByAggregateInput
    _sum?: AccountLittleLegendSumOrderByAggregateInput
  }

  export type AccountLittleLegendScalarWhereWithAggregatesInput = {
    AND?: AccountLittleLegendScalarWhereWithAggregatesInput | AccountLittleLegendScalarWhereWithAggregatesInput[]
    OR?: AccountLittleLegendScalarWhereWithAggregatesInput[]
    NOT?: AccountLittleLegendScalarWhereWithAggregatesInput | AccountLittleLegendScalarWhereWithAggregatesInput[]
    accountId?: IntWithAggregatesFilter<"AccountLittleLegend"> | number
    littleLegendId?: IntWithAggregatesFilter<"AccountLittleLegend"> | number
  }

  export type AccountBoomWhereInput = {
    AND?: AccountBoomWhereInput | AccountBoomWhereInput[]
    OR?: AccountBoomWhereInput[]
    NOT?: AccountBoomWhereInput | AccountBoomWhereInput[]
    accountId?: IntFilter<"AccountBoom"> | number
    boomId?: IntFilter<"AccountBoom"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    boom?: XOR<BoomScalarRelationFilter, BoomWhereInput>
  }

  export type AccountBoomOrderByWithRelationInput = {
    accountId?: SortOrder
    boomId?: SortOrder
    account?: AccountOrderByWithRelationInput
    boom?: BoomOrderByWithRelationInput
  }

  export type AccountBoomWhereUniqueInput = Prisma.AtLeast<{
    accountId_boomId?: AccountBoomAccountIdBoomIdCompoundUniqueInput
    AND?: AccountBoomWhereInput | AccountBoomWhereInput[]
    OR?: AccountBoomWhereInput[]
    NOT?: AccountBoomWhereInput | AccountBoomWhereInput[]
    accountId?: IntFilter<"AccountBoom"> | number
    boomId?: IntFilter<"AccountBoom"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    boom?: XOR<BoomScalarRelationFilter, BoomWhereInput>
  }, "accountId_boomId">

  export type AccountBoomOrderByWithAggregationInput = {
    accountId?: SortOrder
    boomId?: SortOrder
    _count?: AccountBoomCountOrderByAggregateInput
    _avg?: AccountBoomAvgOrderByAggregateInput
    _max?: AccountBoomMaxOrderByAggregateInput
    _min?: AccountBoomMinOrderByAggregateInput
    _sum?: AccountBoomSumOrderByAggregateInput
  }

  export type AccountBoomScalarWhereWithAggregatesInput = {
    AND?: AccountBoomScalarWhereWithAggregatesInput | AccountBoomScalarWhereWithAggregatesInput[]
    OR?: AccountBoomScalarWhereWithAggregatesInput[]
    NOT?: AccountBoomScalarWhereWithAggregatesInput | AccountBoomScalarWhereWithAggregatesInput[]
    accountId?: IntWithAggregatesFilter<"AccountBoom"> | number
    boomId?: IntWithAggregatesFilter<"AccountBoom"> | number
  }

  export type AccountArenaWhereInput = {
    AND?: AccountArenaWhereInput | AccountArenaWhereInput[]
    OR?: AccountArenaWhereInput[]
    NOT?: AccountArenaWhereInput | AccountArenaWhereInput[]
    accountId?: IntFilter<"AccountArena"> | number
    arenaId?: IntFilter<"AccountArena"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    arena?: XOR<ArenaScalarRelationFilter, ArenaWhereInput>
  }

  export type AccountArenaOrderByWithRelationInput = {
    accountId?: SortOrder
    arenaId?: SortOrder
    account?: AccountOrderByWithRelationInput
    arena?: ArenaOrderByWithRelationInput
  }

  export type AccountArenaWhereUniqueInput = Prisma.AtLeast<{
    accountId_arenaId?: AccountArenaAccountIdArenaIdCompoundUniqueInput
    AND?: AccountArenaWhereInput | AccountArenaWhereInput[]
    OR?: AccountArenaWhereInput[]
    NOT?: AccountArenaWhereInput | AccountArenaWhereInput[]
    accountId?: IntFilter<"AccountArena"> | number
    arenaId?: IntFilter<"AccountArena"> | number
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
    arena?: XOR<ArenaScalarRelationFilter, ArenaWhereInput>
  }, "accountId_arenaId">

  export type AccountArenaOrderByWithAggregationInput = {
    accountId?: SortOrder
    arenaId?: SortOrder
    _count?: AccountArenaCountOrderByAggregateInput
    _avg?: AccountArenaAvgOrderByAggregateInput
    _max?: AccountArenaMaxOrderByAggregateInput
    _min?: AccountArenaMinOrderByAggregateInput
    _sum?: AccountArenaSumOrderByAggregateInput
  }

  export type AccountArenaScalarWhereWithAggregatesInput = {
    AND?: AccountArenaScalarWhereWithAggregatesInput | AccountArenaScalarWhereWithAggregatesInput[]
    OR?: AccountArenaScalarWhereWithAggregatesInput[]
    NOT?: AccountArenaScalarWhereWithAggregatesInput | AccountArenaScalarWhereWithAggregatesInput[]
    accountId?: IntWithAggregatesFilter<"AccountArena"> | number
    arenaId?: IntWithAggregatesFilter<"AccountArena"> | number
  }

  export type UserCreateInput = {
    email: string
    password: string
    name?: string | null
    phone?: string | null
    isAdmin?: boolean
    balance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutBuyerInput
    topUpTransactions?: TopUpTransactionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    phone?: string | null
    isAdmin?: boolean
    balance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutBuyerInput
    topUpTransactions?: TopUpTransactionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutBuyerNestedInput
    topUpTransactions?: TopUpTransactionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutBuyerNestedInput
    topUpTransactions?: TopUpTransactionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    phone?: string | null
    isAdmin?: boolean
    balance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
  }

  export type AccountUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TopUpTransactionCreateInput = {
    amount: Decimal | DecimalJsLike | number | string
    bank: string
    transactionCode: string
    status: $Enums.TopUpStatus
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTopUpTransactionsInput
  }

  export type TopUpTransactionUncheckedCreateInput = {
    id?: number
    userId: number
    amount: Decimal | DecimalJsLike | number | string
    bank: string
    transactionCode: string
    status: $Enums.TopUpStatus
    createdAt?: Date | string
  }

  export type TopUpTransactionUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bank?: StringFieldUpdateOperationsInput | string
    transactionCode?: StringFieldUpdateOperationsInput | string
    status?: EnumTopUpStatusFieldUpdateOperationsInput | $Enums.TopUpStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTopUpTransactionsNestedInput
  }

  export type TopUpTransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bank?: StringFieldUpdateOperationsInput | string
    transactionCode?: StringFieldUpdateOperationsInput | string
    status?: EnumTopUpStatusFieldUpdateOperationsInput | $Enums.TopUpStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopUpTransactionCreateManyInput = {
    id?: number
    userId: number
    amount: Decimal | DecimalJsLike | number | string
    bank: string
    transactionCode: string
    status: $Enums.TopUpStatus
    createdAt?: Date | string
  }

  export type TopUpTransactionUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bank?: StringFieldUpdateOperationsInput | string
    transactionCode?: StringFieldUpdateOperationsInput | string
    status?: EnumTopUpStatusFieldUpdateOperationsInput | $Enums.TopUpStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopUpTransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bank?: StringFieldUpdateOperationsInput | string
    transactionCode?: StringFieldUpdateOperationsInput | string
    status?: EnumTopUpStatusFieldUpdateOperationsInput | $Enums.TopUpStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    accounts?: AccountCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    userId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    accounts?: AccountUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    userId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    createdAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChampionCreateInput = {
    name: string
    skins?: SkinCreateNestedManyWithoutChampionInput
    accounts?: AccountChampionCreateNestedManyWithoutChampionInput
  }

  export type ChampionUncheckedCreateInput = {
    id?: number
    name: string
    skins?: SkinUncheckedCreateNestedManyWithoutChampionInput
    accounts?: AccountChampionUncheckedCreateNestedManyWithoutChampionInput
  }

  export type ChampionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    skins?: SkinUpdateManyWithoutChampionNestedInput
    accounts?: AccountChampionUpdateManyWithoutChampionNestedInput
  }

  export type ChampionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    skins?: SkinUncheckedUpdateManyWithoutChampionNestedInput
    accounts?: AccountChampionUncheckedUpdateManyWithoutChampionNestedInput
  }

  export type ChampionCreateManyInput = {
    id?: number
    name: string
  }

  export type ChampionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ChampionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkinCreateInput = {
    name: string
    champion: ChampionCreateNestedOneWithoutSkinsInput
    chromas?: ChromaCreateNestedManyWithoutSkinInput
    accounts?: AccountSkinCreateNestedManyWithoutSkinInput
  }

  export type SkinUncheckedCreateInput = {
    id?: number
    name: string
    championId: number
    chromas?: ChromaUncheckedCreateNestedManyWithoutSkinInput
    accounts?: AccountSkinUncheckedCreateNestedManyWithoutSkinInput
  }

  export type SkinUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    champion?: ChampionUpdateOneRequiredWithoutSkinsNestedInput
    chromas?: ChromaUpdateManyWithoutSkinNestedInput
    accounts?: AccountSkinUpdateManyWithoutSkinNestedInput
  }

  export type SkinUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    championId?: IntFieldUpdateOperationsInput | number
    chromas?: ChromaUncheckedUpdateManyWithoutSkinNestedInput
    accounts?: AccountSkinUncheckedUpdateManyWithoutSkinNestedInput
  }

  export type SkinCreateManyInput = {
    id?: number
    name: string
    championId: number
  }

  export type SkinUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SkinUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    championId?: IntFieldUpdateOperationsInput | number
  }

  export type ChromaCreateInput = {
    name: string
    skin: SkinCreateNestedOneWithoutChromasInput
    accounts?: AccountChromaCreateNestedManyWithoutChromaInput
  }

  export type ChromaUncheckedCreateInput = {
    id?: number
    name: string
    skinId: number
    accounts?: AccountChromaUncheckedCreateNestedManyWithoutChromaInput
  }

  export type ChromaUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    skin?: SkinUpdateOneRequiredWithoutChromasNestedInput
    accounts?: AccountChromaUpdateManyWithoutChromaNestedInput
  }

  export type ChromaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    skinId?: IntFieldUpdateOperationsInput | number
    accounts?: AccountChromaUncheckedUpdateManyWithoutChromaNestedInput
  }

  export type ChromaCreateManyInput = {
    id?: number
    name: string
    skinId: number
  }

  export type ChromaUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ChromaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    skinId?: IntFieldUpdateOperationsInput | number
  }

  export type WardCreateInput = {
    name: string
    accounts?: AccountWardCreateNestedManyWithoutWardInput
  }

  export type WardUncheckedCreateInput = {
    id?: number
    name: string
    accounts?: AccountWardUncheckedCreateNestedManyWithoutWardInput
  }

  export type WardUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountWardUpdateManyWithoutWardNestedInput
  }

  export type WardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountWardUncheckedUpdateManyWithoutWardNestedInput
  }

  export type WardCreateManyInput = {
    id?: number
    name: string
  }

  export type WardUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EmoteCreateInput = {
    name: string
    accounts?: AccountEmoteCreateNestedManyWithoutEmoteInput
  }

  export type EmoteUncheckedCreateInput = {
    id?: number
    name: string
    accounts?: AccountEmoteUncheckedCreateNestedManyWithoutEmoteInput
  }

  export type EmoteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountEmoteUpdateManyWithoutEmoteNestedInput
  }

  export type EmoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountEmoteUncheckedUpdateManyWithoutEmoteNestedInput
  }

  export type EmoteCreateManyInput = {
    id?: number
    name: string
  }

  export type EmoteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EmoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IconCreateInput = {
    name: string
    accounts?: AccountIconCreateNestedManyWithoutIconInput
  }

  export type IconUncheckedCreateInput = {
    id?: number
    name: string
    accounts?: AccountIconUncheckedCreateNestedManyWithoutIconInput
  }

  export type IconUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountIconUpdateManyWithoutIconNestedInput
  }

  export type IconUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountIconUncheckedUpdateManyWithoutIconNestedInput
  }

  export type IconCreateManyInput = {
    id?: number
    name: string
  }

  export type IconUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IconUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LittleLegendCreateInput = {
    name: string
    accounts?: AccountLittleLegendCreateNestedManyWithoutLittleLegendInput
  }

  export type LittleLegendUncheckedCreateInput = {
    id?: number
    name: string
    accounts?: AccountLittleLegendUncheckedCreateNestedManyWithoutLittleLegendInput
  }

  export type LittleLegendUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountLittleLegendUpdateManyWithoutLittleLegendNestedInput
  }

  export type LittleLegendUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountLittleLegendUncheckedUpdateManyWithoutLittleLegendNestedInput
  }

  export type LittleLegendCreateManyInput = {
    id?: number
    name: string
  }

  export type LittleLegendUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LittleLegendUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BoomCreateInput = {
    name: string
    accounts?: AccountBoomCreateNestedManyWithoutBoomInput
  }

  export type BoomUncheckedCreateInput = {
    id?: number
    name: string
    accounts?: AccountBoomUncheckedCreateNestedManyWithoutBoomInput
  }

  export type BoomUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountBoomUpdateManyWithoutBoomNestedInput
  }

  export type BoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountBoomUncheckedUpdateManyWithoutBoomNestedInput
  }

  export type BoomCreateManyInput = {
    id?: number
    name: string
  }

  export type BoomUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ArenaCreateInput = {
    name: string
    accounts?: AccountArenaCreateNestedManyWithoutArenaInput
  }

  export type ArenaUncheckedCreateInput = {
    id?: number
    name: string
    accounts?: AccountArenaUncheckedCreateNestedManyWithoutArenaInput
  }

  export type ArenaUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountArenaUpdateManyWithoutArenaNestedInput
  }

  export type ArenaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountArenaUncheckedUpdateManyWithoutArenaNestedInput
  }

  export type ArenaCreateManyInput = {
    id?: number
    name: string
  }

  export type ArenaUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ArenaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccountChampionCreateInput = {
    account: AccountCreateNestedOneWithoutOwnedChampionsInput
    champion: ChampionCreateNestedOneWithoutAccountsInput
  }

  export type AccountChampionUncheckedCreateInput = {
    accountId: number
    championId: number
  }

  export type AccountChampionUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedChampionsNestedInput
    champion?: ChampionUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountChampionUncheckedUpdateInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    championId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountChampionCreateManyInput = {
    accountId: number
    championId: number
  }

  export type AccountChampionUpdateManyMutationInput = {

  }

  export type AccountChampionUncheckedUpdateManyInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    championId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountSkinCreateInput = {
    account: AccountCreateNestedOneWithoutOwnedSkinsInput
    skin: SkinCreateNestedOneWithoutAccountsInput
  }

  export type AccountSkinUncheckedCreateInput = {
    accountId: number
    skinId: number
  }

  export type AccountSkinUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedSkinsNestedInput
    skin?: SkinUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountSkinUncheckedUpdateInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    skinId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountSkinCreateManyInput = {
    accountId: number
    skinId: number
  }

  export type AccountSkinUpdateManyMutationInput = {

  }

  export type AccountSkinUncheckedUpdateManyInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    skinId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountChromaCreateInput = {
    account: AccountCreateNestedOneWithoutOwnedChromasInput
    chroma: ChromaCreateNestedOneWithoutAccountsInput
  }

  export type AccountChromaUncheckedCreateInput = {
    accountId: number
    chromaId: number
  }

  export type AccountChromaUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedChromasNestedInput
    chroma?: ChromaUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountChromaUncheckedUpdateInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    chromaId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountChromaCreateManyInput = {
    accountId: number
    chromaId: number
  }

  export type AccountChromaUpdateManyMutationInput = {

  }

  export type AccountChromaUncheckedUpdateManyInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    chromaId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountWardCreateInput = {
    account: AccountCreateNestedOneWithoutOwnedWardsInput
    ward: WardCreateNestedOneWithoutAccountsInput
  }

  export type AccountWardUncheckedCreateInput = {
    accountId: number
    wardId: number
  }

  export type AccountWardUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedWardsNestedInput
    ward?: WardUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountWardUncheckedUpdateInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    wardId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountWardCreateManyInput = {
    accountId: number
    wardId: number
  }

  export type AccountWardUpdateManyMutationInput = {

  }

  export type AccountWardUncheckedUpdateManyInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    wardId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountEmoteCreateInput = {
    account: AccountCreateNestedOneWithoutOwnedEmotesInput
    emote: EmoteCreateNestedOneWithoutAccountsInput
  }

  export type AccountEmoteUncheckedCreateInput = {
    accountId: number
    emoteId: number
  }

  export type AccountEmoteUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedEmotesNestedInput
    emote?: EmoteUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountEmoteUncheckedUpdateInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    emoteId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountEmoteCreateManyInput = {
    accountId: number
    emoteId: number
  }

  export type AccountEmoteUpdateManyMutationInput = {

  }

  export type AccountEmoteUncheckedUpdateManyInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    emoteId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountIconCreateInput = {
    account: AccountCreateNestedOneWithoutOwnedIconsInput
    icon: IconCreateNestedOneWithoutAccountsInput
  }

  export type AccountIconUncheckedCreateInput = {
    accountId: number
    iconId: number
  }

  export type AccountIconUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedIconsNestedInput
    icon?: IconUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountIconUncheckedUpdateInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    iconId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountIconCreateManyInput = {
    accountId: number
    iconId: number
  }

  export type AccountIconUpdateManyMutationInput = {

  }

  export type AccountIconUncheckedUpdateManyInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    iconId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountLittleLegendCreateInput = {
    account: AccountCreateNestedOneWithoutOwnedLittleLegendsInput
    littleLegend: LittleLegendCreateNestedOneWithoutAccountsInput
  }

  export type AccountLittleLegendUncheckedCreateInput = {
    accountId: number
    littleLegendId: number
  }

  export type AccountLittleLegendUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedLittleLegendsNestedInput
    littleLegend?: LittleLegendUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountLittleLegendUncheckedUpdateInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    littleLegendId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountLittleLegendCreateManyInput = {
    accountId: number
    littleLegendId: number
  }

  export type AccountLittleLegendUpdateManyMutationInput = {

  }

  export type AccountLittleLegendUncheckedUpdateManyInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    littleLegendId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountBoomCreateInput = {
    account: AccountCreateNestedOneWithoutOwnedBoomsInput
    boom: BoomCreateNestedOneWithoutAccountsInput
  }

  export type AccountBoomUncheckedCreateInput = {
    accountId: number
    boomId: number
  }

  export type AccountBoomUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedBoomsNestedInput
    boom?: BoomUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountBoomUncheckedUpdateInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    boomId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountBoomCreateManyInput = {
    accountId: number
    boomId: number
  }

  export type AccountBoomUpdateManyMutationInput = {

  }

  export type AccountBoomUncheckedUpdateManyInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    boomId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountArenaCreateInput = {
    account: AccountCreateNestedOneWithoutOwnedArenasInput
    arena: ArenaCreateNestedOneWithoutAccountsInput
  }

  export type AccountArenaUncheckedCreateInput = {
    accountId: number
    arenaId: number
  }

  export type AccountArenaUpdateInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedArenasNestedInput
    arena?: ArenaUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountArenaUncheckedUpdateInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    arenaId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountArenaCreateManyInput = {
    accountId: number
    arenaId: number
  }

  export type AccountArenaUpdateManyMutationInput = {

  }

  export type AccountArenaUncheckedUpdateManyInput = {
    accountId?: IntFieldUpdateOperationsInput | number
    arenaId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type TopUpTransactionListRelationFilter = {
    every?: TopUpTransactionWhereInput
    some?: TopUpTransactionWhereInput
    none?: TopUpTransactionWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TopUpTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    isAdmin?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    isAdmin?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    isAdmin?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumRankFilter<$PrismaModel = never> = {
    equals?: $Enums.Rank | EnumRankFieldRefInput<$PrismaModel>
    in?: $Enums.Rank[]
    notIn?: $Enums.Rank[]
    not?: NestedEnumRankFilter<$PrismaModel> | $Enums.Rank
  }

  export type EnumAccountStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[]
    notIn?: $Enums.AccountStatus[]
    not?: NestedEnumAccountStatusFilter<$PrismaModel> | $Enums.AccountStatus
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type OrderNullableScalarRelationFilter = {
    is?: OrderWhereInput | null
    isNot?: OrderWhereInput | null
  }

  export type AccountChampionListRelationFilter = {
    every?: AccountChampionWhereInput
    some?: AccountChampionWhereInput
    none?: AccountChampionWhereInput
  }

  export type AccountSkinListRelationFilter = {
    every?: AccountSkinWhereInput
    some?: AccountSkinWhereInput
    none?: AccountSkinWhereInput
  }

  export type AccountChromaListRelationFilter = {
    every?: AccountChromaWhereInput
    some?: AccountChromaWhereInput
    none?: AccountChromaWhereInput
  }

  export type AccountWardListRelationFilter = {
    every?: AccountWardWhereInput
    some?: AccountWardWhereInput
    none?: AccountWardWhereInput
  }

  export type AccountEmoteListRelationFilter = {
    every?: AccountEmoteWhereInput
    some?: AccountEmoteWhereInput
    none?: AccountEmoteWhereInput
  }

  export type AccountIconListRelationFilter = {
    every?: AccountIconWhereInput
    some?: AccountIconWhereInput
    none?: AccountIconWhereInput
  }

  export type AccountLittleLegendListRelationFilter = {
    every?: AccountLittleLegendWhereInput
    some?: AccountLittleLegendWhereInput
    none?: AccountLittleLegendWhereInput
  }

  export type AccountBoomListRelationFilter = {
    every?: AccountBoomWhereInput
    some?: AccountBoomWhereInput
    none?: AccountBoomWhereInput
  }

  export type AccountArenaListRelationFilter = {
    every?: AccountArenaWhereInput
    some?: AccountArenaWhereInput
    none?: AccountArenaWhereInput
  }

  export type AccountChampionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountSkinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountChromaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountWardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountEmoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountIconOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountLittleLegendOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountBoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountArenaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelevanceInput = {
    fields: AccountOrderByRelevanceFieldEnum | AccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    soloRank?: SortOrder
    flexRank?: SortOrder
    tftRank?: SortOrder
    level?: SortOrder
    blueEssence?: SortOrder
    riotPoints?: SortOrder
    verifiedEmail?: SortOrder
    championCount?: SortOrder
    skinCount?: SortOrder
    chromaCount?: SortOrder
    wardCount?: SortOrder
    emoteCount?: SortOrder
    iconCount?: SortOrder
    littleLegendCount?: SortOrder
    boomCount?: SortOrder
    arenaCount?: SortOrder
    price?: SortOrder
    status?: SortOrder
    buyerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    blueEssence?: SortOrder
    riotPoints?: SortOrder
    championCount?: SortOrder
    skinCount?: SortOrder
    chromaCount?: SortOrder
    wardCount?: SortOrder
    emoteCount?: SortOrder
    iconCount?: SortOrder
    littleLegendCount?: SortOrder
    boomCount?: SortOrder
    arenaCount?: SortOrder
    price?: SortOrder
    buyerId?: SortOrder
    orderId?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    soloRank?: SortOrder
    flexRank?: SortOrder
    tftRank?: SortOrder
    level?: SortOrder
    blueEssence?: SortOrder
    riotPoints?: SortOrder
    verifiedEmail?: SortOrder
    championCount?: SortOrder
    skinCount?: SortOrder
    chromaCount?: SortOrder
    wardCount?: SortOrder
    emoteCount?: SortOrder
    iconCount?: SortOrder
    littleLegendCount?: SortOrder
    boomCount?: SortOrder
    arenaCount?: SortOrder
    price?: SortOrder
    status?: SortOrder
    buyerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    soloRank?: SortOrder
    flexRank?: SortOrder
    tftRank?: SortOrder
    level?: SortOrder
    blueEssence?: SortOrder
    riotPoints?: SortOrder
    verifiedEmail?: SortOrder
    championCount?: SortOrder
    skinCount?: SortOrder
    chromaCount?: SortOrder
    wardCount?: SortOrder
    emoteCount?: SortOrder
    iconCount?: SortOrder
    littleLegendCount?: SortOrder
    boomCount?: SortOrder
    arenaCount?: SortOrder
    price?: SortOrder
    status?: SortOrder
    buyerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    blueEssence?: SortOrder
    riotPoints?: SortOrder
    championCount?: SortOrder
    skinCount?: SortOrder
    chromaCount?: SortOrder
    wardCount?: SortOrder
    emoteCount?: SortOrder
    iconCount?: SortOrder
    littleLegendCount?: SortOrder
    boomCount?: SortOrder
    arenaCount?: SortOrder
    price?: SortOrder
    buyerId?: SortOrder
    orderId?: SortOrder
  }

  export type EnumRankWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rank | EnumRankFieldRefInput<$PrismaModel>
    in?: $Enums.Rank[]
    notIn?: $Enums.Rank[]
    not?: NestedEnumRankWithAggregatesFilter<$PrismaModel> | $Enums.Rank
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRankFilter<$PrismaModel>
    _max?: NestedEnumRankFilter<$PrismaModel>
  }

  export type EnumAccountStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[]
    notIn?: $Enums.AccountStatus[]
    not?: NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel> | $Enums.AccountStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountStatusFilter<$PrismaModel>
    _max?: NestedEnumAccountStatusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumTopUpStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TopUpStatus | EnumTopUpStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TopUpStatus[]
    notIn?: $Enums.TopUpStatus[]
    not?: NestedEnumTopUpStatusFilter<$PrismaModel> | $Enums.TopUpStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TopUpTransactionOrderByRelevanceInput = {
    fields: TopUpTransactionOrderByRelevanceFieldEnum | TopUpTransactionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TopUpTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    bank?: SortOrder
    transactionCode?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type TopUpTransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
  }

  export type TopUpTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    bank?: SortOrder
    transactionCode?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type TopUpTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    bank?: SortOrder
    transactionCode?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type TopUpTransactionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
  }

  export type EnumTopUpStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TopUpStatus | EnumTopUpStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TopUpStatus[]
    notIn?: $Enums.TopUpStatus[]
    not?: NestedEnumTopUpStatusWithAggregatesFilter<$PrismaModel> | $Enums.TopUpStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTopUpStatusFilter<$PrismaModel>
    _max?: NestedEnumTopUpStatusFilter<$PrismaModel>
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type SkinListRelationFilter = {
    every?: SkinWhereInput
    some?: SkinWhereInput
    none?: SkinWhereInput
  }

  export type SkinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChampionOrderByRelevanceInput = {
    fields: ChampionOrderByRelevanceFieldEnum | ChampionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChampionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ChampionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ChampionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ChampionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ChampionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ChampionScalarRelationFilter = {
    is?: ChampionWhereInput
    isNot?: ChampionWhereInput
  }

  export type ChromaListRelationFilter = {
    every?: ChromaWhereInput
    some?: ChromaWhereInput
    none?: ChromaWhereInput
  }

  export type ChromaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkinOrderByRelevanceInput = {
    fields: SkinOrderByRelevanceFieldEnum | SkinOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SkinNameChampionIdCompoundUniqueInput = {
    name: string
    championId: number
  }

  export type SkinCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    championId?: SortOrder
  }

  export type SkinAvgOrderByAggregateInput = {
    id?: SortOrder
    championId?: SortOrder
  }

  export type SkinMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    championId?: SortOrder
  }

  export type SkinMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    championId?: SortOrder
  }

  export type SkinSumOrderByAggregateInput = {
    id?: SortOrder
    championId?: SortOrder
  }

  export type SkinScalarRelationFilter = {
    is?: SkinWhereInput
    isNot?: SkinWhereInput
  }

  export type ChromaOrderByRelevanceInput = {
    fields: ChromaOrderByRelevanceFieldEnum | ChromaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChromaNameSkinIdCompoundUniqueInput = {
    name: string
    skinId: number
  }

  export type ChromaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    skinId?: SortOrder
  }

  export type ChromaAvgOrderByAggregateInput = {
    id?: SortOrder
    skinId?: SortOrder
  }

  export type ChromaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    skinId?: SortOrder
  }

  export type ChromaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    skinId?: SortOrder
  }

  export type ChromaSumOrderByAggregateInput = {
    id?: SortOrder
    skinId?: SortOrder
  }

  export type WardOrderByRelevanceInput = {
    fields: WardOrderByRelevanceFieldEnum | WardOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WardCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type WardAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WardMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type WardMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type WardSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmoteOrderByRelevanceInput = {
    fields: EmoteOrderByRelevanceFieldEnum | EmoteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EmoteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type EmoteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmoteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type EmoteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type EmoteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IconOrderByRelevanceInput = {
    fields: IconOrderByRelevanceFieldEnum | IconOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type IconCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IconAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IconMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IconMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IconSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LittleLegendOrderByRelevanceInput = {
    fields: LittleLegendOrderByRelevanceFieldEnum | LittleLegendOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LittleLegendCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LittleLegendAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LittleLegendMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LittleLegendMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LittleLegendSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoomOrderByRelevanceInput = {
    fields: BoomOrderByRelevanceFieldEnum | BoomOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BoomCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BoomAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoomMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BoomMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BoomSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ArenaOrderByRelevanceInput = {
    fields: ArenaOrderByRelevanceFieldEnum | ArenaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ArenaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ArenaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ArenaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ArenaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ArenaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccountScalarRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type AccountChampionAccountIdChampionIdCompoundUniqueInput = {
    accountId: number
    championId: number
  }

  export type AccountChampionCountOrderByAggregateInput = {
    accountId?: SortOrder
    championId?: SortOrder
  }

  export type AccountChampionAvgOrderByAggregateInput = {
    accountId?: SortOrder
    championId?: SortOrder
  }

  export type AccountChampionMaxOrderByAggregateInput = {
    accountId?: SortOrder
    championId?: SortOrder
  }

  export type AccountChampionMinOrderByAggregateInput = {
    accountId?: SortOrder
    championId?: SortOrder
  }

  export type AccountChampionSumOrderByAggregateInput = {
    accountId?: SortOrder
    championId?: SortOrder
  }

  export type AccountSkinAccountIdSkinIdCompoundUniqueInput = {
    accountId: number
    skinId: number
  }

  export type AccountSkinCountOrderByAggregateInput = {
    accountId?: SortOrder
    skinId?: SortOrder
  }

  export type AccountSkinAvgOrderByAggregateInput = {
    accountId?: SortOrder
    skinId?: SortOrder
  }

  export type AccountSkinMaxOrderByAggregateInput = {
    accountId?: SortOrder
    skinId?: SortOrder
  }

  export type AccountSkinMinOrderByAggregateInput = {
    accountId?: SortOrder
    skinId?: SortOrder
  }

  export type AccountSkinSumOrderByAggregateInput = {
    accountId?: SortOrder
    skinId?: SortOrder
  }

  export type ChromaScalarRelationFilter = {
    is?: ChromaWhereInput
    isNot?: ChromaWhereInput
  }

  export type AccountChromaAccountIdChromaIdCompoundUniqueInput = {
    accountId: number
    chromaId: number
  }

  export type AccountChromaCountOrderByAggregateInput = {
    accountId?: SortOrder
    chromaId?: SortOrder
  }

  export type AccountChromaAvgOrderByAggregateInput = {
    accountId?: SortOrder
    chromaId?: SortOrder
  }

  export type AccountChromaMaxOrderByAggregateInput = {
    accountId?: SortOrder
    chromaId?: SortOrder
  }

  export type AccountChromaMinOrderByAggregateInput = {
    accountId?: SortOrder
    chromaId?: SortOrder
  }

  export type AccountChromaSumOrderByAggregateInput = {
    accountId?: SortOrder
    chromaId?: SortOrder
  }

  export type WardScalarRelationFilter = {
    is?: WardWhereInput
    isNot?: WardWhereInput
  }

  export type AccountWardAccountIdWardIdCompoundUniqueInput = {
    accountId: number
    wardId: number
  }

  export type AccountWardCountOrderByAggregateInput = {
    accountId?: SortOrder
    wardId?: SortOrder
  }

  export type AccountWardAvgOrderByAggregateInput = {
    accountId?: SortOrder
    wardId?: SortOrder
  }

  export type AccountWardMaxOrderByAggregateInput = {
    accountId?: SortOrder
    wardId?: SortOrder
  }

  export type AccountWardMinOrderByAggregateInput = {
    accountId?: SortOrder
    wardId?: SortOrder
  }

  export type AccountWardSumOrderByAggregateInput = {
    accountId?: SortOrder
    wardId?: SortOrder
  }

  export type EmoteScalarRelationFilter = {
    is?: EmoteWhereInput
    isNot?: EmoteWhereInput
  }

  export type AccountEmoteAccountIdEmoteIdCompoundUniqueInput = {
    accountId: number
    emoteId: number
  }

  export type AccountEmoteCountOrderByAggregateInput = {
    accountId?: SortOrder
    emoteId?: SortOrder
  }

  export type AccountEmoteAvgOrderByAggregateInput = {
    accountId?: SortOrder
    emoteId?: SortOrder
  }

  export type AccountEmoteMaxOrderByAggregateInput = {
    accountId?: SortOrder
    emoteId?: SortOrder
  }

  export type AccountEmoteMinOrderByAggregateInput = {
    accountId?: SortOrder
    emoteId?: SortOrder
  }

  export type AccountEmoteSumOrderByAggregateInput = {
    accountId?: SortOrder
    emoteId?: SortOrder
  }

  export type IconScalarRelationFilter = {
    is?: IconWhereInput
    isNot?: IconWhereInput
  }

  export type AccountIconAccountIdIconIdCompoundUniqueInput = {
    accountId: number
    iconId: number
  }

  export type AccountIconCountOrderByAggregateInput = {
    accountId?: SortOrder
    iconId?: SortOrder
  }

  export type AccountIconAvgOrderByAggregateInput = {
    accountId?: SortOrder
    iconId?: SortOrder
  }

  export type AccountIconMaxOrderByAggregateInput = {
    accountId?: SortOrder
    iconId?: SortOrder
  }

  export type AccountIconMinOrderByAggregateInput = {
    accountId?: SortOrder
    iconId?: SortOrder
  }

  export type AccountIconSumOrderByAggregateInput = {
    accountId?: SortOrder
    iconId?: SortOrder
  }

  export type LittleLegendScalarRelationFilter = {
    is?: LittleLegendWhereInput
    isNot?: LittleLegendWhereInput
  }

  export type AccountLittleLegendAccountIdLittleLegendIdCompoundUniqueInput = {
    accountId: number
    littleLegendId: number
  }

  export type AccountLittleLegendCountOrderByAggregateInput = {
    accountId?: SortOrder
    littleLegendId?: SortOrder
  }

  export type AccountLittleLegendAvgOrderByAggregateInput = {
    accountId?: SortOrder
    littleLegendId?: SortOrder
  }

  export type AccountLittleLegendMaxOrderByAggregateInput = {
    accountId?: SortOrder
    littleLegendId?: SortOrder
  }

  export type AccountLittleLegendMinOrderByAggregateInput = {
    accountId?: SortOrder
    littleLegendId?: SortOrder
  }

  export type AccountLittleLegendSumOrderByAggregateInput = {
    accountId?: SortOrder
    littleLegendId?: SortOrder
  }

  export type BoomScalarRelationFilter = {
    is?: BoomWhereInput
    isNot?: BoomWhereInput
  }

  export type AccountBoomAccountIdBoomIdCompoundUniqueInput = {
    accountId: number
    boomId: number
  }

  export type AccountBoomCountOrderByAggregateInput = {
    accountId?: SortOrder
    boomId?: SortOrder
  }

  export type AccountBoomAvgOrderByAggregateInput = {
    accountId?: SortOrder
    boomId?: SortOrder
  }

  export type AccountBoomMaxOrderByAggregateInput = {
    accountId?: SortOrder
    boomId?: SortOrder
  }

  export type AccountBoomMinOrderByAggregateInput = {
    accountId?: SortOrder
    boomId?: SortOrder
  }

  export type AccountBoomSumOrderByAggregateInput = {
    accountId?: SortOrder
    boomId?: SortOrder
  }

  export type ArenaScalarRelationFilter = {
    is?: ArenaWhereInput
    isNot?: ArenaWhereInput
  }

  export type AccountArenaAccountIdArenaIdCompoundUniqueInput = {
    accountId: number
    arenaId: number
  }

  export type AccountArenaCountOrderByAggregateInput = {
    accountId?: SortOrder
    arenaId?: SortOrder
  }

  export type AccountArenaAvgOrderByAggregateInput = {
    accountId?: SortOrder
    arenaId?: SortOrder
  }

  export type AccountArenaMaxOrderByAggregateInput = {
    accountId?: SortOrder
    arenaId?: SortOrder
  }

  export type AccountArenaMinOrderByAggregateInput = {
    accountId?: SortOrder
    arenaId?: SortOrder
  }

  export type AccountArenaSumOrderByAggregateInput = {
    accountId?: SortOrder
    arenaId?: SortOrder
  }

  export type AccountCreateNestedManyWithoutBuyerInput = {
    create?: XOR<AccountCreateWithoutBuyerInput, AccountUncheckedCreateWithoutBuyerInput> | AccountCreateWithoutBuyerInput[] | AccountUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutBuyerInput | AccountCreateOrConnectWithoutBuyerInput[]
    createMany?: AccountCreateManyBuyerInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type TopUpTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<TopUpTransactionCreateWithoutUserInput, TopUpTransactionUncheckedCreateWithoutUserInput> | TopUpTransactionCreateWithoutUserInput[] | TopUpTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopUpTransactionCreateOrConnectWithoutUserInput | TopUpTransactionCreateOrConnectWithoutUserInput[]
    createMany?: TopUpTransactionCreateManyUserInputEnvelope
    connect?: TopUpTransactionWhereUniqueInput | TopUpTransactionWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<AccountCreateWithoutBuyerInput, AccountUncheckedCreateWithoutBuyerInput> | AccountCreateWithoutBuyerInput[] | AccountUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutBuyerInput | AccountCreateOrConnectWithoutBuyerInput[]
    createMany?: AccountCreateManyBuyerInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type TopUpTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TopUpTransactionCreateWithoutUserInput, TopUpTransactionUncheckedCreateWithoutUserInput> | TopUpTransactionCreateWithoutUserInput[] | TopUpTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopUpTransactionCreateOrConnectWithoutUserInput | TopUpTransactionCreateOrConnectWithoutUserInput[]
    createMany?: TopUpTransactionCreateManyUserInputEnvelope
    connect?: TopUpTransactionWhereUniqueInput | TopUpTransactionWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<AccountCreateWithoutBuyerInput, AccountUncheckedCreateWithoutBuyerInput> | AccountCreateWithoutBuyerInput[] | AccountUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutBuyerInput | AccountCreateOrConnectWithoutBuyerInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutBuyerInput | AccountUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: AccountCreateManyBuyerInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutBuyerInput | AccountUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutBuyerInput | AccountUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type TopUpTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TopUpTransactionCreateWithoutUserInput, TopUpTransactionUncheckedCreateWithoutUserInput> | TopUpTransactionCreateWithoutUserInput[] | TopUpTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopUpTransactionCreateOrConnectWithoutUserInput | TopUpTransactionCreateOrConnectWithoutUserInput[]
    upsert?: TopUpTransactionUpsertWithWhereUniqueWithoutUserInput | TopUpTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TopUpTransactionCreateManyUserInputEnvelope
    set?: TopUpTransactionWhereUniqueInput | TopUpTransactionWhereUniqueInput[]
    disconnect?: TopUpTransactionWhereUniqueInput | TopUpTransactionWhereUniqueInput[]
    delete?: TopUpTransactionWhereUniqueInput | TopUpTransactionWhereUniqueInput[]
    connect?: TopUpTransactionWhereUniqueInput | TopUpTransactionWhereUniqueInput[]
    update?: TopUpTransactionUpdateWithWhereUniqueWithoutUserInput | TopUpTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TopUpTransactionUpdateManyWithWhereWithoutUserInput | TopUpTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TopUpTransactionScalarWhereInput | TopUpTransactionScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<AccountCreateWithoutBuyerInput, AccountUncheckedCreateWithoutBuyerInput> | AccountCreateWithoutBuyerInput[] | AccountUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutBuyerInput | AccountCreateOrConnectWithoutBuyerInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutBuyerInput | AccountUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: AccountCreateManyBuyerInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutBuyerInput | AccountUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutBuyerInput | AccountUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type TopUpTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TopUpTransactionCreateWithoutUserInput, TopUpTransactionUncheckedCreateWithoutUserInput> | TopUpTransactionCreateWithoutUserInput[] | TopUpTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TopUpTransactionCreateOrConnectWithoutUserInput | TopUpTransactionCreateOrConnectWithoutUserInput[]
    upsert?: TopUpTransactionUpsertWithWhereUniqueWithoutUserInput | TopUpTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TopUpTransactionCreateManyUserInputEnvelope
    set?: TopUpTransactionWhereUniqueInput | TopUpTransactionWhereUniqueInput[]
    disconnect?: TopUpTransactionWhereUniqueInput | TopUpTransactionWhereUniqueInput[]
    delete?: TopUpTransactionWhereUniqueInput | TopUpTransactionWhereUniqueInput[]
    connect?: TopUpTransactionWhereUniqueInput | TopUpTransactionWhereUniqueInput[]
    update?: TopUpTransactionUpdateWithWhereUniqueWithoutUserInput | TopUpTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TopUpTransactionUpdateManyWithWhereWithoutUserInput | TopUpTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TopUpTransactionScalarWhereInput | TopUpTransactionScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutAccountsInput = {
    create?: XOR<OrderCreateWithoutAccountsInput, OrderUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutAccountsInput
    connect?: OrderWhereUniqueInput
  }

  export type AccountChampionCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountChampionCreateWithoutAccountInput, AccountChampionUncheckedCreateWithoutAccountInput> | AccountChampionCreateWithoutAccountInput[] | AccountChampionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountChampionCreateOrConnectWithoutAccountInput | AccountChampionCreateOrConnectWithoutAccountInput[]
    createMany?: AccountChampionCreateManyAccountInputEnvelope
    connect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
  }

  export type AccountSkinCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountSkinCreateWithoutAccountInput, AccountSkinUncheckedCreateWithoutAccountInput> | AccountSkinCreateWithoutAccountInput[] | AccountSkinUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountSkinCreateOrConnectWithoutAccountInput | AccountSkinCreateOrConnectWithoutAccountInput[]
    createMany?: AccountSkinCreateManyAccountInputEnvelope
    connect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
  }

  export type AccountChromaCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountChromaCreateWithoutAccountInput, AccountChromaUncheckedCreateWithoutAccountInput> | AccountChromaCreateWithoutAccountInput[] | AccountChromaUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountChromaCreateOrConnectWithoutAccountInput | AccountChromaCreateOrConnectWithoutAccountInput[]
    createMany?: AccountChromaCreateManyAccountInputEnvelope
    connect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
  }

  export type AccountWardCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountWardCreateWithoutAccountInput, AccountWardUncheckedCreateWithoutAccountInput> | AccountWardCreateWithoutAccountInput[] | AccountWardUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountWardCreateOrConnectWithoutAccountInput | AccountWardCreateOrConnectWithoutAccountInput[]
    createMany?: AccountWardCreateManyAccountInputEnvelope
    connect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
  }

  export type AccountEmoteCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountEmoteCreateWithoutAccountInput, AccountEmoteUncheckedCreateWithoutAccountInput> | AccountEmoteCreateWithoutAccountInput[] | AccountEmoteUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountEmoteCreateOrConnectWithoutAccountInput | AccountEmoteCreateOrConnectWithoutAccountInput[]
    createMany?: AccountEmoteCreateManyAccountInputEnvelope
    connect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
  }

  export type AccountIconCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountIconCreateWithoutAccountInput, AccountIconUncheckedCreateWithoutAccountInput> | AccountIconCreateWithoutAccountInput[] | AccountIconUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountIconCreateOrConnectWithoutAccountInput | AccountIconCreateOrConnectWithoutAccountInput[]
    createMany?: AccountIconCreateManyAccountInputEnvelope
    connect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
  }

  export type AccountLittleLegendCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountLittleLegendCreateWithoutAccountInput, AccountLittleLegendUncheckedCreateWithoutAccountInput> | AccountLittleLegendCreateWithoutAccountInput[] | AccountLittleLegendUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountLittleLegendCreateOrConnectWithoutAccountInput | AccountLittleLegendCreateOrConnectWithoutAccountInput[]
    createMany?: AccountLittleLegendCreateManyAccountInputEnvelope
    connect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
  }

  export type AccountBoomCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountBoomCreateWithoutAccountInput, AccountBoomUncheckedCreateWithoutAccountInput> | AccountBoomCreateWithoutAccountInput[] | AccountBoomUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountBoomCreateOrConnectWithoutAccountInput | AccountBoomCreateOrConnectWithoutAccountInput[]
    createMany?: AccountBoomCreateManyAccountInputEnvelope
    connect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
  }

  export type AccountArenaCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountArenaCreateWithoutAccountInput, AccountArenaUncheckedCreateWithoutAccountInput> | AccountArenaCreateWithoutAccountInput[] | AccountArenaUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountArenaCreateOrConnectWithoutAccountInput | AccountArenaCreateOrConnectWithoutAccountInput[]
    createMany?: AccountArenaCreateManyAccountInputEnvelope
    connect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
  }

  export type AccountChampionUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountChampionCreateWithoutAccountInput, AccountChampionUncheckedCreateWithoutAccountInput> | AccountChampionCreateWithoutAccountInput[] | AccountChampionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountChampionCreateOrConnectWithoutAccountInput | AccountChampionCreateOrConnectWithoutAccountInput[]
    createMany?: AccountChampionCreateManyAccountInputEnvelope
    connect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
  }

  export type AccountSkinUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountSkinCreateWithoutAccountInput, AccountSkinUncheckedCreateWithoutAccountInput> | AccountSkinCreateWithoutAccountInput[] | AccountSkinUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountSkinCreateOrConnectWithoutAccountInput | AccountSkinCreateOrConnectWithoutAccountInput[]
    createMany?: AccountSkinCreateManyAccountInputEnvelope
    connect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
  }

  export type AccountChromaUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountChromaCreateWithoutAccountInput, AccountChromaUncheckedCreateWithoutAccountInput> | AccountChromaCreateWithoutAccountInput[] | AccountChromaUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountChromaCreateOrConnectWithoutAccountInput | AccountChromaCreateOrConnectWithoutAccountInput[]
    createMany?: AccountChromaCreateManyAccountInputEnvelope
    connect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
  }

  export type AccountWardUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountWardCreateWithoutAccountInput, AccountWardUncheckedCreateWithoutAccountInput> | AccountWardCreateWithoutAccountInput[] | AccountWardUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountWardCreateOrConnectWithoutAccountInput | AccountWardCreateOrConnectWithoutAccountInput[]
    createMany?: AccountWardCreateManyAccountInputEnvelope
    connect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
  }

  export type AccountEmoteUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountEmoteCreateWithoutAccountInput, AccountEmoteUncheckedCreateWithoutAccountInput> | AccountEmoteCreateWithoutAccountInput[] | AccountEmoteUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountEmoteCreateOrConnectWithoutAccountInput | AccountEmoteCreateOrConnectWithoutAccountInput[]
    createMany?: AccountEmoteCreateManyAccountInputEnvelope
    connect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
  }

  export type AccountIconUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountIconCreateWithoutAccountInput, AccountIconUncheckedCreateWithoutAccountInput> | AccountIconCreateWithoutAccountInput[] | AccountIconUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountIconCreateOrConnectWithoutAccountInput | AccountIconCreateOrConnectWithoutAccountInput[]
    createMany?: AccountIconCreateManyAccountInputEnvelope
    connect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
  }

  export type AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountLittleLegendCreateWithoutAccountInput, AccountLittleLegendUncheckedCreateWithoutAccountInput> | AccountLittleLegendCreateWithoutAccountInput[] | AccountLittleLegendUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountLittleLegendCreateOrConnectWithoutAccountInput | AccountLittleLegendCreateOrConnectWithoutAccountInput[]
    createMany?: AccountLittleLegendCreateManyAccountInputEnvelope
    connect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
  }

  export type AccountBoomUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountBoomCreateWithoutAccountInput, AccountBoomUncheckedCreateWithoutAccountInput> | AccountBoomCreateWithoutAccountInput[] | AccountBoomUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountBoomCreateOrConnectWithoutAccountInput | AccountBoomCreateOrConnectWithoutAccountInput[]
    createMany?: AccountBoomCreateManyAccountInputEnvelope
    connect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
  }

  export type AccountArenaUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountArenaCreateWithoutAccountInput, AccountArenaUncheckedCreateWithoutAccountInput> | AccountArenaCreateWithoutAccountInput[] | AccountArenaUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountArenaCreateOrConnectWithoutAccountInput | AccountArenaCreateOrConnectWithoutAccountInput[]
    createMany?: AccountArenaCreateManyAccountInputEnvelope
    connect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
  }

  export type EnumRankFieldUpdateOperationsInput = {
    set?: $Enums.Rank
  }

  export type EnumAccountStatusFieldUpdateOperationsInput = {
    set?: $Enums.AccountStatus
  }

  export type UserUpdateOneWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type OrderUpdateOneWithoutAccountsNestedInput = {
    create?: XOR<OrderCreateWithoutAccountsInput, OrderUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutAccountsInput
    upsert?: OrderUpsertWithoutAccountsInput
    disconnect?: OrderWhereInput | boolean
    delete?: OrderWhereInput | boolean
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutAccountsInput, OrderUpdateWithoutAccountsInput>, OrderUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountChampionUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountChampionCreateWithoutAccountInput, AccountChampionUncheckedCreateWithoutAccountInput> | AccountChampionCreateWithoutAccountInput[] | AccountChampionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountChampionCreateOrConnectWithoutAccountInput | AccountChampionCreateOrConnectWithoutAccountInput[]
    upsert?: AccountChampionUpsertWithWhereUniqueWithoutAccountInput | AccountChampionUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountChampionCreateManyAccountInputEnvelope
    set?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    disconnect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    delete?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    connect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    update?: AccountChampionUpdateWithWhereUniqueWithoutAccountInput | AccountChampionUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountChampionUpdateManyWithWhereWithoutAccountInput | AccountChampionUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountChampionScalarWhereInput | AccountChampionScalarWhereInput[]
  }

  export type AccountSkinUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountSkinCreateWithoutAccountInput, AccountSkinUncheckedCreateWithoutAccountInput> | AccountSkinCreateWithoutAccountInput[] | AccountSkinUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountSkinCreateOrConnectWithoutAccountInput | AccountSkinCreateOrConnectWithoutAccountInput[]
    upsert?: AccountSkinUpsertWithWhereUniqueWithoutAccountInput | AccountSkinUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountSkinCreateManyAccountInputEnvelope
    set?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    disconnect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    delete?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    connect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    update?: AccountSkinUpdateWithWhereUniqueWithoutAccountInput | AccountSkinUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountSkinUpdateManyWithWhereWithoutAccountInput | AccountSkinUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountSkinScalarWhereInput | AccountSkinScalarWhereInput[]
  }

  export type AccountChromaUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountChromaCreateWithoutAccountInput, AccountChromaUncheckedCreateWithoutAccountInput> | AccountChromaCreateWithoutAccountInput[] | AccountChromaUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountChromaCreateOrConnectWithoutAccountInput | AccountChromaCreateOrConnectWithoutAccountInput[]
    upsert?: AccountChromaUpsertWithWhereUniqueWithoutAccountInput | AccountChromaUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountChromaCreateManyAccountInputEnvelope
    set?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    disconnect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    delete?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    connect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    update?: AccountChromaUpdateWithWhereUniqueWithoutAccountInput | AccountChromaUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountChromaUpdateManyWithWhereWithoutAccountInput | AccountChromaUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountChromaScalarWhereInput | AccountChromaScalarWhereInput[]
  }

  export type AccountWardUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountWardCreateWithoutAccountInput, AccountWardUncheckedCreateWithoutAccountInput> | AccountWardCreateWithoutAccountInput[] | AccountWardUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountWardCreateOrConnectWithoutAccountInput | AccountWardCreateOrConnectWithoutAccountInput[]
    upsert?: AccountWardUpsertWithWhereUniqueWithoutAccountInput | AccountWardUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountWardCreateManyAccountInputEnvelope
    set?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    disconnect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    delete?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    connect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    update?: AccountWardUpdateWithWhereUniqueWithoutAccountInput | AccountWardUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountWardUpdateManyWithWhereWithoutAccountInput | AccountWardUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountWardScalarWhereInput | AccountWardScalarWhereInput[]
  }

  export type AccountEmoteUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountEmoteCreateWithoutAccountInput, AccountEmoteUncheckedCreateWithoutAccountInput> | AccountEmoteCreateWithoutAccountInput[] | AccountEmoteUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountEmoteCreateOrConnectWithoutAccountInput | AccountEmoteCreateOrConnectWithoutAccountInput[]
    upsert?: AccountEmoteUpsertWithWhereUniqueWithoutAccountInput | AccountEmoteUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountEmoteCreateManyAccountInputEnvelope
    set?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    disconnect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    delete?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    connect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    update?: AccountEmoteUpdateWithWhereUniqueWithoutAccountInput | AccountEmoteUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountEmoteUpdateManyWithWhereWithoutAccountInput | AccountEmoteUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountEmoteScalarWhereInput | AccountEmoteScalarWhereInput[]
  }

  export type AccountIconUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountIconCreateWithoutAccountInput, AccountIconUncheckedCreateWithoutAccountInput> | AccountIconCreateWithoutAccountInput[] | AccountIconUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountIconCreateOrConnectWithoutAccountInput | AccountIconCreateOrConnectWithoutAccountInput[]
    upsert?: AccountIconUpsertWithWhereUniqueWithoutAccountInput | AccountIconUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountIconCreateManyAccountInputEnvelope
    set?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    disconnect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    delete?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    connect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    update?: AccountIconUpdateWithWhereUniqueWithoutAccountInput | AccountIconUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountIconUpdateManyWithWhereWithoutAccountInput | AccountIconUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountIconScalarWhereInput | AccountIconScalarWhereInput[]
  }

  export type AccountLittleLegendUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountLittleLegendCreateWithoutAccountInput, AccountLittleLegendUncheckedCreateWithoutAccountInput> | AccountLittleLegendCreateWithoutAccountInput[] | AccountLittleLegendUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountLittleLegendCreateOrConnectWithoutAccountInput | AccountLittleLegendCreateOrConnectWithoutAccountInput[]
    upsert?: AccountLittleLegendUpsertWithWhereUniqueWithoutAccountInput | AccountLittleLegendUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountLittleLegendCreateManyAccountInputEnvelope
    set?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    disconnect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    delete?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    connect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    update?: AccountLittleLegendUpdateWithWhereUniqueWithoutAccountInput | AccountLittleLegendUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountLittleLegendUpdateManyWithWhereWithoutAccountInput | AccountLittleLegendUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountLittleLegendScalarWhereInput | AccountLittleLegendScalarWhereInput[]
  }

  export type AccountBoomUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountBoomCreateWithoutAccountInput, AccountBoomUncheckedCreateWithoutAccountInput> | AccountBoomCreateWithoutAccountInput[] | AccountBoomUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountBoomCreateOrConnectWithoutAccountInput | AccountBoomCreateOrConnectWithoutAccountInput[]
    upsert?: AccountBoomUpsertWithWhereUniqueWithoutAccountInput | AccountBoomUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountBoomCreateManyAccountInputEnvelope
    set?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    disconnect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    delete?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    connect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    update?: AccountBoomUpdateWithWhereUniqueWithoutAccountInput | AccountBoomUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountBoomUpdateManyWithWhereWithoutAccountInput | AccountBoomUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountBoomScalarWhereInput | AccountBoomScalarWhereInput[]
  }

  export type AccountArenaUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountArenaCreateWithoutAccountInput, AccountArenaUncheckedCreateWithoutAccountInput> | AccountArenaCreateWithoutAccountInput[] | AccountArenaUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountArenaCreateOrConnectWithoutAccountInput | AccountArenaCreateOrConnectWithoutAccountInput[]
    upsert?: AccountArenaUpsertWithWhereUniqueWithoutAccountInput | AccountArenaUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountArenaCreateManyAccountInputEnvelope
    set?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    disconnect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    delete?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    connect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    update?: AccountArenaUpdateWithWhereUniqueWithoutAccountInput | AccountArenaUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountArenaUpdateManyWithWhereWithoutAccountInput | AccountArenaUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountArenaScalarWhereInput | AccountArenaScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountChampionUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountChampionCreateWithoutAccountInput, AccountChampionUncheckedCreateWithoutAccountInput> | AccountChampionCreateWithoutAccountInput[] | AccountChampionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountChampionCreateOrConnectWithoutAccountInput | AccountChampionCreateOrConnectWithoutAccountInput[]
    upsert?: AccountChampionUpsertWithWhereUniqueWithoutAccountInput | AccountChampionUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountChampionCreateManyAccountInputEnvelope
    set?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    disconnect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    delete?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    connect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    update?: AccountChampionUpdateWithWhereUniqueWithoutAccountInput | AccountChampionUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountChampionUpdateManyWithWhereWithoutAccountInput | AccountChampionUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountChampionScalarWhereInput | AccountChampionScalarWhereInput[]
  }

  export type AccountSkinUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountSkinCreateWithoutAccountInput, AccountSkinUncheckedCreateWithoutAccountInput> | AccountSkinCreateWithoutAccountInput[] | AccountSkinUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountSkinCreateOrConnectWithoutAccountInput | AccountSkinCreateOrConnectWithoutAccountInput[]
    upsert?: AccountSkinUpsertWithWhereUniqueWithoutAccountInput | AccountSkinUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountSkinCreateManyAccountInputEnvelope
    set?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    disconnect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    delete?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    connect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    update?: AccountSkinUpdateWithWhereUniqueWithoutAccountInput | AccountSkinUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountSkinUpdateManyWithWhereWithoutAccountInput | AccountSkinUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountSkinScalarWhereInput | AccountSkinScalarWhereInput[]
  }

  export type AccountChromaUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountChromaCreateWithoutAccountInput, AccountChromaUncheckedCreateWithoutAccountInput> | AccountChromaCreateWithoutAccountInput[] | AccountChromaUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountChromaCreateOrConnectWithoutAccountInput | AccountChromaCreateOrConnectWithoutAccountInput[]
    upsert?: AccountChromaUpsertWithWhereUniqueWithoutAccountInput | AccountChromaUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountChromaCreateManyAccountInputEnvelope
    set?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    disconnect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    delete?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    connect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    update?: AccountChromaUpdateWithWhereUniqueWithoutAccountInput | AccountChromaUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountChromaUpdateManyWithWhereWithoutAccountInput | AccountChromaUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountChromaScalarWhereInput | AccountChromaScalarWhereInput[]
  }

  export type AccountWardUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountWardCreateWithoutAccountInput, AccountWardUncheckedCreateWithoutAccountInput> | AccountWardCreateWithoutAccountInput[] | AccountWardUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountWardCreateOrConnectWithoutAccountInput | AccountWardCreateOrConnectWithoutAccountInput[]
    upsert?: AccountWardUpsertWithWhereUniqueWithoutAccountInput | AccountWardUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountWardCreateManyAccountInputEnvelope
    set?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    disconnect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    delete?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    connect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    update?: AccountWardUpdateWithWhereUniqueWithoutAccountInput | AccountWardUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountWardUpdateManyWithWhereWithoutAccountInput | AccountWardUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountWardScalarWhereInput | AccountWardScalarWhereInput[]
  }

  export type AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountEmoteCreateWithoutAccountInput, AccountEmoteUncheckedCreateWithoutAccountInput> | AccountEmoteCreateWithoutAccountInput[] | AccountEmoteUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountEmoteCreateOrConnectWithoutAccountInput | AccountEmoteCreateOrConnectWithoutAccountInput[]
    upsert?: AccountEmoteUpsertWithWhereUniqueWithoutAccountInput | AccountEmoteUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountEmoteCreateManyAccountInputEnvelope
    set?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    disconnect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    delete?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    connect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    update?: AccountEmoteUpdateWithWhereUniqueWithoutAccountInput | AccountEmoteUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountEmoteUpdateManyWithWhereWithoutAccountInput | AccountEmoteUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountEmoteScalarWhereInput | AccountEmoteScalarWhereInput[]
  }

  export type AccountIconUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountIconCreateWithoutAccountInput, AccountIconUncheckedCreateWithoutAccountInput> | AccountIconCreateWithoutAccountInput[] | AccountIconUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountIconCreateOrConnectWithoutAccountInput | AccountIconCreateOrConnectWithoutAccountInput[]
    upsert?: AccountIconUpsertWithWhereUniqueWithoutAccountInput | AccountIconUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountIconCreateManyAccountInputEnvelope
    set?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    disconnect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    delete?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    connect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    update?: AccountIconUpdateWithWhereUniqueWithoutAccountInput | AccountIconUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountIconUpdateManyWithWhereWithoutAccountInput | AccountIconUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountIconScalarWhereInput | AccountIconScalarWhereInput[]
  }

  export type AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountLittleLegendCreateWithoutAccountInput, AccountLittleLegendUncheckedCreateWithoutAccountInput> | AccountLittleLegendCreateWithoutAccountInput[] | AccountLittleLegendUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountLittleLegendCreateOrConnectWithoutAccountInput | AccountLittleLegendCreateOrConnectWithoutAccountInput[]
    upsert?: AccountLittleLegendUpsertWithWhereUniqueWithoutAccountInput | AccountLittleLegendUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountLittleLegendCreateManyAccountInputEnvelope
    set?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    disconnect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    delete?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    connect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    update?: AccountLittleLegendUpdateWithWhereUniqueWithoutAccountInput | AccountLittleLegendUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountLittleLegendUpdateManyWithWhereWithoutAccountInput | AccountLittleLegendUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountLittleLegendScalarWhereInput | AccountLittleLegendScalarWhereInput[]
  }

  export type AccountBoomUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountBoomCreateWithoutAccountInput, AccountBoomUncheckedCreateWithoutAccountInput> | AccountBoomCreateWithoutAccountInput[] | AccountBoomUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountBoomCreateOrConnectWithoutAccountInput | AccountBoomCreateOrConnectWithoutAccountInput[]
    upsert?: AccountBoomUpsertWithWhereUniqueWithoutAccountInput | AccountBoomUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountBoomCreateManyAccountInputEnvelope
    set?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    disconnect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    delete?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    connect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    update?: AccountBoomUpdateWithWhereUniqueWithoutAccountInput | AccountBoomUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountBoomUpdateManyWithWhereWithoutAccountInput | AccountBoomUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountBoomScalarWhereInput | AccountBoomScalarWhereInput[]
  }

  export type AccountArenaUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountArenaCreateWithoutAccountInput, AccountArenaUncheckedCreateWithoutAccountInput> | AccountArenaCreateWithoutAccountInput[] | AccountArenaUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountArenaCreateOrConnectWithoutAccountInput | AccountArenaCreateOrConnectWithoutAccountInput[]
    upsert?: AccountArenaUpsertWithWhereUniqueWithoutAccountInput | AccountArenaUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountArenaCreateManyAccountInputEnvelope
    set?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    disconnect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    delete?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    connect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    update?: AccountArenaUpdateWithWhereUniqueWithoutAccountInput | AccountArenaUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountArenaUpdateManyWithWhereWithoutAccountInput | AccountArenaUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountArenaScalarWhereInput | AccountArenaScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTopUpTransactionsInput = {
    create?: XOR<UserCreateWithoutTopUpTransactionsInput, UserUncheckedCreateWithoutTopUpTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopUpTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTopUpStatusFieldUpdateOperationsInput = {
    set?: $Enums.TopUpStatus
  }

  export type UserUpdateOneRequiredWithoutTopUpTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTopUpTransactionsInput, UserUncheckedCreateWithoutTopUpTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTopUpTransactionsInput
    upsert?: UserUpsertWithoutTopUpTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTopUpTransactionsInput, UserUpdateWithoutTopUpTransactionsInput>, UserUncheckedUpdateWithoutTopUpTransactionsInput>
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type AccountCreateNestedManyWithoutOrderInput = {
    create?: XOR<AccountCreateWithoutOrderInput, AccountUncheckedCreateWithoutOrderInput> | AccountCreateWithoutOrderInput[] | AccountUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutOrderInput | AccountCreateOrConnectWithoutOrderInput[]
    createMany?: AccountCreateManyOrderInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<AccountCreateWithoutOrderInput, AccountUncheckedCreateWithoutOrderInput> | AccountCreateWithoutOrderInput[] | AccountUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutOrderInput | AccountCreateOrConnectWithoutOrderInput[]
    createMany?: AccountCreateManyOrderInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type AccountUpdateManyWithoutOrderNestedInput = {
    create?: XOR<AccountCreateWithoutOrderInput, AccountUncheckedCreateWithoutOrderInput> | AccountCreateWithoutOrderInput[] | AccountUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutOrderInput | AccountCreateOrConnectWithoutOrderInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutOrderInput | AccountUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: AccountCreateManyOrderInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutOrderInput | AccountUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutOrderInput | AccountUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<AccountCreateWithoutOrderInput, AccountUncheckedCreateWithoutOrderInput> | AccountCreateWithoutOrderInput[] | AccountUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutOrderInput | AccountCreateOrConnectWithoutOrderInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutOrderInput | AccountUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: AccountCreateManyOrderInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutOrderInput | AccountUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutOrderInput | AccountUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SkinCreateNestedManyWithoutChampionInput = {
    create?: XOR<SkinCreateWithoutChampionInput, SkinUncheckedCreateWithoutChampionInput> | SkinCreateWithoutChampionInput[] | SkinUncheckedCreateWithoutChampionInput[]
    connectOrCreate?: SkinCreateOrConnectWithoutChampionInput | SkinCreateOrConnectWithoutChampionInput[]
    createMany?: SkinCreateManyChampionInputEnvelope
    connect?: SkinWhereUniqueInput | SkinWhereUniqueInput[]
  }

  export type AccountChampionCreateNestedManyWithoutChampionInput = {
    create?: XOR<AccountChampionCreateWithoutChampionInput, AccountChampionUncheckedCreateWithoutChampionInput> | AccountChampionCreateWithoutChampionInput[] | AccountChampionUncheckedCreateWithoutChampionInput[]
    connectOrCreate?: AccountChampionCreateOrConnectWithoutChampionInput | AccountChampionCreateOrConnectWithoutChampionInput[]
    createMany?: AccountChampionCreateManyChampionInputEnvelope
    connect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
  }

  export type SkinUncheckedCreateNestedManyWithoutChampionInput = {
    create?: XOR<SkinCreateWithoutChampionInput, SkinUncheckedCreateWithoutChampionInput> | SkinCreateWithoutChampionInput[] | SkinUncheckedCreateWithoutChampionInput[]
    connectOrCreate?: SkinCreateOrConnectWithoutChampionInput | SkinCreateOrConnectWithoutChampionInput[]
    createMany?: SkinCreateManyChampionInputEnvelope
    connect?: SkinWhereUniqueInput | SkinWhereUniqueInput[]
  }

  export type AccountChampionUncheckedCreateNestedManyWithoutChampionInput = {
    create?: XOR<AccountChampionCreateWithoutChampionInput, AccountChampionUncheckedCreateWithoutChampionInput> | AccountChampionCreateWithoutChampionInput[] | AccountChampionUncheckedCreateWithoutChampionInput[]
    connectOrCreate?: AccountChampionCreateOrConnectWithoutChampionInput | AccountChampionCreateOrConnectWithoutChampionInput[]
    createMany?: AccountChampionCreateManyChampionInputEnvelope
    connect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
  }

  export type SkinUpdateManyWithoutChampionNestedInput = {
    create?: XOR<SkinCreateWithoutChampionInput, SkinUncheckedCreateWithoutChampionInput> | SkinCreateWithoutChampionInput[] | SkinUncheckedCreateWithoutChampionInput[]
    connectOrCreate?: SkinCreateOrConnectWithoutChampionInput | SkinCreateOrConnectWithoutChampionInput[]
    upsert?: SkinUpsertWithWhereUniqueWithoutChampionInput | SkinUpsertWithWhereUniqueWithoutChampionInput[]
    createMany?: SkinCreateManyChampionInputEnvelope
    set?: SkinWhereUniqueInput | SkinWhereUniqueInput[]
    disconnect?: SkinWhereUniqueInput | SkinWhereUniqueInput[]
    delete?: SkinWhereUniqueInput | SkinWhereUniqueInput[]
    connect?: SkinWhereUniqueInput | SkinWhereUniqueInput[]
    update?: SkinUpdateWithWhereUniqueWithoutChampionInput | SkinUpdateWithWhereUniqueWithoutChampionInput[]
    updateMany?: SkinUpdateManyWithWhereWithoutChampionInput | SkinUpdateManyWithWhereWithoutChampionInput[]
    deleteMany?: SkinScalarWhereInput | SkinScalarWhereInput[]
  }

  export type AccountChampionUpdateManyWithoutChampionNestedInput = {
    create?: XOR<AccountChampionCreateWithoutChampionInput, AccountChampionUncheckedCreateWithoutChampionInput> | AccountChampionCreateWithoutChampionInput[] | AccountChampionUncheckedCreateWithoutChampionInput[]
    connectOrCreate?: AccountChampionCreateOrConnectWithoutChampionInput | AccountChampionCreateOrConnectWithoutChampionInput[]
    upsert?: AccountChampionUpsertWithWhereUniqueWithoutChampionInput | AccountChampionUpsertWithWhereUniqueWithoutChampionInput[]
    createMany?: AccountChampionCreateManyChampionInputEnvelope
    set?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    disconnect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    delete?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    connect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    update?: AccountChampionUpdateWithWhereUniqueWithoutChampionInput | AccountChampionUpdateWithWhereUniqueWithoutChampionInput[]
    updateMany?: AccountChampionUpdateManyWithWhereWithoutChampionInput | AccountChampionUpdateManyWithWhereWithoutChampionInput[]
    deleteMany?: AccountChampionScalarWhereInput | AccountChampionScalarWhereInput[]
  }

  export type SkinUncheckedUpdateManyWithoutChampionNestedInput = {
    create?: XOR<SkinCreateWithoutChampionInput, SkinUncheckedCreateWithoutChampionInput> | SkinCreateWithoutChampionInput[] | SkinUncheckedCreateWithoutChampionInput[]
    connectOrCreate?: SkinCreateOrConnectWithoutChampionInput | SkinCreateOrConnectWithoutChampionInput[]
    upsert?: SkinUpsertWithWhereUniqueWithoutChampionInput | SkinUpsertWithWhereUniqueWithoutChampionInput[]
    createMany?: SkinCreateManyChampionInputEnvelope
    set?: SkinWhereUniqueInput | SkinWhereUniqueInput[]
    disconnect?: SkinWhereUniqueInput | SkinWhereUniqueInput[]
    delete?: SkinWhereUniqueInput | SkinWhereUniqueInput[]
    connect?: SkinWhereUniqueInput | SkinWhereUniqueInput[]
    update?: SkinUpdateWithWhereUniqueWithoutChampionInput | SkinUpdateWithWhereUniqueWithoutChampionInput[]
    updateMany?: SkinUpdateManyWithWhereWithoutChampionInput | SkinUpdateManyWithWhereWithoutChampionInput[]
    deleteMany?: SkinScalarWhereInput | SkinScalarWhereInput[]
  }

  export type AccountChampionUncheckedUpdateManyWithoutChampionNestedInput = {
    create?: XOR<AccountChampionCreateWithoutChampionInput, AccountChampionUncheckedCreateWithoutChampionInput> | AccountChampionCreateWithoutChampionInput[] | AccountChampionUncheckedCreateWithoutChampionInput[]
    connectOrCreate?: AccountChampionCreateOrConnectWithoutChampionInput | AccountChampionCreateOrConnectWithoutChampionInput[]
    upsert?: AccountChampionUpsertWithWhereUniqueWithoutChampionInput | AccountChampionUpsertWithWhereUniqueWithoutChampionInput[]
    createMany?: AccountChampionCreateManyChampionInputEnvelope
    set?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    disconnect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    delete?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    connect?: AccountChampionWhereUniqueInput | AccountChampionWhereUniqueInput[]
    update?: AccountChampionUpdateWithWhereUniqueWithoutChampionInput | AccountChampionUpdateWithWhereUniqueWithoutChampionInput[]
    updateMany?: AccountChampionUpdateManyWithWhereWithoutChampionInput | AccountChampionUpdateManyWithWhereWithoutChampionInput[]
    deleteMany?: AccountChampionScalarWhereInput | AccountChampionScalarWhereInput[]
  }

  export type ChampionCreateNestedOneWithoutSkinsInput = {
    create?: XOR<ChampionCreateWithoutSkinsInput, ChampionUncheckedCreateWithoutSkinsInput>
    connectOrCreate?: ChampionCreateOrConnectWithoutSkinsInput
    connect?: ChampionWhereUniqueInput
  }

  export type ChromaCreateNestedManyWithoutSkinInput = {
    create?: XOR<ChromaCreateWithoutSkinInput, ChromaUncheckedCreateWithoutSkinInput> | ChromaCreateWithoutSkinInput[] | ChromaUncheckedCreateWithoutSkinInput[]
    connectOrCreate?: ChromaCreateOrConnectWithoutSkinInput | ChromaCreateOrConnectWithoutSkinInput[]
    createMany?: ChromaCreateManySkinInputEnvelope
    connect?: ChromaWhereUniqueInput | ChromaWhereUniqueInput[]
  }

  export type AccountSkinCreateNestedManyWithoutSkinInput = {
    create?: XOR<AccountSkinCreateWithoutSkinInput, AccountSkinUncheckedCreateWithoutSkinInput> | AccountSkinCreateWithoutSkinInput[] | AccountSkinUncheckedCreateWithoutSkinInput[]
    connectOrCreate?: AccountSkinCreateOrConnectWithoutSkinInput | AccountSkinCreateOrConnectWithoutSkinInput[]
    createMany?: AccountSkinCreateManySkinInputEnvelope
    connect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
  }

  export type ChromaUncheckedCreateNestedManyWithoutSkinInput = {
    create?: XOR<ChromaCreateWithoutSkinInput, ChromaUncheckedCreateWithoutSkinInput> | ChromaCreateWithoutSkinInput[] | ChromaUncheckedCreateWithoutSkinInput[]
    connectOrCreate?: ChromaCreateOrConnectWithoutSkinInput | ChromaCreateOrConnectWithoutSkinInput[]
    createMany?: ChromaCreateManySkinInputEnvelope
    connect?: ChromaWhereUniqueInput | ChromaWhereUniqueInput[]
  }

  export type AccountSkinUncheckedCreateNestedManyWithoutSkinInput = {
    create?: XOR<AccountSkinCreateWithoutSkinInput, AccountSkinUncheckedCreateWithoutSkinInput> | AccountSkinCreateWithoutSkinInput[] | AccountSkinUncheckedCreateWithoutSkinInput[]
    connectOrCreate?: AccountSkinCreateOrConnectWithoutSkinInput | AccountSkinCreateOrConnectWithoutSkinInput[]
    createMany?: AccountSkinCreateManySkinInputEnvelope
    connect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
  }

  export type ChampionUpdateOneRequiredWithoutSkinsNestedInput = {
    create?: XOR<ChampionCreateWithoutSkinsInput, ChampionUncheckedCreateWithoutSkinsInput>
    connectOrCreate?: ChampionCreateOrConnectWithoutSkinsInput
    upsert?: ChampionUpsertWithoutSkinsInput
    connect?: ChampionWhereUniqueInput
    update?: XOR<XOR<ChampionUpdateToOneWithWhereWithoutSkinsInput, ChampionUpdateWithoutSkinsInput>, ChampionUncheckedUpdateWithoutSkinsInput>
  }

  export type ChromaUpdateManyWithoutSkinNestedInput = {
    create?: XOR<ChromaCreateWithoutSkinInput, ChromaUncheckedCreateWithoutSkinInput> | ChromaCreateWithoutSkinInput[] | ChromaUncheckedCreateWithoutSkinInput[]
    connectOrCreate?: ChromaCreateOrConnectWithoutSkinInput | ChromaCreateOrConnectWithoutSkinInput[]
    upsert?: ChromaUpsertWithWhereUniqueWithoutSkinInput | ChromaUpsertWithWhereUniqueWithoutSkinInput[]
    createMany?: ChromaCreateManySkinInputEnvelope
    set?: ChromaWhereUniqueInput | ChromaWhereUniqueInput[]
    disconnect?: ChromaWhereUniqueInput | ChromaWhereUniqueInput[]
    delete?: ChromaWhereUniqueInput | ChromaWhereUniqueInput[]
    connect?: ChromaWhereUniqueInput | ChromaWhereUniqueInput[]
    update?: ChromaUpdateWithWhereUniqueWithoutSkinInput | ChromaUpdateWithWhereUniqueWithoutSkinInput[]
    updateMany?: ChromaUpdateManyWithWhereWithoutSkinInput | ChromaUpdateManyWithWhereWithoutSkinInput[]
    deleteMany?: ChromaScalarWhereInput | ChromaScalarWhereInput[]
  }

  export type AccountSkinUpdateManyWithoutSkinNestedInput = {
    create?: XOR<AccountSkinCreateWithoutSkinInput, AccountSkinUncheckedCreateWithoutSkinInput> | AccountSkinCreateWithoutSkinInput[] | AccountSkinUncheckedCreateWithoutSkinInput[]
    connectOrCreate?: AccountSkinCreateOrConnectWithoutSkinInput | AccountSkinCreateOrConnectWithoutSkinInput[]
    upsert?: AccountSkinUpsertWithWhereUniqueWithoutSkinInput | AccountSkinUpsertWithWhereUniqueWithoutSkinInput[]
    createMany?: AccountSkinCreateManySkinInputEnvelope
    set?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    disconnect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    delete?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    connect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    update?: AccountSkinUpdateWithWhereUniqueWithoutSkinInput | AccountSkinUpdateWithWhereUniqueWithoutSkinInput[]
    updateMany?: AccountSkinUpdateManyWithWhereWithoutSkinInput | AccountSkinUpdateManyWithWhereWithoutSkinInput[]
    deleteMany?: AccountSkinScalarWhereInput | AccountSkinScalarWhereInput[]
  }

  export type ChromaUncheckedUpdateManyWithoutSkinNestedInput = {
    create?: XOR<ChromaCreateWithoutSkinInput, ChromaUncheckedCreateWithoutSkinInput> | ChromaCreateWithoutSkinInput[] | ChromaUncheckedCreateWithoutSkinInput[]
    connectOrCreate?: ChromaCreateOrConnectWithoutSkinInput | ChromaCreateOrConnectWithoutSkinInput[]
    upsert?: ChromaUpsertWithWhereUniqueWithoutSkinInput | ChromaUpsertWithWhereUniqueWithoutSkinInput[]
    createMany?: ChromaCreateManySkinInputEnvelope
    set?: ChromaWhereUniqueInput | ChromaWhereUniqueInput[]
    disconnect?: ChromaWhereUniqueInput | ChromaWhereUniqueInput[]
    delete?: ChromaWhereUniqueInput | ChromaWhereUniqueInput[]
    connect?: ChromaWhereUniqueInput | ChromaWhereUniqueInput[]
    update?: ChromaUpdateWithWhereUniqueWithoutSkinInput | ChromaUpdateWithWhereUniqueWithoutSkinInput[]
    updateMany?: ChromaUpdateManyWithWhereWithoutSkinInput | ChromaUpdateManyWithWhereWithoutSkinInput[]
    deleteMany?: ChromaScalarWhereInput | ChromaScalarWhereInput[]
  }

  export type AccountSkinUncheckedUpdateManyWithoutSkinNestedInput = {
    create?: XOR<AccountSkinCreateWithoutSkinInput, AccountSkinUncheckedCreateWithoutSkinInput> | AccountSkinCreateWithoutSkinInput[] | AccountSkinUncheckedCreateWithoutSkinInput[]
    connectOrCreate?: AccountSkinCreateOrConnectWithoutSkinInput | AccountSkinCreateOrConnectWithoutSkinInput[]
    upsert?: AccountSkinUpsertWithWhereUniqueWithoutSkinInput | AccountSkinUpsertWithWhereUniqueWithoutSkinInput[]
    createMany?: AccountSkinCreateManySkinInputEnvelope
    set?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    disconnect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    delete?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    connect?: AccountSkinWhereUniqueInput | AccountSkinWhereUniqueInput[]
    update?: AccountSkinUpdateWithWhereUniqueWithoutSkinInput | AccountSkinUpdateWithWhereUniqueWithoutSkinInput[]
    updateMany?: AccountSkinUpdateManyWithWhereWithoutSkinInput | AccountSkinUpdateManyWithWhereWithoutSkinInput[]
    deleteMany?: AccountSkinScalarWhereInput | AccountSkinScalarWhereInput[]
  }

  export type SkinCreateNestedOneWithoutChromasInput = {
    create?: XOR<SkinCreateWithoutChromasInput, SkinUncheckedCreateWithoutChromasInput>
    connectOrCreate?: SkinCreateOrConnectWithoutChromasInput
    connect?: SkinWhereUniqueInput
  }

  export type AccountChromaCreateNestedManyWithoutChromaInput = {
    create?: XOR<AccountChromaCreateWithoutChromaInput, AccountChromaUncheckedCreateWithoutChromaInput> | AccountChromaCreateWithoutChromaInput[] | AccountChromaUncheckedCreateWithoutChromaInput[]
    connectOrCreate?: AccountChromaCreateOrConnectWithoutChromaInput | AccountChromaCreateOrConnectWithoutChromaInput[]
    createMany?: AccountChromaCreateManyChromaInputEnvelope
    connect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
  }

  export type AccountChromaUncheckedCreateNestedManyWithoutChromaInput = {
    create?: XOR<AccountChromaCreateWithoutChromaInput, AccountChromaUncheckedCreateWithoutChromaInput> | AccountChromaCreateWithoutChromaInput[] | AccountChromaUncheckedCreateWithoutChromaInput[]
    connectOrCreate?: AccountChromaCreateOrConnectWithoutChromaInput | AccountChromaCreateOrConnectWithoutChromaInput[]
    createMany?: AccountChromaCreateManyChromaInputEnvelope
    connect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
  }

  export type SkinUpdateOneRequiredWithoutChromasNestedInput = {
    create?: XOR<SkinCreateWithoutChromasInput, SkinUncheckedCreateWithoutChromasInput>
    connectOrCreate?: SkinCreateOrConnectWithoutChromasInput
    upsert?: SkinUpsertWithoutChromasInput
    connect?: SkinWhereUniqueInput
    update?: XOR<XOR<SkinUpdateToOneWithWhereWithoutChromasInput, SkinUpdateWithoutChromasInput>, SkinUncheckedUpdateWithoutChromasInput>
  }

  export type AccountChromaUpdateManyWithoutChromaNestedInput = {
    create?: XOR<AccountChromaCreateWithoutChromaInput, AccountChromaUncheckedCreateWithoutChromaInput> | AccountChromaCreateWithoutChromaInput[] | AccountChromaUncheckedCreateWithoutChromaInput[]
    connectOrCreate?: AccountChromaCreateOrConnectWithoutChromaInput | AccountChromaCreateOrConnectWithoutChromaInput[]
    upsert?: AccountChromaUpsertWithWhereUniqueWithoutChromaInput | AccountChromaUpsertWithWhereUniqueWithoutChromaInput[]
    createMany?: AccountChromaCreateManyChromaInputEnvelope
    set?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    disconnect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    delete?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    connect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    update?: AccountChromaUpdateWithWhereUniqueWithoutChromaInput | AccountChromaUpdateWithWhereUniqueWithoutChromaInput[]
    updateMany?: AccountChromaUpdateManyWithWhereWithoutChromaInput | AccountChromaUpdateManyWithWhereWithoutChromaInput[]
    deleteMany?: AccountChromaScalarWhereInput | AccountChromaScalarWhereInput[]
  }

  export type AccountChromaUncheckedUpdateManyWithoutChromaNestedInput = {
    create?: XOR<AccountChromaCreateWithoutChromaInput, AccountChromaUncheckedCreateWithoutChromaInput> | AccountChromaCreateWithoutChromaInput[] | AccountChromaUncheckedCreateWithoutChromaInput[]
    connectOrCreate?: AccountChromaCreateOrConnectWithoutChromaInput | AccountChromaCreateOrConnectWithoutChromaInput[]
    upsert?: AccountChromaUpsertWithWhereUniqueWithoutChromaInput | AccountChromaUpsertWithWhereUniqueWithoutChromaInput[]
    createMany?: AccountChromaCreateManyChromaInputEnvelope
    set?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    disconnect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    delete?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    connect?: AccountChromaWhereUniqueInput | AccountChromaWhereUniqueInput[]
    update?: AccountChromaUpdateWithWhereUniqueWithoutChromaInput | AccountChromaUpdateWithWhereUniqueWithoutChromaInput[]
    updateMany?: AccountChromaUpdateManyWithWhereWithoutChromaInput | AccountChromaUpdateManyWithWhereWithoutChromaInput[]
    deleteMany?: AccountChromaScalarWhereInput | AccountChromaScalarWhereInput[]
  }

  export type AccountWardCreateNestedManyWithoutWardInput = {
    create?: XOR<AccountWardCreateWithoutWardInput, AccountWardUncheckedCreateWithoutWardInput> | AccountWardCreateWithoutWardInput[] | AccountWardUncheckedCreateWithoutWardInput[]
    connectOrCreate?: AccountWardCreateOrConnectWithoutWardInput | AccountWardCreateOrConnectWithoutWardInput[]
    createMany?: AccountWardCreateManyWardInputEnvelope
    connect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
  }

  export type AccountWardUncheckedCreateNestedManyWithoutWardInput = {
    create?: XOR<AccountWardCreateWithoutWardInput, AccountWardUncheckedCreateWithoutWardInput> | AccountWardCreateWithoutWardInput[] | AccountWardUncheckedCreateWithoutWardInput[]
    connectOrCreate?: AccountWardCreateOrConnectWithoutWardInput | AccountWardCreateOrConnectWithoutWardInput[]
    createMany?: AccountWardCreateManyWardInputEnvelope
    connect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
  }

  export type AccountWardUpdateManyWithoutWardNestedInput = {
    create?: XOR<AccountWardCreateWithoutWardInput, AccountWardUncheckedCreateWithoutWardInput> | AccountWardCreateWithoutWardInput[] | AccountWardUncheckedCreateWithoutWardInput[]
    connectOrCreate?: AccountWardCreateOrConnectWithoutWardInput | AccountWardCreateOrConnectWithoutWardInput[]
    upsert?: AccountWardUpsertWithWhereUniqueWithoutWardInput | AccountWardUpsertWithWhereUniqueWithoutWardInput[]
    createMany?: AccountWardCreateManyWardInputEnvelope
    set?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    disconnect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    delete?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    connect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    update?: AccountWardUpdateWithWhereUniqueWithoutWardInput | AccountWardUpdateWithWhereUniqueWithoutWardInput[]
    updateMany?: AccountWardUpdateManyWithWhereWithoutWardInput | AccountWardUpdateManyWithWhereWithoutWardInput[]
    deleteMany?: AccountWardScalarWhereInput | AccountWardScalarWhereInput[]
  }

  export type AccountWardUncheckedUpdateManyWithoutWardNestedInput = {
    create?: XOR<AccountWardCreateWithoutWardInput, AccountWardUncheckedCreateWithoutWardInput> | AccountWardCreateWithoutWardInput[] | AccountWardUncheckedCreateWithoutWardInput[]
    connectOrCreate?: AccountWardCreateOrConnectWithoutWardInput | AccountWardCreateOrConnectWithoutWardInput[]
    upsert?: AccountWardUpsertWithWhereUniqueWithoutWardInput | AccountWardUpsertWithWhereUniqueWithoutWardInput[]
    createMany?: AccountWardCreateManyWardInputEnvelope
    set?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    disconnect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    delete?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    connect?: AccountWardWhereUniqueInput | AccountWardWhereUniqueInput[]
    update?: AccountWardUpdateWithWhereUniqueWithoutWardInput | AccountWardUpdateWithWhereUniqueWithoutWardInput[]
    updateMany?: AccountWardUpdateManyWithWhereWithoutWardInput | AccountWardUpdateManyWithWhereWithoutWardInput[]
    deleteMany?: AccountWardScalarWhereInput | AccountWardScalarWhereInput[]
  }

  export type AccountEmoteCreateNestedManyWithoutEmoteInput = {
    create?: XOR<AccountEmoteCreateWithoutEmoteInput, AccountEmoteUncheckedCreateWithoutEmoteInput> | AccountEmoteCreateWithoutEmoteInput[] | AccountEmoteUncheckedCreateWithoutEmoteInput[]
    connectOrCreate?: AccountEmoteCreateOrConnectWithoutEmoteInput | AccountEmoteCreateOrConnectWithoutEmoteInput[]
    createMany?: AccountEmoteCreateManyEmoteInputEnvelope
    connect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
  }

  export type AccountEmoteUncheckedCreateNestedManyWithoutEmoteInput = {
    create?: XOR<AccountEmoteCreateWithoutEmoteInput, AccountEmoteUncheckedCreateWithoutEmoteInput> | AccountEmoteCreateWithoutEmoteInput[] | AccountEmoteUncheckedCreateWithoutEmoteInput[]
    connectOrCreate?: AccountEmoteCreateOrConnectWithoutEmoteInput | AccountEmoteCreateOrConnectWithoutEmoteInput[]
    createMany?: AccountEmoteCreateManyEmoteInputEnvelope
    connect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
  }

  export type AccountEmoteUpdateManyWithoutEmoteNestedInput = {
    create?: XOR<AccountEmoteCreateWithoutEmoteInput, AccountEmoteUncheckedCreateWithoutEmoteInput> | AccountEmoteCreateWithoutEmoteInput[] | AccountEmoteUncheckedCreateWithoutEmoteInput[]
    connectOrCreate?: AccountEmoteCreateOrConnectWithoutEmoteInput | AccountEmoteCreateOrConnectWithoutEmoteInput[]
    upsert?: AccountEmoteUpsertWithWhereUniqueWithoutEmoteInput | AccountEmoteUpsertWithWhereUniqueWithoutEmoteInput[]
    createMany?: AccountEmoteCreateManyEmoteInputEnvelope
    set?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    disconnect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    delete?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    connect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    update?: AccountEmoteUpdateWithWhereUniqueWithoutEmoteInput | AccountEmoteUpdateWithWhereUniqueWithoutEmoteInput[]
    updateMany?: AccountEmoteUpdateManyWithWhereWithoutEmoteInput | AccountEmoteUpdateManyWithWhereWithoutEmoteInput[]
    deleteMany?: AccountEmoteScalarWhereInput | AccountEmoteScalarWhereInput[]
  }

  export type AccountEmoteUncheckedUpdateManyWithoutEmoteNestedInput = {
    create?: XOR<AccountEmoteCreateWithoutEmoteInput, AccountEmoteUncheckedCreateWithoutEmoteInput> | AccountEmoteCreateWithoutEmoteInput[] | AccountEmoteUncheckedCreateWithoutEmoteInput[]
    connectOrCreate?: AccountEmoteCreateOrConnectWithoutEmoteInput | AccountEmoteCreateOrConnectWithoutEmoteInput[]
    upsert?: AccountEmoteUpsertWithWhereUniqueWithoutEmoteInput | AccountEmoteUpsertWithWhereUniqueWithoutEmoteInput[]
    createMany?: AccountEmoteCreateManyEmoteInputEnvelope
    set?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    disconnect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    delete?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    connect?: AccountEmoteWhereUniqueInput | AccountEmoteWhereUniqueInput[]
    update?: AccountEmoteUpdateWithWhereUniqueWithoutEmoteInput | AccountEmoteUpdateWithWhereUniqueWithoutEmoteInput[]
    updateMany?: AccountEmoteUpdateManyWithWhereWithoutEmoteInput | AccountEmoteUpdateManyWithWhereWithoutEmoteInput[]
    deleteMany?: AccountEmoteScalarWhereInput | AccountEmoteScalarWhereInput[]
  }

  export type AccountIconCreateNestedManyWithoutIconInput = {
    create?: XOR<AccountIconCreateWithoutIconInput, AccountIconUncheckedCreateWithoutIconInput> | AccountIconCreateWithoutIconInput[] | AccountIconUncheckedCreateWithoutIconInput[]
    connectOrCreate?: AccountIconCreateOrConnectWithoutIconInput | AccountIconCreateOrConnectWithoutIconInput[]
    createMany?: AccountIconCreateManyIconInputEnvelope
    connect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
  }

  export type AccountIconUncheckedCreateNestedManyWithoutIconInput = {
    create?: XOR<AccountIconCreateWithoutIconInput, AccountIconUncheckedCreateWithoutIconInput> | AccountIconCreateWithoutIconInput[] | AccountIconUncheckedCreateWithoutIconInput[]
    connectOrCreate?: AccountIconCreateOrConnectWithoutIconInput | AccountIconCreateOrConnectWithoutIconInput[]
    createMany?: AccountIconCreateManyIconInputEnvelope
    connect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
  }

  export type AccountIconUpdateManyWithoutIconNestedInput = {
    create?: XOR<AccountIconCreateWithoutIconInput, AccountIconUncheckedCreateWithoutIconInput> | AccountIconCreateWithoutIconInput[] | AccountIconUncheckedCreateWithoutIconInput[]
    connectOrCreate?: AccountIconCreateOrConnectWithoutIconInput | AccountIconCreateOrConnectWithoutIconInput[]
    upsert?: AccountIconUpsertWithWhereUniqueWithoutIconInput | AccountIconUpsertWithWhereUniqueWithoutIconInput[]
    createMany?: AccountIconCreateManyIconInputEnvelope
    set?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    disconnect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    delete?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    connect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    update?: AccountIconUpdateWithWhereUniqueWithoutIconInput | AccountIconUpdateWithWhereUniqueWithoutIconInput[]
    updateMany?: AccountIconUpdateManyWithWhereWithoutIconInput | AccountIconUpdateManyWithWhereWithoutIconInput[]
    deleteMany?: AccountIconScalarWhereInput | AccountIconScalarWhereInput[]
  }

  export type AccountIconUncheckedUpdateManyWithoutIconNestedInput = {
    create?: XOR<AccountIconCreateWithoutIconInput, AccountIconUncheckedCreateWithoutIconInput> | AccountIconCreateWithoutIconInput[] | AccountIconUncheckedCreateWithoutIconInput[]
    connectOrCreate?: AccountIconCreateOrConnectWithoutIconInput | AccountIconCreateOrConnectWithoutIconInput[]
    upsert?: AccountIconUpsertWithWhereUniqueWithoutIconInput | AccountIconUpsertWithWhereUniqueWithoutIconInput[]
    createMany?: AccountIconCreateManyIconInputEnvelope
    set?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    disconnect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    delete?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    connect?: AccountIconWhereUniqueInput | AccountIconWhereUniqueInput[]
    update?: AccountIconUpdateWithWhereUniqueWithoutIconInput | AccountIconUpdateWithWhereUniqueWithoutIconInput[]
    updateMany?: AccountIconUpdateManyWithWhereWithoutIconInput | AccountIconUpdateManyWithWhereWithoutIconInput[]
    deleteMany?: AccountIconScalarWhereInput | AccountIconScalarWhereInput[]
  }

  export type AccountLittleLegendCreateNestedManyWithoutLittleLegendInput = {
    create?: XOR<AccountLittleLegendCreateWithoutLittleLegendInput, AccountLittleLegendUncheckedCreateWithoutLittleLegendInput> | AccountLittleLegendCreateWithoutLittleLegendInput[] | AccountLittleLegendUncheckedCreateWithoutLittleLegendInput[]
    connectOrCreate?: AccountLittleLegendCreateOrConnectWithoutLittleLegendInput | AccountLittleLegendCreateOrConnectWithoutLittleLegendInput[]
    createMany?: AccountLittleLegendCreateManyLittleLegendInputEnvelope
    connect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
  }

  export type AccountLittleLegendUncheckedCreateNestedManyWithoutLittleLegendInput = {
    create?: XOR<AccountLittleLegendCreateWithoutLittleLegendInput, AccountLittleLegendUncheckedCreateWithoutLittleLegendInput> | AccountLittleLegendCreateWithoutLittleLegendInput[] | AccountLittleLegendUncheckedCreateWithoutLittleLegendInput[]
    connectOrCreate?: AccountLittleLegendCreateOrConnectWithoutLittleLegendInput | AccountLittleLegendCreateOrConnectWithoutLittleLegendInput[]
    createMany?: AccountLittleLegendCreateManyLittleLegendInputEnvelope
    connect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
  }

  export type AccountLittleLegendUpdateManyWithoutLittleLegendNestedInput = {
    create?: XOR<AccountLittleLegendCreateWithoutLittleLegendInput, AccountLittleLegendUncheckedCreateWithoutLittleLegendInput> | AccountLittleLegendCreateWithoutLittleLegendInput[] | AccountLittleLegendUncheckedCreateWithoutLittleLegendInput[]
    connectOrCreate?: AccountLittleLegendCreateOrConnectWithoutLittleLegendInput | AccountLittleLegendCreateOrConnectWithoutLittleLegendInput[]
    upsert?: AccountLittleLegendUpsertWithWhereUniqueWithoutLittleLegendInput | AccountLittleLegendUpsertWithWhereUniqueWithoutLittleLegendInput[]
    createMany?: AccountLittleLegendCreateManyLittleLegendInputEnvelope
    set?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    disconnect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    delete?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    connect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    update?: AccountLittleLegendUpdateWithWhereUniqueWithoutLittleLegendInput | AccountLittleLegendUpdateWithWhereUniqueWithoutLittleLegendInput[]
    updateMany?: AccountLittleLegendUpdateManyWithWhereWithoutLittleLegendInput | AccountLittleLegendUpdateManyWithWhereWithoutLittleLegendInput[]
    deleteMany?: AccountLittleLegendScalarWhereInput | AccountLittleLegendScalarWhereInput[]
  }

  export type AccountLittleLegendUncheckedUpdateManyWithoutLittleLegendNestedInput = {
    create?: XOR<AccountLittleLegendCreateWithoutLittleLegendInput, AccountLittleLegendUncheckedCreateWithoutLittleLegendInput> | AccountLittleLegendCreateWithoutLittleLegendInput[] | AccountLittleLegendUncheckedCreateWithoutLittleLegendInput[]
    connectOrCreate?: AccountLittleLegendCreateOrConnectWithoutLittleLegendInput | AccountLittleLegendCreateOrConnectWithoutLittleLegendInput[]
    upsert?: AccountLittleLegendUpsertWithWhereUniqueWithoutLittleLegendInput | AccountLittleLegendUpsertWithWhereUniqueWithoutLittleLegendInput[]
    createMany?: AccountLittleLegendCreateManyLittleLegendInputEnvelope
    set?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    disconnect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    delete?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    connect?: AccountLittleLegendWhereUniqueInput | AccountLittleLegendWhereUniqueInput[]
    update?: AccountLittleLegendUpdateWithWhereUniqueWithoutLittleLegendInput | AccountLittleLegendUpdateWithWhereUniqueWithoutLittleLegendInput[]
    updateMany?: AccountLittleLegendUpdateManyWithWhereWithoutLittleLegendInput | AccountLittleLegendUpdateManyWithWhereWithoutLittleLegendInput[]
    deleteMany?: AccountLittleLegendScalarWhereInput | AccountLittleLegendScalarWhereInput[]
  }

  export type AccountBoomCreateNestedManyWithoutBoomInput = {
    create?: XOR<AccountBoomCreateWithoutBoomInput, AccountBoomUncheckedCreateWithoutBoomInput> | AccountBoomCreateWithoutBoomInput[] | AccountBoomUncheckedCreateWithoutBoomInput[]
    connectOrCreate?: AccountBoomCreateOrConnectWithoutBoomInput | AccountBoomCreateOrConnectWithoutBoomInput[]
    createMany?: AccountBoomCreateManyBoomInputEnvelope
    connect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
  }

  export type AccountBoomUncheckedCreateNestedManyWithoutBoomInput = {
    create?: XOR<AccountBoomCreateWithoutBoomInput, AccountBoomUncheckedCreateWithoutBoomInput> | AccountBoomCreateWithoutBoomInput[] | AccountBoomUncheckedCreateWithoutBoomInput[]
    connectOrCreate?: AccountBoomCreateOrConnectWithoutBoomInput | AccountBoomCreateOrConnectWithoutBoomInput[]
    createMany?: AccountBoomCreateManyBoomInputEnvelope
    connect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
  }

  export type AccountBoomUpdateManyWithoutBoomNestedInput = {
    create?: XOR<AccountBoomCreateWithoutBoomInput, AccountBoomUncheckedCreateWithoutBoomInput> | AccountBoomCreateWithoutBoomInput[] | AccountBoomUncheckedCreateWithoutBoomInput[]
    connectOrCreate?: AccountBoomCreateOrConnectWithoutBoomInput | AccountBoomCreateOrConnectWithoutBoomInput[]
    upsert?: AccountBoomUpsertWithWhereUniqueWithoutBoomInput | AccountBoomUpsertWithWhereUniqueWithoutBoomInput[]
    createMany?: AccountBoomCreateManyBoomInputEnvelope
    set?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    disconnect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    delete?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    connect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    update?: AccountBoomUpdateWithWhereUniqueWithoutBoomInput | AccountBoomUpdateWithWhereUniqueWithoutBoomInput[]
    updateMany?: AccountBoomUpdateManyWithWhereWithoutBoomInput | AccountBoomUpdateManyWithWhereWithoutBoomInput[]
    deleteMany?: AccountBoomScalarWhereInput | AccountBoomScalarWhereInput[]
  }

  export type AccountBoomUncheckedUpdateManyWithoutBoomNestedInput = {
    create?: XOR<AccountBoomCreateWithoutBoomInput, AccountBoomUncheckedCreateWithoutBoomInput> | AccountBoomCreateWithoutBoomInput[] | AccountBoomUncheckedCreateWithoutBoomInput[]
    connectOrCreate?: AccountBoomCreateOrConnectWithoutBoomInput | AccountBoomCreateOrConnectWithoutBoomInput[]
    upsert?: AccountBoomUpsertWithWhereUniqueWithoutBoomInput | AccountBoomUpsertWithWhereUniqueWithoutBoomInput[]
    createMany?: AccountBoomCreateManyBoomInputEnvelope
    set?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    disconnect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    delete?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    connect?: AccountBoomWhereUniqueInput | AccountBoomWhereUniqueInput[]
    update?: AccountBoomUpdateWithWhereUniqueWithoutBoomInput | AccountBoomUpdateWithWhereUniqueWithoutBoomInput[]
    updateMany?: AccountBoomUpdateManyWithWhereWithoutBoomInput | AccountBoomUpdateManyWithWhereWithoutBoomInput[]
    deleteMany?: AccountBoomScalarWhereInput | AccountBoomScalarWhereInput[]
  }

  export type AccountArenaCreateNestedManyWithoutArenaInput = {
    create?: XOR<AccountArenaCreateWithoutArenaInput, AccountArenaUncheckedCreateWithoutArenaInput> | AccountArenaCreateWithoutArenaInput[] | AccountArenaUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: AccountArenaCreateOrConnectWithoutArenaInput | AccountArenaCreateOrConnectWithoutArenaInput[]
    createMany?: AccountArenaCreateManyArenaInputEnvelope
    connect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
  }

  export type AccountArenaUncheckedCreateNestedManyWithoutArenaInput = {
    create?: XOR<AccountArenaCreateWithoutArenaInput, AccountArenaUncheckedCreateWithoutArenaInput> | AccountArenaCreateWithoutArenaInput[] | AccountArenaUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: AccountArenaCreateOrConnectWithoutArenaInput | AccountArenaCreateOrConnectWithoutArenaInput[]
    createMany?: AccountArenaCreateManyArenaInputEnvelope
    connect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
  }

  export type AccountArenaUpdateManyWithoutArenaNestedInput = {
    create?: XOR<AccountArenaCreateWithoutArenaInput, AccountArenaUncheckedCreateWithoutArenaInput> | AccountArenaCreateWithoutArenaInput[] | AccountArenaUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: AccountArenaCreateOrConnectWithoutArenaInput | AccountArenaCreateOrConnectWithoutArenaInput[]
    upsert?: AccountArenaUpsertWithWhereUniqueWithoutArenaInput | AccountArenaUpsertWithWhereUniqueWithoutArenaInput[]
    createMany?: AccountArenaCreateManyArenaInputEnvelope
    set?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    disconnect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    delete?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    connect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    update?: AccountArenaUpdateWithWhereUniqueWithoutArenaInput | AccountArenaUpdateWithWhereUniqueWithoutArenaInput[]
    updateMany?: AccountArenaUpdateManyWithWhereWithoutArenaInput | AccountArenaUpdateManyWithWhereWithoutArenaInput[]
    deleteMany?: AccountArenaScalarWhereInput | AccountArenaScalarWhereInput[]
  }

  export type AccountArenaUncheckedUpdateManyWithoutArenaNestedInput = {
    create?: XOR<AccountArenaCreateWithoutArenaInput, AccountArenaUncheckedCreateWithoutArenaInput> | AccountArenaCreateWithoutArenaInput[] | AccountArenaUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: AccountArenaCreateOrConnectWithoutArenaInput | AccountArenaCreateOrConnectWithoutArenaInput[]
    upsert?: AccountArenaUpsertWithWhereUniqueWithoutArenaInput | AccountArenaUpsertWithWhereUniqueWithoutArenaInput[]
    createMany?: AccountArenaCreateManyArenaInputEnvelope
    set?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    disconnect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    delete?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    connect?: AccountArenaWhereUniqueInput | AccountArenaWhereUniqueInput[]
    update?: AccountArenaUpdateWithWhereUniqueWithoutArenaInput | AccountArenaUpdateWithWhereUniqueWithoutArenaInput[]
    updateMany?: AccountArenaUpdateManyWithWhereWithoutArenaInput | AccountArenaUpdateManyWithWhereWithoutArenaInput[]
    deleteMany?: AccountArenaScalarWhereInput | AccountArenaScalarWhereInput[]
  }

  export type AccountCreateNestedOneWithoutOwnedChampionsInput = {
    create?: XOR<AccountCreateWithoutOwnedChampionsInput, AccountUncheckedCreateWithoutOwnedChampionsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedChampionsInput
    connect?: AccountWhereUniqueInput
  }

  export type ChampionCreateNestedOneWithoutAccountsInput = {
    create?: XOR<ChampionCreateWithoutAccountsInput, ChampionUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: ChampionCreateOrConnectWithoutAccountsInput
    connect?: ChampionWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutOwnedChampionsNestedInput = {
    create?: XOR<AccountCreateWithoutOwnedChampionsInput, AccountUncheckedCreateWithoutOwnedChampionsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedChampionsInput
    upsert?: AccountUpsertWithoutOwnedChampionsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutOwnedChampionsInput, AccountUpdateWithoutOwnedChampionsInput>, AccountUncheckedUpdateWithoutOwnedChampionsInput>
  }

  export type ChampionUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<ChampionCreateWithoutAccountsInput, ChampionUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: ChampionCreateOrConnectWithoutAccountsInput
    upsert?: ChampionUpsertWithoutAccountsInput
    connect?: ChampionWhereUniqueInput
    update?: XOR<XOR<ChampionUpdateToOneWithWhereWithoutAccountsInput, ChampionUpdateWithoutAccountsInput>, ChampionUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountCreateNestedOneWithoutOwnedSkinsInput = {
    create?: XOR<AccountCreateWithoutOwnedSkinsInput, AccountUncheckedCreateWithoutOwnedSkinsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedSkinsInput
    connect?: AccountWhereUniqueInput
  }

  export type SkinCreateNestedOneWithoutAccountsInput = {
    create?: XOR<SkinCreateWithoutAccountsInput, SkinUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: SkinCreateOrConnectWithoutAccountsInput
    connect?: SkinWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutOwnedSkinsNestedInput = {
    create?: XOR<AccountCreateWithoutOwnedSkinsInput, AccountUncheckedCreateWithoutOwnedSkinsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedSkinsInput
    upsert?: AccountUpsertWithoutOwnedSkinsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutOwnedSkinsInput, AccountUpdateWithoutOwnedSkinsInput>, AccountUncheckedUpdateWithoutOwnedSkinsInput>
  }

  export type SkinUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<SkinCreateWithoutAccountsInput, SkinUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: SkinCreateOrConnectWithoutAccountsInput
    upsert?: SkinUpsertWithoutAccountsInput
    connect?: SkinWhereUniqueInput
    update?: XOR<XOR<SkinUpdateToOneWithWhereWithoutAccountsInput, SkinUpdateWithoutAccountsInput>, SkinUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountCreateNestedOneWithoutOwnedChromasInput = {
    create?: XOR<AccountCreateWithoutOwnedChromasInput, AccountUncheckedCreateWithoutOwnedChromasInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedChromasInput
    connect?: AccountWhereUniqueInput
  }

  export type ChromaCreateNestedOneWithoutAccountsInput = {
    create?: XOR<ChromaCreateWithoutAccountsInput, ChromaUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: ChromaCreateOrConnectWithoutAccountsInput
    connect?: ChromaWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutOwnedChromasNestedInput = {
    create?: XOR<AccountCreateWithoutOwnedChromasInput, AccountUncheckedCreateWithoutOwnedChromasInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedChromasInput
    upsert?: AccountUpsertWithoutOwnedChromasInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutOwnedChromasInput, AccountUpdateWithoutOwnedChromasInput>, AccountUncheckedUpdateWithoutOwnedChromasInput>
  }

  export type ChromaUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<ChromaCreateWithoutAccountsInput, ChromaUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: ChromaCreateOrConnectWithoutAccountsInput
    upsert?: ChromaUpsertWithoutAccountsInput
    connect?: ChromaWhereUniqueInput
    update?: XOR<XOR<ChromaUpdateToOneWithWhereWithoutAccountsInput, ChromaUpdateWithoutAccountsInput>, ChromaUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountCreateNestedOneWithoutOwnedWardsInput = {
    create?: XOR<AccountCreateWithoutOwnedWardsInput, AccountUncheckedCreateWithoutOwnedWardsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedWardsInput
    connect?: AccountWhereUniqueInput
  }

  export type WardCreateNestedOneWithoutAccountsInput = {
    create?: XOR<WardCreateWithoutAccountsInput, WardUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: WardCreateOrConnectWithoutAccountsInput
    connect?: WardWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutOwnedWardsNestedInput = {
    create?: XOR<AccountCreateWithoutOwnedWardsInput, AccountUncheckedCreateWithoutOwnedWardsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedWardsInput
    upsert?: AccountUpsertWithoutOwnedWardsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutOwnedWardsInput, AccountUpdateWithoutOwnedWardsInput>, AccountUncheckedUpdateWithoutOwnedWardsInput>
  }

  export type WardUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<WardCreateWithoutAccountsInput, WardUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: WardCreateOrConnectWithoutAccountsInput
    upsert?: WardUpsertWithoutAccountsInput
    connect?: WardWhereUniqueInput
    update?: XOR<XOR<WardUpdateToOneWithWhereWithoutAccountsInput, WardUpdateWithoutAccountsInput>, WardUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountCreateNestedOneWithoutOwnedEmotesInput = {
    create?: XOR<AccountCreateWithoutOwnedEmotesInput, AccountUncheckedCreateWithoutOwnedEmotesInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedEmotesInput
    connect?: AccountWhereUniqueInput
  }

  export type EmoteCreateNestedOneWithoutAccountsInput = {
    create?: XOR<EmoteCreateWithoutAccountsInput, EmoteUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: EmoteCreateOrConnectWithoutAccountsInput
    connect?: EmoteWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutOwnedEmotesNestedInput = {
    create?: XOR<AccountCreateWithoutOwnedEmotesInput, AccountUncheckedCreateWithoutOwnedEmotesInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedEmotesInput
    upsert?: AccountUpsertWithoutOwnedEmotesInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutOwnedEmotesInput, AccountUpdateWithoutOwnedEmotesInput>, AccountUncheckedUpdateWithoutOwnedEmotesInput>
  }

  export type EmoteUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<EmoteCreateWithoutAccountsInput, EmoteUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: EmoteCreateOrConnectWithoutAccountsInput
    upsert?: EmoteUpsertWithoutAccountsInput
    connect?: EmoteWhereUniqueInput
    update?: XOR<XOR<EmoteUpdateToOneWithWhereWithoutAccountsInput, EmoteUpdateWithoutAccountsInput>, EmoteUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountCreateNestedOneWithoutOwnedIconsInput = {
    create?: XOR<AccountCreateWithoutOwnedIconsInput, AccountUncheckedCreateWithoutOwnedIconsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedIconsInput
    connect?: AccountWhereUniqueInput
  }

  export type IconCreateNestedOneWithoutAccountsInput = {
    create?: XOR<IconCreateWithoutAccountsInput, IconUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: IconCreateOrConnectWithoutAccountsInput
    connect?: IconWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutOwnedIconsNestedInput = {
    create?: XOR<AccountCreateWithoutOwnedIconsInput, AccountUncheckedCreateWithoutOwnedIconsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedIconsInput
    upsert?: AccountUpsertWithoutOwnedIconsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutOwnedIconsInput, AccountUpdateWithoutOwnedIconsInput>, AccountUncheckedUpdateWithoutOwnedIconsInput>
  }

  export type IconUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<IconCreateWithoutAccountsInput, IconUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: IconCreateOrConnectWithoutAccountsInput
    upsert?: IconUpsertWithoutAccountsInput
    connect?: IconWhereUniqueInput
    update?: XOR<XOR<IconUpdateToOneWithWhereWithoutAccountsInput, IconUpdateWithoutAccountsInput>, IconUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountCreateNestedOneWithoutOwnedLittleLegendsInput = {
    create?: XOR<AccountCreateWithoutOwnedLittleLegendsInput, AccountUncheckedCreateWithoutOwnedLittleLegendsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedLittleLegendsInput
    connect?: AccountWhereUniqueInput
  }

  export type LittleLegendCreateNestedOneWithoutAccountsInput = {
    create?: XOR<LittleLegendCreateWithoutAccountsInput, LittleLegendUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: LittleLegendCreateOrConnectWithoutAccountsInput
    connect?: LittleLegendWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutOwnedLittleLegendsNestedInput = {
    create?: XOR<AccountCreateWithoutOwnedLittleLegendsInput, AccountUncheckedCreateWithoutOwnedLittleLegendsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedLittleLegendsInput
    upsert?: AccountUpsertWithoutOwnedLittleLegendsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutOwnedLittleLegendsInput, AccountUpdateWithoutOwnedLittleLegendsInput>, AccountUncheckedUpdateWithoutOwnedLittleLegendsInput>
  }

  export type LittleLegendUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<LittleLegendCreateWithoutAccountsInput, LittleLegendUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: LittleLegendCreateOrConnectWithoutAccountsInput
    upsert?: LittleLegendUpsertWithoutAccountsInput
    connect?: LittleLegendWhereUniqueInput
    update?: XOR<XOR<LittleLegendUpdateToOneWithWhereWithoutAccountsInput, LittleLegendUpdateWithoutAccountsInput>, LittleLegendUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountCreateNestedOneWithoutOwnedBoomsInput = {
    create?: XOR<AccountCreateWithoutOwnedBoomsInput, AccountUncheckedCreateWithoutOwnedBoomsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedBoomsInput
    connect?: AccountWhereUniqueInput
  }

  export type BoomCreateNestedOneWithoutAccountsInput = {
    create?: XOR<BoomCreateWithoutAccountsInput, BoomUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: BoomCreateOrConnectWithoutAccountsInput
    connect?: BoomWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutOwnedBoomsNestedInput = {
    create?: XOR<AccountCreateWithoutOwnedBoomsInput, AccountUncheckedCreateWithoutOwnedBoomsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedBoomsInput
    upsert?: AccountUpsertWithoutOwnedBoomsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutOwnedBoomsInput, AccountUpdateWithoutOwnedBoomsInput>, AccountUncheckedUpdateWithoutOwnedBoomsInput>
  }

  export type BoomUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<BoomCreateWithoutAccountsInput, BoomUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: BoomCreateOrConnectWithoutAccountsInput
    upsert?: BoomUpsertWithoutAccountsInput
    connect?: BoomWhereUniqueInput
    update?: XOR<XOR<BoomUpdateToOneWithWhereWithoutAccountsInput, BoomUpdateWithoutAccountsInput>, BoomUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountCreateNestedOneWithoutOwnedArenasInput = {
    create?: XOR<AccountCreateWithoutOwnedArenasInput, AccountUncheckedCreateWithoutOwnedArenasInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedArenasInput
    connect?: AccountWhereUniqueInput
  }

  export type ArenaCreateNestedOneWithoutAccountsInput = {
    create?: XOR<ArenaCreateWithoutAccountsInput, ArenaUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: ArenaCreateOrConnectWithoutAccountsInput
    connect?: ArenaWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutOwnedArenasNestedInput = {
    create?: XOR<AccountCreateWithoutOwnedArenasInput, AccountUncheckedCreateWithoutOwnedArenasInput>
    connectOrCreate?: AccountCreateOrConnectWithoutOwnedArenasInput
    upsert?: AccountUpsertWithoutOwnedArenasInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutOwnedArenasInput, AccountUpdateWithoutOwnedArenasInput>, AccountUncheckedUpdateWithoutOwnedArenasInput>
  }

  export type ArenaUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<ArenaCreateWithoutAccountsInput, ArenaUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: ArenaCreateOrConnectWithoutAccountsInput
    upsert?: ArenaUpsertWithoutAccountsInput
    connect?: ArenaWhereUniqueInput
    update?: XOR<XOR<ArenaUpdateToOneWithWhereWithoutAccountsInput, ArenaUpdateWithoutAccountsInput>, ArenaUncheckedUpdateWithoutAccountsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumRankFilter<$PrismaModel = never> = {
    equals?: $Enums.Rank | EnumRankFieldRefInput<$PrismaModel>
    in?: $Enums.Rank[]
    notIn?: $Enums.Rank[]
    not?: NestedEnumRankFilter<$PrismaModel> | $Enums.Rank
  }

  export type NestedEnumAccountStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[]
    notIn?: $Enums.AccountStatus[]
    not?: NestedEnumAccountStatusFilter<$PrismaModel> | $Enums.AccountStatus
  }

  export type NestedEnumRankWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rank | EnumRankFieldRefInput<$PrismaModel>
    in?: $Enums.Rank[]
    notIn?: $Enums.Rank[]
    not?: NestedEnumRankWithAggregatesFilter<$PrismaModel> | $Enums.Rank
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRankFilter<$PrismaModel>
    _max?: NestedEnumRankFilter<$PrismaModel>
  }

  export type NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[]
    notIn?: $Enums.AccountStatus[]
    not?: NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel> | $Enums.AccountStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountStatusFilter<$PrismaModel>
    _max?: NestedEnumAccountStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTopUpStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TopUpStatus | EnumTopUpStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TopUpStatus[]
    notIn?: $Enums.TopUpStatus[]
    not?: NestedEnumTopUpStatusFilter<$PrismaModel> | $Enums.TopUpStatus
  }

  export type NestedEnumTopUpStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TopUpStatus | EnumTopUpStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TopUpStatus[]
    notIn?: $Enums.TopUpStatus[]
    not?: NestedEnumTopUpStatusWithAggregatesFilter<$PrismaModel> | $Enums.TopUpStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTopUpStatusFilter<$PrismaModel>
    _max?: NestedEnumTopUpStatusFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[]
    notIn?: $Enums.OrderStatus[]
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type AccountCreateWithoutBuyerInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutBuyerInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutBuyerInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutBuyerInput, AccountUncheckedCreateWithoutBuyerInput>
  }

  export type AccountCreateManyBuyerInputEnvelope = {
    data: AccountCreateManyBuyerInput | AccountCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type TopUpTransactionCreateWithoutUserInput = {
    amount: Decimal | DecimalJsLike | number | string
    bank: string
    transactionCode: string
    status: $Enums.TopUpStatus
    createdAt?: Date | string
  }

  export type TopUpTransactionUncheckedCreateWithoutUserInput = {
    id?: number
    amount: Decimal | DecimalJsLike | number | string
    bank: string
    transactionCode: string
    status: $Enums.TopUpStatus
    createdAt?: Date | string
  }

  export type TopUpTransactionCreateOrConnectWithoutUserInput = {
    where: TopUpTransactionWhereUniqueInput
    create: XOR<TopUpTransactionCreateWithoutUserInput, TopUpTransactionUncheckedCreateWithoutUserInput>
  }

  export type TopUpTransactionCreateManyUserInputEnvelope = {
    data: TopUpTransactionCreateManyUserInput | TopUpTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutBuyerInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutBuyerInput, AccountUncheckedUpdateWithoutBuyerInput>
    create: XOR<AccountCreateWithoutBuyerInput, AccountUncheckedCreateWithoutBuyerInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutBuyerInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutBuyerInput, AccountUncheckedUpdateWithoutBuyerInput>
  }

  export type AccountUpdateManyWithWhereWithoutBuyerInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutBuyerInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: IntFilter<"Account"> | number
    username?: StringFilter<"Account"> | string
    password?: StringFilter<"Account"> | string
    soloRank?: EnumRankFilter<"Account"> | $Enums.Rank
    flexRank?: EnumRankFilter<"Account"> | $Enums.Rank
    tftRank?: EnumRankFilter<"Account"> | $Enums.Rank
    level?: IntFilter<"Account"> | number
    blueEssence?: IntFilter<"Account"> | number
    riotPoints?: IntFilter<"Account"> | number
    verifiedEmail?: BoolFilter<"Account"> | boolean
    championCount?: IntFilter<"Account"> | number
    skinCount?: IntFilter<"Account"> | number
    chromaCount?: IntFilter<"Account"> | number
    wardCount?: IntFilter<"Account"> | number
    emoteCount?: IntFilter<"Account"> | number
    iconCount?: IntFilter<"Account"> | number
    littleLegendCount?: IntFilter<"Account"> | number
    boomCount?: IntFilter<"Account"> | number
    arenaCount?: IntFilter<"Account"> | number
    price?: DecimalFilter<"Account"> | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFilter<"Account"> | $Enums.AccountStatus
    buyerId?: IntNullableFilter<"Account"> | number | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    orderId?: IntNullableFilter<"Account"> | number | null
  }

  export type TopUpTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TopUpTransactionWhereUniqueInput
    update: XOR<TopUpTransactionUpdateWithoutUserInput, TopUpTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TopUpTransactionCreateWithoutUserInput, TopUpTransactionUncheckedCreateWithoutUserInput>
  }

  export type TopUpTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TopUpTransactionWhereUniqueInput
    data: XOR<TopUpTransactionUpdateWithoutUserInput, TopUpTransactionUncheckedUpdateWithoutUserInput>
  }

  export type TopUpTransactionUpdateManyWithWhereWithoutUserInput = {
    where: TopUpTransactionScalarWhereInput
    data: XOR<TopUpTransactionUpdateManyMutationInput, TopUpTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type TopUpTransactionScalarWhereInput = {
    AND?: TopUpTransactionScalarWhereInput | TopUpTransactionScalarWhereInput[]
    OR?: TopUpTransactionScalarWhereInput[]
    NOT?: TopUpTransactionScalarWhereInput | TopUpTransactionScalarWhereInput[]
    id?: IntFilter<"TopUpTransaction"> | number
    userId?: IntFilter<"TopUpTransaction"> | number
    amount?: DecimalFilter<"TopUpTransaction"> | Decimal | DecimalJsLike | number | string
    bank?: StringFilter<"TopUpTransaction"> | string
    transactionCode?: StringFilter<"TopUpTransaction"> | string
    status?: EnumTopUpStatusFilter<"TopUpTransaction"> | $Enums.TopUpStatus
    createdAt?: DateTimeFilter<"TopUpTransaction"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    createdAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type UserCreateWithoutAccountsInput = {
    email: string
    password: string
    name?: string | null
    phone?: string | null
    isAdmin?: boolean
    balance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    topUpTransactions?: TopUpTransactionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    phone?: string | null
    isAdmin?: boolean
    balance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    topUpTransactions?: TopUpTransactionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type OrderCreateWithoutAccountsInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutAccountsInput = {
    id?: number
    userId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    createdAt?: Date | string
  }

  export type OrderCreateOrConnectWithoutAccountsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutAccountsInput, OrderUncheckedCreateWithoutAccountsInput>
  }

  export type AccountChampionCreateWithoutAccountInput = {
    champion: ChampionCreateNestedOneWithoutAccountsInput
  }

  export type AccountChampionUncheckedCreateWithoutAccountInput = {
    championId: number
  }

  export type AccountChampionCreateOrConnectWithoutAccountInput = {
    where: AccountChampionWhereUniqueInput
    create: XOR<AccountChampionCreateWithoutAccountInput, AccountChampionUncheckedCreateWithoutAccountInput>
  }

  export type AccountChampionCreateManyAccountInputEnvelope = {
    data: AccountChampionCreateManyAccountInput | AccountChampionCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AccountSkinCreateWithoutAccountInput = {
    skin: SkinCreateNestedOneWithoutAccountsInput
  }

  export type AccountSkinUncheckedCreateWithoutAccountInput = {
    skinId: number
  }

  export type AccountSkinCreateOrConnectWithoutAccountInput = {
    where: AccountSkinWhereUniqueInput
    create: XOR<AccountSkinCreateWithoutAccountInput, AccountSkinUncheckedCreateWithoutAccountInput>
  }

  export type AccountSkinCreateManyAccountInputEnvelope = {
    data: AccountSkinCreateManyAccountInput | AccountSkinCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AccountChromaCreateWithoutAccountInput = {
    chroma: ChromaCreateNestedOneWithoutAccountsInput
  }

  export type AccountChromaUncheckedCreateWithoutAccountInput = {
    chromaId: number
  }

  export type AccountChromaCreateOrConnectWithoutAccountInput = {
    where: AccountChromaWhereUniqueInput
    create: XOR<AccountChromaCreateWithoutAccountInput, AccountChromaUncheckedCreateWithoutAccountInput>
  }

  export type AccountChromaCreateManyAccountInputEnvelope = {
    data: AccountChromaCreateManyAccountInput | AccountChromaCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AccountWardCreateWithoutAccountInput = {
    ward: WardCreateNestedOneWithoutAccountsInput
  }

  export type AccountWardUncheckedCreateWithoutAccountInput = {
    wardId: number
  }

  export type AccountWardCreateOrConnectWithoutAccountInput = {
    where: AccountWardWhereUniqueInput
    create: XOR<AccountWardCreateWithoutAccountInput, AccountWardUncheckedCreateWithoutAccountInput>
  }

  export type AccountWardCreateManyAccountInputEnvelope = {
    data: AccountWardCreateManyAccountInput | AccountWardCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AccountEmoteCreateWithoutAccountInput = {
    emote: EmoteCreateNestedOneWithoutAccountsInput
  }

  export type AccountEmoteUncheckedCreateWithoutAccountInput = {
    emoteId: number
  }

  export type AccountEmoteCreateOrConnectWithoutAccountInput = {
    where: AccountEmoteWhereUniqueInput
    create: XOR<AccountEmoteCreateWithoutAccountInput, AccountEmoteUncheckedCreateWithoutAccountInput>
  }

  export type AccountEmoteCreateManyAccountInputEnvelope = {
    data: AccountEmoteCreateManyAccountInput | AccountEmoteCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AccountIconCreateWithoutAccountInput = {
    icon: IconCreateNestedOneWithoutAccountsInput
  }

  export type AccountIconUncheckedCreateWithoutAccountInput = {
    iconId: number
  }

  export type AccountIconCreateOrConnectWithoutAccountInput = {
    where: AccountIconWhereUniqueInput
    create: XOR<AccountIconCreateWithoutAccountInput, AccountIconUncheckedCreateWithoutAccountInput>
  }

  export type AccountIconCreateManyAccountInputEnvelope = {
    data: AccountIconCreateManyAccountInput | AccountIconCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AccountLittleLegendCreateWithoutAccountInput = {
    littleLegend: LittleLegendCreateNestedOneWithoutAccountsInput
  }

  export type AccountLittleLegendUncheckedCreateWithoutAccountInput = {
    littleLegendId: number
  }

  export type AccountLittleLegendCreateOrConnectWithoutAccountInput = {
    where: AccountLittleLegendWhereUniqueInput
    create: XOR<AccountLittleLegendCreateWithoutAccountInput, AccountLittleLegendUncheckedCreateWithoutAccountInput>
  }

  export type AccountLittleLegendCreateManyAccountInputEnvelope = {
    data: AccountLittleLegendCreateManyAccountInput | AccountLittleLegendCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AccountBoomCreateWithoutAccountInput = {
    boom: BoomCreateNestedOneWithoutAccountsInput
  }

  export type AccountBoomUncheckedCreateWithoutAccountInput = {
    boomId: number
  }

  export type AccountBoomCreateOrConnectWithoutAccountInput = {
    where: AccountBoomWhereUniqueInput
    create: XOR<AccountBoomCreateWithoutAccountInput, AccountBoomUncheckedCreateWithoutAccountInput>
  }

  export type AccountBoomCreateManyAccountInputEnvelope = {
    data: AccountBoomCreateManyAccountInput | AccountBoomCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type AccountArenaCreateWithoutAccountInput = {
    arena: ArenaCreateNestedOneWithoutAccountsInput
  }

  export type AccountArenaUncheckedCreateWithoutAccountInput = {
    arenaId: number
  }

  export type AccountArenaCreateOrConnectWithoutAccountInput = {
    where: AccountArenaWhereUniqueInput
    create: XOR<AccountArenaCreateWithoutAccountInput, AccountArenaUncheckedCreateWithoutAccountInput>
  }

  export type AccountArenaCreateManyAccountInputEnvelope = {
    data: AccountArenaCreateManyAccountInput | AccountArenaCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topUpTransactions?: TopUpTransactionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topUpTransactions?: TopUpTransactionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderUpsertWithoutAccountsInput = {
    update: XOR<OrderUpdateWithoutAccountsInput, OrderUncheckedUpdateWithoutAccountsInput>
    create: XOR<OrderCreateWithoutAccountsInput, OrderUncheckedCreateWithoutAccountsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutAccountsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutAccountsInput, OrderUncheckedUpdateWithoutAccountsInput>
  }

  export type OrderUpdateWithoutAccountsInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountChampionUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountChampionWhereUniqueInput
    update: XOR<AccountChampionUpdateWithoutAccountInput, AccountChampionUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountChampionCreateWithoutAccountInput, AccountChampionUncheckedCreateWithoutAccountInput>
  }

  export type AccountChampionUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountChampionWhereUniqueInput
    data: XOR<AccountChampionUpdateWithoutAccountInput, AccountChampionUncheckedUpdateWithoutAccountInput>
  }

  export type AccountChampionUpdateManyWithWhereWithoutAccountInput = {
    where: AccountChampionScalarWhereInput
    data: XOR<AccountChampionUpdateManyMutationInput, AccountChampionUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountChampionScalarWhereInput = {
    AND?: AccountChampionScalarWhereInput | AccountChampionScalarWhereInput[]
    OR?: AccountChampionScalarWhereInput[]
    NOT?: AccountChampionScalarWhereInput | AccountChampionScalarWhereInput[]
    accountId?: IntFilter<"AccountChampion"> | number
    championId?: IntFilter<"AccountChampion"> | number
  }

  export type AccountSkinUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountSkinWhereUniqueInput
    update: XOR<AccountSkinUpdateWithoutAccountInput, AccountSkinUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountSkinCreateWithoutAccountInput, AccountSkinUncheckedCreateWithoutAccountInput>
  }

  export type AccountSkinUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountSkinWhereUniqueInput
    data: XOR<AccountSkinUpdateWithoutAccountInput, AccountSkinUncheckedUpdateWithoutAccountInput>
  }

  export type AccountSkinUpdateManyWithWhereWithoutAccountInput = {
    where: AccountSkinScalarWhereInput
    data: XOR<AccountSkinUpdateManyMutationInput, AccountSkinUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountSkinScalarWhereInput = {
    AND?: AccountSkinScalarWhereInput | AccountSkinScalarWhereInput[]
    OR?: AccountSkinScalarWhereInput[]
    NOT?: AccountSkinScalarWhereInput | AccountSkinScalarWhereInput[]
    accountId?: IntFilter<"AccountSkin"> | number
    skinId?: IntFilter<"AccountSkin"> | number
  }

  export type AccountChromaUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountChromaWhereUniqueInput
    update: XOR<AccountChromaUpdateWithoutAccountInput, AccountChromaUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountChromaCreateWithoutAccountInput, AccountChromaUncheckedCreateWithoutAccountInput>
  }

  export type AccountChromaUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountChromaWhereUniqueInput
    data: XOR<AccountChromaUpdateWithoutAccountInput, AccountChromaUncheckedUpdateWithoutAccountInput>
  }

  export type AccountChromaUpdateManyWithWhereWithoutAccountInput = {
    where: AccountChromaScalarWhereInput
    data: XOR<AccountChromaUpdateManyMutationInput, AccountChromaUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountChromaScalarWhereInput = {
    AND?: AccountChromaScalarWhereInput | AccountChromaScalarWhereInput[]
    OR?: AccountChromaScalarWhereInput[]
    NOT?: AccountChromaScalarWhereInput | AccountChromaScalarWhereInput[]
    accountId?: IntFilter<"AccountChroma"> | number
    chromaId?: IntFilter<"AccountChroma"> | number
  }

  export type AccountWardUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountWardWhereUniqueInput
    update: XOR<AccountWardUpdateWithoutAccountInput, AccountWardUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountWardCreateWithoutAccountInput, AccountWardUncheckedCreateWithoutAccountInput>
  }

  export type AccountWardUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountWardWhereUniqueInput
    data: XOR<AccountWardUpdateWithoutAccountInput, AccountWardUncheckedUpdateWithoutAccountInput>
  }

  export type AccountWardUpdateManyWithWhereWithoutAccountInput = {
    where: AccountWardScalarWhereInput
    data: XOR<AccountWardUpdateManyMutationInput, AccountWardUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountWardScalarWhereInput = {
    AND?: AccountWardScalarWhereInput | AccountWardScalarWhereInput[]
    OR?: AccountWardScalarWhereInput[]
    NOT?: AccountWardScalarWhereInput | AccountWardScalarWhereInput[]
    accountId?: IntFilter<"AccountWard"> | number
    wardId?: IntFilter<"AccountWard"> | number
  }

  export type AccountEmoteUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountEmoteWhereUniqueInput
    update: XOR<AccountEmoteUpdateWithoutAccountInput, AccountEmoteUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountEmoteCreateWithoutAccountInput, AccountEmoteUncheckedCreateWithoutAccountInput>
  }

  export type AccountEmoteUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountEmoteWhereUniqueInput
    data: XOR<AccountEmoteUpdateWithoutAccountInput, AccountEmoteUncheckedUpdateWithoutAccountInput>
  }

  export type AccountEmoteUpdateManyWithWhereWithoutAccountInput = {
    where: AccountEmoteScalarWhereInput
    data: XOR<AccountEmoteUpdateManyMutationInput, AccountEmoteUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountEmoteScalarWhereInput = {
    AND?: AccountEmoteScalarWhereInput | AccountEmoteScalarWhereInput[]
    OR?: AccountEmoteScalarWhereInput[]
    NOT?: AccountEmoteScalarWhereInput | AccountEmoteScalarWhereInput[]
    accountId?: IntFilter<"AccountEmote"> | number
    emoteId?: IntFilter<"AccountEmote"> | number
  }

  export type AccountIconUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountIconWhereUniqueInput
    update: XOR<AccountIconUpdateWithoutAccountInput, AccountIconUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountIconCreateWithoutAccountInput, AccountIconUncheckedCreateWithoutAccountInput>
  }

  export type AccountIconUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountIconWhereUniqueInput
    data: XOR<AccountIconUpdateWithoutAccountInput, AccountIconUncheckedUpdateWithoutAccountInput>
  }

  export type AccountIconUpdateManyWithWhereWithoutAccountInput = {
    where: AccountIconScalarWhereInput
    data: XOR<AccountIconUpdateManyMutationInput, AccountIconUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountIconScalarWhereInput = {
    AND?: AccountIconScalarWhereInput | AccountIconScalarWhereInput[]
    OR?: AccountIconScalarWhereInput[]
    NOT?: AccountIconScalarWhereInput | AccountIconScalarWhereInput[]
    accountId?: IntFilter<"AccountIcon"> | number
    iconId?: IntFilter<"AccountIcon"> | number
  }

  export type AccountLittleLegendUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountLittleLegendWhereUniqueInput
    update: XOR<AccountLittleLegendUpdateWithoutAccountInput, AccountLittleLegendUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountLittleLegendCreateWithoutAccountInput, AccountLittleLegendUncheckedCreateWithoutAccountInput>
  }

  export type AccountLittleLegendUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountLittleLegendWhereUniqueInput
    data: XOR<AccountLittleLegendUpdateWithoutAccountInput, AccountLittleLegendUncheckedUpdateWithoutAccountInput>
  }

  export type AccountLittleLegendUpdateManyWithWhereWithoutAccountInput = {
    where: AccountLittleLegendScalarWhereInput
    data: XOR<AccountLittleLegendUpdateManyMutationInput, AccountLittleLegendUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountLittleLegendScalarWhereInput = {
    AND?: AccountLittleLegendScalarWhereInput | AccountLittleLegendScalarWhereInput[]
    OR?: AccountLittleLegendScalarWhereInput[]
    NOT?: AccountLittleLegendScalarWhereInput | AccountLittleLegendScalarWhereInput[]
    accountId?: IntFilter<"AccountLittleLegend"> | number
    littleLegendId?: IntFilter<"AccountLittleLegend"> | number
  }

  export type AccountBoomUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountBoomWhereUniqueInput
    update: XOR<AccountBoomUpdateWithoutAccountInput, AccountBoomUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountBoomCreateWithoutAccountInput, AccountBoomUncheckedCreateWithoutAccountInput>
  }

  export type AccountBoomUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountBoomWhereUniqueInput
    data: XOR<AccountBoomUpdateWithoutAccountInput, AccountBoomUncheckedUpdateWithoutAccountInput>
  }

  export type AccountBoomUpdateManyWithWhereWithoutAccountInput = {
    where: AccountBoomScalarWhereInput
    data: XOR<AccountBoomUpdateManyMutationInput, AccountBoomUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountBoomScalarWhereInput = {
    AND?: AccountBoomScalarWhereInput | AccountBoomScalarWhereInput[]
    OR?: AccountBoomScalarWhereInput[]
    NOT?: AccountBoomScalarWhereInput | AccountBoomScalarWhereInput[]
    accountId?: IntFilter<"AccountBoom"> | number
    boomId?: IntFilter<"AccountBoom"> | number
  }

  export type AccountArenaUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountArenaWhereUniqueInput
    update: XOR<AccountArenaUpdateWithoutAccountInput, AccountArenaUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountArenaCreateWithoutAccountInput, AccountArenaUncheckedCreateWithoutAccountInput>
  }

  export type AccountArenaUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountArenaWhereUniqueInput
    data: XOR<AccountArenaUpdateWithoutAccountInput, AccountArenaUncheckedUpdateWithoutAccountInput>
  }

  export type AccountArenaUpdateManyWithWhereWithoutAccountInput = {
    where: AccountArenaScalarWhereInput
    data: XOR<AccountArenaUpdateManyMutationInput, AccountArenaUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountArenaScalarWhereInput = {
    AND?: AccountArenaScalarWhereInput | AccountArenaScalarWhereInput[]
    OR?: AccountArenaScalarWhereInput[]
    NOT?: AccountArenaScalarWhereInput | AccountArenaScalarWhereInput[]
    accountId?: IntFilter<"AccountArena"> | number
    arenaId?: IntFilter<"AccountArena"> | number
  }

  export type UserCreateWithoutTopUpTransactionsInput = {
    email: string
    password: string
    name?: string | null
    phone?: string | null
    isAdmin?: boolean
    balance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutBuyerInput
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTopUpTransactionsInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    phone?: string | null
    isAdmin?: boolean
    balance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutBuyerInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTopUpTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTopUpTransactionsInput, UserUncheckedCreateWithoutTopUpTransactionsInput>
  }

  export type UserUpsertWithoutTopUpTransactionsInput = {
    update: XOR<UserUpdateWithoutTopUpTransactionsInput, UserUncheckedUpdateWithoutTopUpTransactionsInput>
    create: XOR<UserCreateWithoutTopUpTransactionsInput, UserUncheckedCreateWithoutTopUpTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTopUpTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTopUpTransactionsInput, UserUncheckedUpdateWithoutTopUpTransactionsInput>
  }

  export type UserUpdateWithoutTopUpTransactionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutBuyerNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTopUpTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutBuyerNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutOrdersInput = {
    email: string
    password: string
    name?: string | null
    phone?: string | null
    isAdmin?: boolean
    balance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutBuyerInput
    topUpTransactions?: TopUpTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    phone?: string | null
    isAdmin?: boolean
    balance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutBuyerInput
    topUpTransactions?: TopUpTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type AccountCreateWithoutOrderInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutOrderInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutOrderInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutOrderInput, AccountUncheckedCreateWithoutOrderInput>
  }

  export type AccountCreateManyOrderInputEnvelope = {
    data: AccountCreateManyOrderInput | AccountCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutBuyerNestedInput
    topUpTransactions?: TopUpTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutBuyerNestedInput
    topUpTransactions?: TopUpTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountUpsertWithWhereUniqueWithoutOrderInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutOrderInput, AccountUncheckedUpdateWithoutOrderInput>
    create: XOR<AccountCreateWithoutOrderInput, AccountUncheckedCreateWithoutOrderInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutOrderInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutOrderInput, AccountUncheckedUpdateWithoutOrderInput>
  }

  export type AccountUpdateManyWithWhereWithoutOrderInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutOrderInput>
  }

  export type SkinCreateWithoutChampionInput = {
    name: string
    chromas?: ChromaCreateNestedManyWithoutSkinInput
    accounts?: AccountSkinCreateNestedManyWithoutSkinInput
  }

  export type SkinUncheckedCreateWithoutChampionInput = {
    id?: number
    name: string
    chromas?: ChromaUncheckedCreateNestedManyWithoutSkinInput
    accounts?: AccountSkinUncheckedCreateNestedManyWithoutSkinInput
  }

  export type SkinCreateOrConnectWithoutChampionInput = {
    where: SkinWhereUniqueInput
    create: XOR<SkinCreateWithoutChampionInput, SkinUncheckedCreateWithoutChampionInput>
  }

  export type SkinCreateManyChampionInputEnvelope = {
    data: SkinCreateManyChampionInput | SkinCreateManyChampionInput[]
    skipDuplicates?: boolean
  }

  export type AccountChampionCreateWithoutChampionInput = {
    account: AccountCreateNestedOneWithoutOwnedChampionsInput
  }

  export type AccountChampionUncheckedCreateWithoutChampionInput = {
    accountId: number
  }

  export type AccountChampionCreateOrConnectWithoutChampionInput = {
    where: AccountChampionWhereUniqueInput
    create: XOR<AccountChampionCreateWithoutChampionInput, AccountChampionUncheckedCreateWithoutChampionInput>
  }

  export type AccountChampionCreateManyChampionInputEnvelope = {
    data: AccountChampionCreateManyChampionInput | AccountChampionCreateManyChampionInput[]
    skipDuplicates?: boolean
  }

  export type SkinUpsertWithWhereUniqueWithoutChampionInput = {
    where: SkinWhereUniqueInput
    update: XOR<SkinUpdateWithoutChampionInput, SkinUncheckedUpdateWithoutChampionInput>
    create: XOR<SkinCreateWithoutChampionInput, SkinUncheckedCreateWithoutChampionInput>
  }

  export type SkinUpdateWithWhereUniqueWithoutChampionInput = {
    where: SkinWhereUniqueInput
    data: XOR<SkinUpdateWithoutChampionInput, SkinUncheckedUpdateWithoutChampionInput>
  }

  export type SkinUpdateManyWithWhereWithoutChampionInput = {
    where: SkinScalarWhereInput
    data: XOR<SkinUpdateManyMutationInput, SkinUncheckedUpdateManyWithoutChampionInput>
  }

  export type SkinScalarWhereInput = {
    AND?: SkinScalarWhereInput | SkinScalarWhereInput[]
    OR?: SkinScalarWhereInput[]
    NOT?: SkinScalarWhereInput | SkinScalarWhereInput[]
    id?: IntFilter<"Skin"> | number
    name?: StringFilter<"Skin"> | string
    championId?: IntFilter<"Skin"> | number
  }

  export type AccountChampionUpsertWithWhereUniqueWithoutChampionInput = {
    where: AccountChampionWhereUniqueInput
    update: XOR<AccountChampionUpdateWithoutChampionInput, AccountChampionUncheckedUpdateWithoutChampionInput>
    create: XOR<AccountChampionCreateWithoutChampionInput, AccountChampionUncheckedCreateWithoutChampionInput>
  }

  export type AccountChampionUpdateWithWhereUniqueWithoutChampionInput = {
    where: AccountChampionWhereUniqueInput
    data: XOR<AccountChampionUpdateWithoutChampionInput, AccountChampionUncheckedUpdateWithoutChampionInput>
  }

  export type AccountChampionUpdateManyWithWhereWithoutChampionInput = {
    where: AccountChampionScalarWhereInput
    data: XOR<AccountChampionUpdateManyMutationInput, AccountChampionUncheckedUpdateManyWithoutChampionInput>
  }

  export type ChampionCreateWithoutSkinsInput = {
    name: string
    accounts?: AccountChampionCreateNestedManyWithoutChampionInput
  }

  export type ChampionUncheckedCreateWithoutSkinsInput = {
    id?: number
    name: string
    accounts?: AccountChampionUncheckedCreateNestedManyWithoutChampionInput
  }

  export type ChampionCreateOrConnectWithoutSkinsInput = {
    where: ChampionWhereUniqueInput
    create: XOR<ChampionCreateWithoutSkinsInput, ChampionUncheckedCreateWithoutSkinsInput>
  }

  export type ChromaCreateWithoutSkinInput = {
    name: string
    accounts?: AccountChromaCreateNestedManyWithoutChromaInput
  }

  export type ChromaUncheckedCreateWithoutSkinInput = {
    id?: number
    name: string
    accounts?: AccountChromaUncheckedCreateNestedManyWithoutChromaInput
  }

  export type ChromaCreateOrConnectWithoutSkinInput = {
    where: ChromaWhereUniqueInput
    create: XOR<ChromaCreateWithoutSkinInput, ChromaUncheckedCreateWithoutSkinInput>
  }

  export type ChromaCreateManySkinInputEnvelope = {
    data: ChromaCreateManySkinInput | ChromaCreateManySkinInput[]
    skipDuplicates?: boolean
  }

  export type AccountSkinCreateWithoutSkinInput = {
    account: AccountCreateNestedOneWithoutOwnedSkinsInput
  }

  export type AccountSkinUncheckedCreateWithoutSkinInput = {
    accountId: number
  }

  export type AccountSkinCreateOrConnectWithoutSkinInput = {
    where: AccountSkinWhereUniqueInput
    create: XOR<AccountSkinCreateWithoutSkinInput, AccountSkinUncheckedCreateWithoutSkinInput>
  }

  export type AccountSkinCreateManySkinInputEnvelope = {
    data: AccountSkinCreateManySkinInput | AccountSkinCreateManySkinInput[]
    skipDuplicates?: boolean
  }

  export type ChampionUpsertWithoutSkinsInput = {
    update: XOR<ChampionUpdateWithoutSkinsInput, ChampionUncheckedUpdateWithoutSkinsInput>
    create: XOR<ChampionCreateWithoutSkinsInput, ChampionUncheckedCreateWithoutSkinsInput>
    where?: ChampionWhereInput
  }

  export type ChampionUpdateToOneWithWhereWithoutSkinsInput = {
    where?: ChampionWhereInput
    data: XOR<ChampionUpdateWithoutSkinsInput, ChampionUncheckedUpdateWithoutSkinsInput>
  }

  export type ChampionUpdateWithoutSkinsInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountChampionUpdateManyWithoutChampionNestedInput
  }

  export type ChampionUncheckedUpdateWithoutSkinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountChampionUncheckedUpdateManyWithoutChampionNestedInput
  }

  export type ChromaUpsertWithWhereUniqueWithoutSkinInput = {
    where: ChromaWhereUniqueInput
    update: XOR<ChromaUpdateWithoutSkinInput, ChromaUncheckedUpdateWithoutSkinInput>
    create: XOR<ChromaCreateWithoutSkinInput, ChromaUncheckedCreateWithoutSkinInput>
  }

  export type ChromaUpdateWithWhereUniqueWithoutSkinInput = {
    where: ChromaWhereUniqueInput
    data: XOR<ChromaUpdateWithoutSkinInput, ChromaUncheckedUpdateWithoutSkinInput>
  }

  export type ChromaUpdateManyWithWhereWithoutSkinInput = {
    where: ChromaScalarWhereInput
    data: XOR<ChromaUpdateManyMutationInput, ChromaUncheckedUpdateManyWithoutSkinInput>
  }

  export type ChromaScalarWhereInput = {
    AND?: ChromaScalarWhereInput | ChromaScalarWhereInput[]
    OR?: ChromaScalarWhereInput[]
    NOT?: ChromaScalarWhereInput | ChromaScalarWhereInput[]
    id?: IntFilter<"Chroma"> | number
    name?: StringFilter<"Chroma"> | string
    skinId?: IntFilter<"Chroma"> | number
  }

  export type AccountSkinUpsertWithWhereUniqueWithoutSkinInput = {
    where: AccountSkinWhereUniqueInput
    update: XOR<AccountSkinUpdateWithoutSkinInput, AccountSkinUncheckedUpdateWithoutSkinInput>
    create: XOR<AccountSkinCreateWithoutSkinInput, AccountSkinUncheckedCreateWithoutSkinInput>
  }

  export type AccountSkinUpdateWithWhereUniqueWithoutSkinInput = {
    where: AccountSkinWhereUniqueInput
    data: XOR<AccountSkinUpdateWithoutSkinInput, AccountSkinUncheckedUpdateWithoutSkinInput>
  }

  export type AccountSkinUpdateManyWithWhereWithoutSkinInput = {
    where: AccountSkinScalarWhereInput
    data: XOR<AccountSkinUpdateManyMutationInput, AccountSkinUncheckedUpdateManyWithoutSkinInput>
  }

  export type SkinCreateWithoutChromasInput = {
    name: string
    champion: ChampionCreateNestedOneWithoutSkinsInput
    accounts?: AccountSkinCreateNestedManyWithoutSkinInput
  }

  export type SkinUncheckedCreateWithoutChromasInput = {
    id?: number
    name: string
    championId: number
    accounts?: AccountSkinUncheckedCreateNestedManyWithoutSkinInput
  }

  export type SkinCreateOrConnectWithoutChromasInput = {
    where: SkinWhereUniqueInput
    create: XOR<SkinCreateWithoutChromasInput, SkinUncheckedCreateWithoutChromasInput>
  }

  export type AccountChromaCreateWithoutChromaInput = {
    account: AccountCreateNestedOneWithoutOwnedChromasInput
  }

  export type AccountChromaUncheckedCreateWithoutChromaInput = {
    accountId: number
  }

  export type AccountChromaCreateOrConnectWithoutChromaInput = {
    where: AccountChromaWhereUniqueInput
    create: XOR<AccountChromaCreateWithoutChromaInput, AccountChromaUncheckedCreateWithoutChromaInput>
  }

  export type AccountChromaCreateManyChromaInputEnvelope = {
    data: AccountChromaCreateManyChromaInput | AccountChromaCreateManyChromaInput[]
    skipDuplicates?: boolean
  }

  export type SkinUpsertWithoutChromasInput = {
    update: XOR<SkinUpdateWithoutChromasInput, SkinUncheckedUpdateWithoutChromasInput>
    create: XOR<SkinCreateWithoutChromasInput, SkinUncheckedCreateWithoutChromasInput>
    where?: SkinWhereInput
  }

  export type SkinUpdateToOneWithWhereWithoutChromasInput = {
    where?: SkinWhereInput
    data: XOR<SkinUpdateWithoutChromasInput, SkinUncheckedUpdateWithoutChromasInput>
  }

  export type SkinUpdateWithoutChromasInput = {
    name?: StringFieldUpdateOperationsInput | string
    champion?: ChampionUpdateOneRequiredWithoutSkinsNestedInput
    accounts?: AccountSkinUpdateManyWithoutSkinNestedInput
  }

  export type SkinUncheckedUpdateWithoutChromasInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    championId?: IntFieldUpdateOperationsInput | number
    accounts?: AccountSkinUncheckedUpdateManyWithoutSkinNestedInput
  }

  export type AccountChromaUpsertWithWhereUniqueWithoutChromaInput = {
    where: AccountChromaWhereUniqueInput
    update: XOR<AccountChromaUpdateWithoutChromaInput, AccountChromaUncheckedUpdateWithoutChromaInput>
    create: XOR<AccountChromaCreateWithoutChromaInput, AccountChromaUncheckedCreateWithoutChromaInput>
  }

  export type AccountChromaUpdateWithWhereUniqueWithoutChromaInput = {
    where: AccountChromaWhereUniqueInput
    data: XOR<AccountChromaUpdateWithoutChromaInput, AccountChromaUncheckedUpdateWithoutChromaInput>
  }

  export type AccountChromaUpdateManyWithWhereWithoutChromaInput = {
    where: AccountChromaScalarWhereInput
    data: XOR<AccountChromaUpdateManyMutationInput, AccountChromaUncheckedUpdateManyWithoutChromaInput>
  }

  export type AccountWardCreateWithoutWardInput = {
    account: AccountCreateNestedOneWithoutOwnedWardsInput
  }

  export type AccountWardUncheckedCreateWithoutWardInput = {
    accountId: number
  }

  export type AccountWardCreateOrConnectWithoutWardInput = {
    where: AccountWardWhereUniqueInput
    create: XOR<AccountWardCreateWithoutWardInput, AccountWardUncheckedCreateWithoutWardInput>
  }

  export type AccountWardCreateManyWardInputEnvelope = {
    data: AccountWardCreateManyWardInput | AccountWardCreateManyWardInput[]
    skipDuplicates?: boolean
  }

  export type AccountWardUpsertWithWhereUniqueWithoutWardInput = {
    where: AccountWardWhereUniqueInput
    update: XOR<AccountWardUpdateWithoutWardInput, AccountWardUncheckedUpdateWithoutWardInput>
    create: XOR<AccountWardCreateWithoutWardInput, AccountWardUncheckedCreateWithoutWardInput>
  }

  export type AccountWardUpdateWithWhereUniqueWithoutWardInput = {
    where: AccountWardWhereUniqueInput
    data: XOR<AccountWardUpdateWithoutWardInput, AccountWardUncheckedUpdateWithoutWardInput>
  }

  export type AccountWardUpdateManyWithWhereWithoutWardInput = {
    where: AccountWardScalarWhereInput
    data: XOR<AccountWardUpdateManyMutationInput, AccountWardUncheckedUpdateManyWithoutWardInput>
  }

  export type AccountEmoteCreateWithoutEmoteInput = {
    account: AccountCreateNestedOneWithoutOwnedEmotesInput
  }

  export type AccountEmoteUncheckedCreateWithoutEmoteInput = {
    accountId: number
  }

  export type AccountEmoteCreateOrConnectWithoutEmoteInput = {
    where: AccountEmoteWhereUniqueInput
    create: XOR<AccountEmoteCreateWithoutEmoteInput, AccountEmoteUncheckedCreateWithoutEmoteInput>
  }

  export type AccountEmoteCreateManyEmoteInputEnvelope = {
    data: AccountEmoteCreateManyEmoteInput | AccountEmoteCreateManyEmoteInput[]
    skipDuplicates?: boolean
  }

  export type AccountEmoteUpsertWithWhereUniqueWithoutEmoteInput = {
    where: AccountEmoteWhereUniqueInput
    update: XOR<AccountEmoteUpdateWithoutEmoteInput, AccountEmoteUncheckedUpdateWithoutEmoteInput>
    create: XOR<AccountEmoteCreateWithoutEmoteInput, AccountEmoteUncheckedCreateWithoutEmoteInput>
  }

  export type AccountEmoteUpdateWithWhereUniqueWithoutEmoteInput = {
    where: AccountEmoteWhereUniqueInput
    data: XOR<AccountEmoteUpdateWithoutEmoteInput, AccountEmoteUncheckedUpdateWithoutEmoteInput>
  }

  export type AccountEmoteUpdateManyWithWhereWithoutEmoteInput = {
    where: AccountEmoteScalarWhereInput
    data: XOR<AccountEmoteUpdateManyMutationInput, AccountEmoteUncheckedUpdateManyWithoutEmoteInput>
  }

  export type AccountIconCreateWithoutIconInput = {
    account: AccountCreateNestedOneWithoutOwnedIconsInput
  }

  export type AccountIconUncheckedCreateWithoutIconInput = {
    accountId: number
  }

  export type AccountIconCreateOrConnectWithoutIconInput = {
    where: AccountIconWhereUniqueInput
    create: XOR<AccountIconCreateWithoutIconInput, AccountIconUncheckedCreateWithoutIconInput>
  }

  export type AccountIconCreateManyIconInputEnvelope = {
    data: AccountIconCreateManyIconInput | AccountIconCreateManyIconInput[]
    skipDuplicates?: boolean
  }

  export type AccountIconUpsertWithWhereUniqueWithoutIconInput = {
    where: AccountIconWhereUniqueInput
    update: XOR<AccountIconUpdateWithoutIconInput, AccountIconUncheckedUpdateWithoutIconInput>
    create: XOR<AccountIconCreateWithoutIconInput, AccountIconUncheckedCreateWithoutIconInput>
  }

  export type AccountIconUpdateWithWhereUniqueWithoutIconInput = {
    where: AccountIconWhereUniqueInput
    data: XOR<AccountIconUpdateWithoutIconInput, AccountIconUncheckedUpdateWithoutIconInput>
  }

  export type AccountIconUpdateManyWithWhereWithoutIconInput = {
    where: AccountIconScalarWhereInput
    data: XOR<AccountIconUpdateManyMutationInput, AccountIconUncheckedUpdateManyWithoutIconInput>
  }

  export type AccountLittleLegendCreateWithoutLittleLegendInput = {
    account: AccountCreateNestedOneWithoutOwnedLittleLegendsInput
  }

  export type AccountLittleLegendUncheckedCreateWithoutLittleLegendInput = {
    accountId: number
  }

  export type AccountLittleLegendCreateOrConnectWithoutLittleLegendInput = {
    where: AccountLittleLegendWhereUniqueInput
    create: XOR<AccountLittleLegendCreateWithoutLittleLegendInput, AccountLittleLegendUncheckedCreateWithoutLittleLegendInput>
  }

  export type AccountLittleLegendCreateManyLittleLegendInputEnvelope = {
    data: AccountLittleLegendCreateManyLittleLegendInput | AccountLittleLegendCreateManyLittleLegendInput[]
    skipDuplicates?: boolean
  }

  export type AccountLittleLegendUpsertWithWhereUniqueWithoutLittleLegendInput = {
    where: AccountLittleLegendWhereUniqueInput
    update: XOR<AccountLittleLegendUpdateWithoutLittleLegendInput, AccountLittleLegendUncheckedUpdateWithoutLittleLegendInput>
    create: XOR<AccountLittleLegendCreateWithoutLittleLegendInput, AccountLittleLegendUncheckedCreateWithoutLittleLegendInput>
  }

  export type AccountLittleLegendUpdateWithWhereUniqueWithoutLittleLegendInput = {
    where: AccountLittleLegendWhereUniqueInput
    data: XOR<AccountLittleLegendUpdateWithoutLittleLegendInput, AccountLittleLegendUncheckedUpdateWithoutLittleLegendInput>
  }

  export type AccountLittleLegendUpdateManyWithWhereWithoutLittleLegendInput = {
    where: AccountLittleLegendScalarWhereInput
    data: XOR<AccountLittleLegendUpdateManyMutationInput, AccountLittleLegendUncheckedUpdateManyWithoutLittleLegendInput>
  }

  export type AccountBoomCreateWithoutBoomInput = {
    account: AccountCreateNestedOneWithoutOwnedBoomsInput
  }

  export type AccountBoomUncheckedCreateWithoutBoomInput = {
    accountId: number
  }

  export type AccountBoomCreateOrConnectWithoutBoomInput = {
    where: AccountBoomWhereUniqueInput
    create: XOR<AccountBoomCreateWithoutBoomInput, AccountBoomUncheckedCreateWithoutBoomInput>
  }

  export type AccountBoomCreateManyBoomInputEnvelope = {
    data: AccountBoomCreateManyBoomInput | AccountBoomCreateManyBoomInput[]
    skipDuplicates?: boolean
  }

  export type AccountBoomUpsertWithWhereUniqueWithoutBoomInput = {
    where: AccountBoomWhereUniqueInput
    update: XOR<AccountBoomUpdateWithoutBoomInput, AccountBoomUncheckedUpdateWithoutBoomInput>
    create: XOR<AccountBoomCreateWithoutBoomInput, AccountBoomUncheckedCreateWithoutBoomInput>
  }

  export type AccountBoomUpdateWithWhereUniqueWithoutBoomInput = {
    where: AccountBoomWhereUniqueInput
    data: XOR<AccountBoomUpdateWithoutBoomInput, AccountBoomUncheckedUpdateWithoutBoomInput>
  }

  export type AccountBoomUpdateManyWithWhereWithoutBoomInput = {
    where: AccountBoomScalarWhereInput
    data: XOR<AccountBoomUpdateManyMutationInput, AccountBoomUncheckedUpdateManyWithoutBoomInput>
  }

  export type AccountArenaCreateWithoutArenaInput = {
    account: AccountCreateNestedOneWithoutOwnedArenasInput
  }

  export type AccountArenaUncheckedCreateWithoutArenaInput = {
    accountId: number
  }

  export type AccountArenaCreateOrConnectWithoutArenaInput = {
    where: AccountArenaWhereUniqueInput
    create: XOR<AccountArenaCreateWithoutArenaInput, AccountArenaUncheckedCreateWithoutArenaInput>
  }

  export type AccountArenaCreateManyArenaInputEnvelope = {
    data: AccountArenaCreateManyArenaInput | AccountArenaCreateManyArenaInput[]
    skipDuplicates?: boolean
  }

  export type AccountArenaUpsertWithWhereUniqueWithoutArenaInput = {
    where: AccountArenaWhereUniqueInput
    update: XOR<AccountArenaUpdateWithoutArenaInput, AccountArenaUncheckedUpdateWithoutArenaInput>
    create: XOR<AccountArenaCreateWithoutArenaInput, AccountArenaUncheckedCreateWithoutArenaInput>
  }

  export type AccountArenaUpdateWithWhereUniqueWithoutArenaInput = {
    where: AccountArenaWhereUniqueInput
    data: XOR<AccountArenaUpdateWithoutArenaInput, AccountArenaUncheckedUpdateWithoutArenaInput>
  }

  export type AccountArenaUpdateManyWithWhereWithoutArenaInput = {
    where: AccountArenaScalarWhereInput
    data: XOR<AccountArenaUpdateManyMutationInput, AccountArenaUncheckedUpdateManyWithoutArenaInput>
  }

  export type AccountCreateWithoutOwnedChampionsInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutOwnedChampionsInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutOwnedChampionsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutOwnedChampionsInput, AccountUncheckedCreateWithoutOwnedChampionsInput>
  }

  export type ChampionCreateWithoutAccountsInput = {
    name: string
    skins?: SkinCreateNestedManyWithoutChampionInput
  }

  export type ChampionUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
    skins?: SkinUncheckedCreateNestedManyWithoutChampionInput
  }

  export type ChampionCreateOrConnectWithoutAccountsInput = {
    where: ChampionWhereUniqueInput
    create: XOR<ChampionCreateWithoutAccountsInput, ChampionUncheckedCreateWithoutAccountsInput>
  }

  export type AccountUpsertWithoutOwnedChampionsInput = {
    update: XOR<AccountUpdateWithoutOwnedChampionsInput, AccountUncheckedUpdateWithoutOwnedChampionsInput>
    create: XOR<AccountCreateWithoutOwnedChampionsInput, AccountUncheckedCreateWithoutOwnedChampionsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutOwnedChampionsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutOwnedChampionsInput, AccountUncheckedUpdateWithoutOwnedChampionsInput>
  }

  export type AccountUpdateWithoutOwnedChampionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutOwnedChampionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type ChampionUpsertWithoutAccountsInput = {
    update: XOR<ChampionUpdateWithoutAccountsInput, ChampionUncheckedUpdateWithoutAccountsInput>
    create: XOR<ChampionCreateWithoutAccountsInput, ChampionUncheckedCreateWithoutAccountsInput>
    where?: ChampionWhereInput
  }

  export type ChampionUpdateToOneWithWhereWithoutAccountsInput = {
    where?: ChampionWhereInput
    data: XOR<ChampionUpdateWithoutAccountsInput, ChampionUncheckedUpdateWithoutAccountsInput>
  }

  export type ChampionUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
    skins?: SkinUpdateManyWithoutChampionNestedInput
  }

  export type ChampionUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    skins?: SkinUncheckedUpdateManyWithoutChampionNestedInput
  }

  export type AccountCreateWithoutOwnedSkinsInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutOwnedSkinsInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutOwnedSkinsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutOwnedSkinsInput, AccountUncheckedCreateWithoutOwnedSkinsInput>
  }

  export type SkinCreateWithoutAccountsInput = {
    name: string
    champion: ChampionCreateNestedOneWithoutSkinsInput
    chromas?: ChromaCreateNestedManyWithoutSkinInput
  }

  export type SkinUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
    championId: number
    chromas?: ChromaUncheckedCreateNestedManyWithoutSkinInput
  }

  export type SkinCreateOrConnectWithoutAccountsInput = {
    where: SkinWhereUniqueInput
    create: XOR<SkinCreateWithoutAccountsInput, SkinUncheckedCreateWithoutAccountsInput>
  }

  export type AccountUpsertWithoutOwnedSkinsInput = {
    update: XOR<AccountUpdateWithoutOwnedSkinsInput, AccountUncheckedUpdateWithoutOwnedSkinsInput>
    create: XOR<AccountCreateWithoutOwnedSkinsInput, AccountUncheckedCreateWithoutOwnedSkinsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutOwnedSkinsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutOwnedSkinsInput, AccountUncheckedUpdateWithoutOwnedSkinsInput>
  }

  export type AccountUpdateWithoutOwnedSkinsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutOwnedSkinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type SkinUpsertWithoutAccountsInput = {
    update: XOR<SkinUpdateWithoutAccountsInput, SkinUncheckedUpdateWithoutAccountsInput>
    create: XOR<SkinCreateWithoutAccountsInput, SkinUncheckedCreateWithoutAccountsInput>
    where?: SkinWhereInput
  }

  export type SkinUpdateToOneWithWhereWithoutAccountsInput = {
    where?: SkinWhereInput
    data: XOR<SkinUpdateWithoutAccountsInput, SkinUncheckedUpdateWithoutAccountsInput>
  }

  export type SkinUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
    champion?: ChampionUpdateOneRequiredWithoutSkinsNestedInput
    chromas?: ChromaUpdateManyWithoutSkinNestedInput
  }

  export type SkinUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    championId?: IntFieldUpdateOperationsInput | number
    chromas?: ChromaUncheckedUpdateManyWithoutSkinNestedInput
  }

  export type AccountCreateWithoutOwnedChromasInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutOwnedChromasInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutOwnedChromasInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutOwnedChromasInput, AccountUncheckedCreateWithoutOwnedChromasInput>
  }

  export type ChromaCreateWithoutAccountsInput = {
    name: string
    skin: SkinCreateNestedOneWithoutChromasInput
  }

  export type ChromaUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
    skinId: number
  }

  export type ChromaCreateOrConnectWithoutAccountsInput = {
    where: ChromaWhereUniqueInput
    create: XOR<ChromaCreateWithoutAccountsInput, ChromaUncheckedCreateWithoutAccountsInput>
  }

  export type AccountUpsertWithoutOwnedChromasInput = {
    update: XOR<AccountUpdateWithoutOwnedChromasInput, AccountUncheckedUpdateWithoutOwnedChromasInput>
    create: XOR<AccountCreateWithoutOwnedChromasInput, AccountUncheckedCreateWithoutOwnedChromasInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutOwnedChromasInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutOwnedChromasInput, AccountUncheckedUpdateWithoutOwnedChromasInput>
  }

  export type AccountUpdateWithoutOwnedChromasInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutOwnedChromasInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type ChromaUpsertWithoutAccountsInput = {
    update: XOR<ChromaUpdateWithoutAccountsInput, ChromaUncheckedUpdateWithoutAccountsInput>
    create: XOR<ChromaCreateWithoutAccountsInput, ChromaUncheckedCreateWithoutAccountsInput>
    where?: ChromaWhereInput
  }

  export type ChromaUpdateToOneWithWhereWithoutAccountsInput = {
    where?: ChromaWhereInput
    data: XOR<ChromaUpdateWithoutAccountsInput, ChromaUncheckedUpdateWithoutAccountsInput>
  }

  export type ChromaUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
    skin?: SkinUpdateOneRequiredWithoutChromasNestedInput
  }

  export type ChromaUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    skinId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountCreateWithoutOwnedWardsInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutOwnedWardsInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutOwnedWardsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutOwnedWardsInput, AccountUncheckedCreateWithoutOwnedWardsInput>
  }

  export type WardCreateWithoutAccountsInput = {
    name: string
  }

  export type WardUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
  }

  export type WardCreateOrConnectWithoutAccountsInput = {
    where: WardWhereUniqueInput
    create: XOR<WardCreateWithoutAccountsInput, WardUncheckedCreateWithoutAccountsInput>
  }

  export type AccountUpsertWithoutOwnedWardsInput = {
    update: XOR<AccountUpdateWithoutOwnedWardsInput, AccountUncheckedUpdateWithoutOwnedWardsInput>
    create: XOR<AccountCreateWithoutOwnedWardsInput, AccountUncheckedCreateWithoutOwnedWardsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutOwnedWardsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutOwnedWardsInput, AccountUncheckedUpdateWithoutOwnedWardsInput>
  }

  export type AccountUpdateWithoutOwnedWardsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutOwnedWardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type WardUpsertWithoutAccountsInput = {
    update: XOR<WardUpdateWithoutAccountsInput, WardUncheckedUpdateWithoutAccountsInput>
    create: XOR<WardCreateWithoutAccountsInput, WardUncheckedCreateWithoutAccountsInput>
    where?: WardWhereInput
  }

  export type WardUpdateToOneWithWhereWithoutAccountsInput = {
    where?: WardWhereInput
    data: XOR<WardUpdateWithoutAccountsInput, WardUncheckedUpdateWithoutAccountsInput>
  }

  export type WardUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WardUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateWithoutOwnedEmotesInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutOwnedEmotesInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutOwnedEmotesInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutOwnedEmotesInput, AccountUncheckedCreateWithoutOwnedEmotesInput>
  }

  export type EmoteCreateWithoutAccountsInput = {
    name: string
  }

  export type EmoteUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
  }

  export type EmoteCreateOrConnectWithoutAccountsInput = {
    where: EmoteWhereUniqueInput
    create: XOR<EmoteCreateWithoutAccountsInput, EmoteUncheckedCreateWithoutAccountsInput>
  }

  export type AccountUpsertWithoutOwnedEmotesInput = {
    update: XOR<AccountUpdateWithoutOwnedEmotesInput, AccountUncheckedUpdateWithoutOwnedEmotesInput>
    create: XOR<AccountCreateWithoutOwnedEmotesInput, AccountUncheckedCreateWithoutOwnedEmotesInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutOwnedEmotesInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutOwnedEmotesInput, AccountUncheckedUpdateWithoutOwnedEmotesInput>
  }

  export type AccountUpdateWithoutOwnedEmotesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutOwnedEmotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type EmoteUpsertWithoutAccountsInput = {
    update: XOR<EmoteUpdateWithoutAccountsInput, EmoteUncheckedUpdateWithoutAccountsInput>
    create: XOR<EmoteCreateWithoutAccountsInput, EmoteUncheckedCreateWithoutAccountsInput>
    where?: EmoteWhereInput
  }

  export type EmoteUpdateToOneWithWhereWithoutAccountsInput = {
    where?: EmoteWhereInput
    data: XOR<EmoteUpdateWithoutAccountsInput, EmoteUncheckedUpdateWithoutAccountsInput>
  }

  export type EmoteUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EmoteUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateWithoutOwnedIconsInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutOwnedIconsInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutOwnedIconsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutOwnedIconsInput, AccountUncheckedCreateWithoutOwnedIconsInput>
  }

  export type IconCreateWithoutAccountsInput = {
    name: string
  }

  export type IconUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
  }

  export type IconCreateOrConnectWithoutAccountsInput = {
    where: IconWhereUniqueInput
    create: XOR<IconCreateWithoutAccountsInput, IconUncheckedCreateWithoutAccountsInput>
  }

  export type AccountUpsertWithoutOwnedIconsInput = {
    update: XOR<AccountUpdateWithoutOwnedIconsInput, AccountUncheckedUpdateWithoutOwnedIconsInput>
    create: XOR<AccountCreateWithoutOwnedIconsInput, AccountUncheckedCreateWithoutOwnedIconsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutOwnedIconsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutOwnedIconsInput, AccountUncheckedUpdateWithoutOwnedIconsInput>
  }

  export type AccountUpdateWithoutOwnedIconsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutOwnedIconsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type IconUpsertWithoutAccountsInput = {
    update: XOR<IconUpdateWithoutAccountsInput, IconUncheckedUpdateWithoutAccountsInput>
    create: XOR<IconCreateWithoutAccountsInput, IconUncheckedCreateWithoutAccountsInput>
    where?: IconWhereInput
  }

  export type IconUpdateToOneWithWhereWithoutAccountsInput = {
    where?: IconWhereInput
    data: XOR<IconUpdateWithoutAccountsInput, IconUncheckedUpdateWithoutAccountsInput>
  }

  export type IconUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IconUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateWithoutOwnedLittleLegendsInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutOwnedLittleLegendsInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutOwnedLittleLegendsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutOwnedLittleLegendsInput, AccountUncheckedCreateWithoutOwnedLittleLegendsInput>
  }

  export type LittleLegendCreateWithoutAccountsInput = {
    name: string
  }

  export type LittleLegendUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
  }

  export type LittleLegendCreateOrConnectWithoutAccountsInput = {
    where: LittleLegendWhereUniqueInput
    create: XOR<LittleLegendCreateWithoutAccountsInput, LittleLegendUncheckedCreateWithoutAccountsInput>
  }

  export type AccountUpsertWithoutOwnedLittleLegendsInput = {
    update: XOR<AccountUpdateWithoutOwnedLittleLegendsInput, AccountUncheckedUpdateWithoutOwnedLittleLegendsInput>
    create: XOR<AccountCreateWithoutOwnedLittleLegendsInput, AccountUncheckedCreateWithoutOwnedLittleLegendsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutOwnedLittleLegendsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutOwnedLittleLegendsInput, AccountUncheckedUpdateWithoutOwnedLittleLegendsInput>
  }

  export type AccountUpdateWithoutOwnedLittleLegendsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutOwnedLittleLegendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type LittleLegendUpsertWithoutAccountsInput = {
    update: XOR<LittleLegendUpdateWithoutAccountsInput, LittleLegendUncheckedUpdateWithoutAccountsInput>
    create: XOR<LittleLegendCreateWithoutAccountsInput, LittleLegendUncheckedCreateWithoutAccountsInput>
    where?: LittleLegendWhereInput
  }

  export type LittleLegendUpdateToOneWithWhereWithoutAccountsInput = {
    where?: LittleLegendWhereInput
    data: XOR<LittleLegendUpdateWithoutAccountsInput, LittleLegendUncheckedUpdateWithoutAccountsInput>
  }

  export type LittleLegendUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LittleLegendUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateWithoutOwnedBoomsInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutOwnedBoomsInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedArenas?: AccountArenaUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutOwnedBoomsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutOwnedBoomsInput, AccountUncheckedCreateWithoutOwnedBoomsInput>
  }

  export type BoomCreateWithoutAccountsInput = {
    name: string
  }

  export type BoomUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
  }

  export type BoomCreateOrConnectWithoutAccountsInput = {
    where: BoomWhereUniqueInput
    create: XOR<BoomCreateWithoutAccountsInput, BoomUncheckedCreateWithoutAccountsInput>
  }

  export type AccountUpsertWithoutOwnedBoomsInput = {
    update: XOR<AccountUpdateWithoutOwnedBoomsInput, AccountUncheckedUpdateWithoutOwnedBoomsInput>
    create: XOR<AccountCreateWithoutOwnedBoomsInput, AccountUncheckedCreateWithoutOwnedBoomsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutOwnedBoomsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutOwnedBoomsInput, AccountUncheckedUpdateWithoutOwnedBoomsInput>
  }

  export type AccountUpdateWithoutOwnedBoomsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutOwnedBoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type BoomUpsertWithoutAccountsInput = {
    update: XOR<BoomUpdateWithoutAccountsInput, BoomUncheckedUpdateWithoutAccountsInput>
    create: XOR<BoomCreateWithoutAccountsInput, BoomUncheckedCreateWithoutAccountsInput>
    where?: BoomWhereInput
  }

  export type BoomUpdateToOneWithWhereWithoutAccountsInput = {
    where?: BoomWhereInput
    data: XOR<BoomUpdateWithoutAccountsInput, BoomUncheckedUpdateWithoutAccountsInput>
  }

  export type BoomUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BoomUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateWithoutOwnedArenasInput = {
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer?: UserCreateNestedOneWithoutAccountsInput
    order?: OrderCreateNestedOneWithoutAccountsInput
    ownedChampions?: AccountChampionCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutOwnedArenasInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
    ownedChampions?: AccountChampionUncheckedCreateNestedManyWithoutAccountInput
    ownedSkins?: AccountSkinUncheckedCreateNestedManyWithoutAccountInput
    ownedChromas?: AccountChromaUncheckedCreateNestedManyWithoutAccountInput
    ownedWards?: AccountWardUncheckedCreateNestedManyWithoutAccountInput
    ownedEmotes?: AccountEmoteUncheckedCreateNestedManyWithoutAccountInput
    ownedIcons?: AccountIconUncheckedCreateNestedManyWithoutAccountInput
    ownedLittleLegends?: AccountLittleLegendUncheckedCreateNestedManyWithoutAccountInput
    ownedBooms?: AccountBoomUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutOwnedArenasInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutOwnedArenasInput, AccountUncheckedCreateWithoutOwnedArenasInput>
  }

  export type ArenaCreateWithoutAccountsInput = {
    name: string
  }

  export type ArenaUncheckedCreateWithoutAccountsInput = {
    id?: number
    name: string
  }

  export type ArenaCreateOrConnectWithoutAccountsInput = {
    where: ArenaWhereUniqueInput
    create: XOR<ArenaCreateWithoutAccountsInput, ArenaUncheckedCreateWithoutAccountsInput>
  }

  export type AccountUpsertWithoutOwnedArenasInput = {
    update: XOR<AccountUpdateWithoutOwnedArenasInput, AccountUncheckedUpdateWithoutOwnedArenasInput>
    create: XOR<AccountCreateWithoutOwnedArenasInput, AccountUncheckedCreateWithoutOwnedArenasInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutOwnedArenasInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutOwnedArenasInput, AccountUncheckedUpdateWithoutOwnedArenasInput>
  }

  export type AccountUpdateWithoutOwnedArenasInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutOwnedArenasInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type ArenaUpsertWithoutAccountsInput = {
    update: XOR<ArenaUpdateWithoutAccountsInput, ArenaUncheckedUpdateWithoutAccountsInput>
    create: XOR<ArenaCreateWithoutAccountsInput, ArenaUncheckedCreateWithoutAccountsInput>
    where?: ArenaWhereInput
  }

  export type ArenaUpdateToOneWithWhereWithoutAccountsInput = {
    where?: ArenaWhereInput
    data: XOR<ArenaUpdateWithoutAccountsInput, ArenaUncheckedUpdateWithoutAccountsInput>
  }

  export type ArenaUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ArenaUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateManyBuyerInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: number | null
  }

  export type TopUpTransactionCreateManyUserInput = {
    id?: number
    amount: Decimal | DecimalJsLike | number | string
    bank: string
    transactionCode: string
    status: $Enums.TopUpStatus
    createdAt?: Date | string
  }

  export type OrderCreateManyUserInput = {
    id?: number
    totalAmount: Decimal | DecimalJsLike | number | string
    status: $Enums.OrderStatus
    createdAt?: Date | string
  }

  export type AccountUpdateWithoutBuyerInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateManyWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TopUpTransactionUpdateWithoutUserInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bank?: StringFieldUpdateOperationsInput | string
    transactionCode?: StringFieldUpdateOperationsInput | string
    status?: EnumTopUpStatusFieldUpdateOperationsInput | $Enums.TopUpStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopUpTransactionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bank?: StringFieldUpdateOperationsInput | string
    transactionCode?: StringFieldUpdateOperationsInput | string
    status?: EnumTopUpStatusFieldUpdateOperationsInput | $Enums.TopUpStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopUpTransactionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bank?: StringFieldUpdateOperationsInput | string
    transactionCode?: StringFieldUpdateOperationsInput | string
    status?: EnumTopUpStatusFieldUpdateOperationsInput | $Enums.TopUpStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutUserInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountChampionCreateManyAccountInput = {
    championId: number
  }

  export type AccountSkinCreateManyAccountInput = {
    skinId: number
  }

  export type AccountChromaCreateManyAccountInput = {
    chromaId: number
  }

  export type AccountWardCreateManyAccountInput = {
    wardId: number
  }

  export type AccountEmoteCreateManyAccountInput = {
    emoteId: number
  }

  export type AccountIconCreateManyAccountInput = {
    iconId: number
  }

  export type AccountLittleLegendCreateManyAccountInput = {
    littleLegendId: number
  }

  export type AccountBoomCreateManyAccountInput = {
    boomId: number
  }

  export type AccountArenaCreateManyAccountInput = {
    arenaId: number
  }

  export type AccountChampionUpdateWithoutAccountInput = {
    champion?: ChampionUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountChampionUncheckedUpdateWithoutAccountInput = {
    championId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountChampionUncheckedUpdateManyWithoutAccountInput = {
    championId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountSkinUpdateWithoutAccountInput = {
    skin?: SkinUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountSkinUncheckedUpdateWithoutAccountInput = {
    skinId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountSkinUncheckedUpdateManyWithoutAccountInput = {
    skinId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountChromaUpdateWithoutAccountInput = {
    chroma?: ChromaUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountChromaUncheckedUpdateWithoutAccountInput = {
    chromaId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountChromaUncheckedUpdateManyWithoutAccountInput = {
    chromaId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountWardUpdateWithoutAccountInput = {
    ward?: WardUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountWardUncheckedUpdateWithoutAccountInput = {
    wardId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountWardUncheckedUpdateManyWithoutAccountInput = {
    wardId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountEmoteUpdateWithoutAccountInput = {
    emote?: EmoteUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountEmoteUncheckedUpdateWithoutAccountInput = {
    emoteId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountEmoteUncheckedUpdateManyWithoutAccountInput = {
    emoteId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountIconUpdateWithoutAccountInput = {
    icon?: IconUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountIconUncheckedUpdateWithoutAccountInput = {
    iconId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountIconUncheckedUpdateManyWithoutAccountInput = {
    iconId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountLittleLegendUpdateWithoutAccountInput = {
    littleLegend?: LittleLegendUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountLittleLegendUncheckedUpdateWithoutAccountInput = {
    littleLegendId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountLittleLegendUncheckedUpdateManyWithoutAccountInput = {
    littleLegendId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountBoomUpdateWithoutAccountInput = {
    boom?: BoomUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountBoomUncheckedUpdateWithoutAccountInput = {
    boomId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountBoomUncheckedUpdateManyWithoutAccountInput = {
    boomId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountArenaUpdateWithoutAccountInput = {
    arena?: ArenaUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountArenaUncheckedUpdateWithoutAccountInput = {
    arenaId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountArenaUncheckedUpdateManyWithoutAccountInput = {
    arenaId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountCreateManyOrderInput = {
    id?: number
    username: string
    password: string
    soloRank: $Enums.Rank
    flexRank: $Enums.Rank
    tftRank: $Enums.Rank
    level: number
    blueEssence: number
    riotPoints: number
    verifiedEmail?: boolean
    championCount: number
    skinCount: number
    chromaCount: number
    wardCount: number
    emoteCount: number
    iconCount: number
    littleLegendCount: number
    boomCount: number
    arenaCount: number
    price: Decimal | DecimalJsLike | number | string
    status?: $Enums.AccountStatus
    buyerId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateWithoutOrderInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneWithoutAccountsNestedInput
    ownedChampions?: AccountChampionUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedChampions?: AccountChampionUncheckedUpdateManyWithoutAccountNestedInput
    ownedSkins?: AccountSkinUncheckedUpdateManyWithoutAccountNestedInput
    ownedChromas?: AccountChromaUncheckedUpdateManyWithoutAccountNestedInput
    ownedWards?: AccountWardUncheckedUpdateManyWithoutAccountNestedInput
    ownedEmotes?: AccountEmoteUncheckedUpdateManyWithoutAccountNestedInput
    ownedIcons?: AccountIconUncheckedUpdateManyWithoutAccountNestedInput
    ownedLittleLegends?: AccountLittleLegendUncheckedUpdateManyWithoutAccountNestedInput
    ownedBooms?: AccountBoomUncheckedUpdateManyWithoutAccountNestedInput
    ownedArenas?: AccountArenaUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    soloRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    flexRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    tftRank?: EnumRankFieldUpdateOperationsInput | $Enums.Rank
    level?: IntFieldUpdateOperationsInput | number
    blueEssence?: IntFieldUpdateOperationsInput | number
    riotPoints?: IntFieldUpdateOperationsInput | number
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    championCount?: IntFieldUpdateOperationsInput | number
    skinCount?: IntFieldUpdateOperationsInput | number
    chromaCount?: IntFieldUpdateOperationsInput | number
    wardCount?: IntFieldUpdateOperationsInput | number
    emoteCount?: IntFieldUpdateOperationsInput | number
    iconCount?: IntFieldUpdateOperationsInput | number
    littleLegendCount?: IntFieldUpdateOperationsInput | number
    boomCount?: IntFieldUpdateOperationsInput | number
    arenaCount?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    buyerId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkinCreateManyChampionInput = {
    id?: number
    name: string
  }

  export type AccountChampionCreateManyChampionInput = {
    accountId: number
  }

  export type SkinUpdateWithoutChampionInput = {
    name?: StringFieldUpdateOperationsInput | string
    chromas?: ChromaUpdateManyWithoutSkinNestedInput
    accounts?: AccountSkinUpdateManyWithoutSkinNestedInput
  }

  export type SkinUncheckedUpdateWithoutChampionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    chromas?: ChromaUncheckedUpdateManyWithoutSkinNestedInput
    accounts?: AccountSkinUncheckedUpdateManyWithoutSkinNestedInput
  }

  export type SkinUncheckedUpdateManyWithoutChampionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccountChampionUpdateWithoutChampionInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedChampionsNestedInput
  }

  export type AccountChampionUncheckedUpdateWithoutChampionInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountChampionUncheckedUpdateManyWithoutChampionInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type ChromaCreateManySkinInput = {
    id?: number
    name: string
  }

  export type AccountSkinCreateManySkinInput = {
    accountId: number
  }

  export type ChromaUpdateWithoutSkinInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountChromaUpdateManyWithoutChromaNestedInput
  }

  export type ChromaUncheckedUpdateWithoutSkinInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountChromaUncheckedUpdateManyWithoutChromaNestedInput
  }

  export type ChromaUncheckedUpdateManyWithoutSkinInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AccountSkinUpdateWithoutSkinInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedSkinsNestedInput
  }

  export type AccountSkinUncheckedUpdateWithoutSkinInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountSkinUncheckedUpdateManyWithoutSkinInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountChromaCreateManyChromaInput = {
    accountId: number
  }

  export type AccountChromaUpdateWithoutChromaInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedChromasNestedInput
  }

  export type AccountChromaUncheckedUpdateWithoutChromaInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountChromaUncheckedUpdateManyWithoutChromaInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountWardCreateManyWardInput = {
    accountId: number
  }

  export type AccountWardUpdateWithoutWardInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedWardsNestedInput
  }

  export type AccountWardUncheckedUpdateWithoutWardInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountWardUncheckedUpdateManyWithoutWardInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountEmoteCreateManyEmoteInput = {
    accountId: number
  }

  export type AccountEmoteUpdateWithoutEmoteInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedEmotesNestedInput
  }

  export type AccountEmoteUncheckedUpdateWithoutEmoteInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountEmoteUncheckedUpdateManyWithoutEmoteInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountIconCreateManyIconInput = {
    accountId: number
  }

  export type AccountIconUpdateWithoutIconInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedIconsNestedInput
  }

  export type AccountIconUncheckedUpdateWithoutIconInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountIconUncheckedUpdateManyWithoutIconInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountLittleLegendCreateManyLittleLegendInput = {
    accountId: number
  }

  export type AccountLittleLegendUpdateWithoutLittleLegendInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedLittleLegendsNestedInput
  }

  export type AccountLittleLegendUncheckedUpdateWithoutLittleLegendInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountLittleLegendUncheckedUpdateManyWithoutLittleLegendInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountBoomCreateManyBoomInput = {
    accountId: number
  }

  export type AccountBoomUpdateWithoutBoomInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedBoomsNestedInput
  }

  export type AccountBoomUncheckedUpdateWithoutBoomInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountBoomUncheckedUpdateManyWithoutBoomInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountArenaCreateManyArenaInput = {
    accountId: number
  }

  export type AccountArenaUpdateWithoutArenaInput = {
    account?: AccountUpdateOneRequiredWithoutOwnedArenasNestedInput
  }

  export type AccountArenaUncheckedUpdateWithoutArenaInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountArenaUncheckedUpdateManyWithoutArenaInput = {
    accountId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}